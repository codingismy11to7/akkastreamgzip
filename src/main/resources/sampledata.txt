{"AppServerService":{"name":"AppServer","uuid":"6c2d635e-89ee-30c1-95ac-05214a1bc8ae"}}
{"InstructionDef":{"key":"start","ownerUUID":"d7c5ac53-3365-4c21-9c2c-b6c0a45448f6","desc":"Set configuration values and start this transport.","dynamicFields":{},"generatorUUID":"a5d05e5f-19ca-4633-bd64-105def519127","name":"Set configuration values and start this transport.","uuid":"6c427135-1372-3959-a0f9-e4b13ba0fc95","parameterDefs":[{"maxLength":0,"minLength":0,"type":"String","name":"Username","defaultValue":"root","key":"Username"},{"isEncrypted":true,"name":"Password","maxLength":0,"minLength":0,"type":"String","key":"Password"},{"key":"IP Address","name":"IP Address","maxLength":0,"minLength":0,"type":"String","defaultValue":"127.0.0.1"},{"maxValue":65535.0,"key":"TCP Port Number","name":"TCP Port Number","type":"Number","desc":"TCP Port Number","defaultValue":"23","precision":0,"minValue":0.0,"stepSize":0.0},{"type":"Number","desc":"Connection Timeout","key":"Connection Timeout","name":"Connection Timeout","precision":0,"stepSize":0.0,"defaultValue":"5000","maxValue":300000.0,"minValue":50.0},{"name":"IP Version","desc":"IP Version","type":"GroupBool","defaultSelectedOption":{"desc":"IPv4","name":"IPv4","type":"SimpleBool","key":"IPv4","isSelected":true},"options":[{"desc":"IPv4","name":"IPv4","type":"SimpleBool","key":"IPv4","isSelected":true},{"key":"IPv6","type":"SimpleBool","name":"IPv6","desc":"IPv6"}],"key":"IP Version"},{"key":"loginScript","maxLength":0,"minLength":0,"type":"String","name":"loginScript","defaultValue":"expect \"login: \"; send \"$Username\n\"; expect \"Password: \"; send \"$Password\n\"; expect \"]$ \""},{"selectedEntries":["VT100"],"desc":"terminalType","key":"terminalType","listEntries":["VT100","VT100","VT220","ANSI","DUMB"],"type":"List","name":"terminalType"}],"m_properties":{},"managerUUID":"6535dd49-d59e-32e4-a01c-86c9aa9ec29f"}}
{"Translator":{"author":"Adam Hayes","filename":"Sencore_VBC.py","key":"Sencore_VBC.py","uuid":"6daff77b-1e04-3c7c-aa59-a952170fd25a","desc":"Place to store information for subdevices","modTime":1549565237524,"version":"1.0.0","name":"SevOne Capacity Monitoring System","sharedModules":{"ProbeUtils":"shared.vendor.DMSUtils.ProbeUtils","DeviceManagementSystem":"shared.vendor.DMSUtils.DeviceManagementSystem","BaseSnmpTranslator":"shared.simpleframework.SimpleSnmpTranslator"},"filecontents":"\r\nfrom shared.simpleframework.SimpleSnmpTranslator import *\r\nfrom com.codemettle.sherpa.datamodel.impl import DatapointTableDef\r\nfrom shared.utilsmodel.SubDevObject import *\r\nfrom com.codemettle.sherpa.datamodel.dp_policies.impl import AlwaysSendPolicy\r\nfrom shared.vendor.DMSUtils.DeviceManagementSystem import *\r\nfrom shared.vendor.DMSUtils.ProbeUtils import *\r\nimport java.util.UUID as JUUID\r\nfrom urllib2 import urlopen\r\nfrom xml.etree import cElementTree as ET\r\n\r\nNAME \u003d \"SevOne Capacity Monitoring System\"\r\nAUTHOR \u003d \"Adam Hayes\"\r\n\r\nglobal UUID\r\n\r\nclass Sencore_VBC(BaseSnmpTranslator, DeviceManagementSystem, ProbeUtils):\r\n\r\n    oidToColDict \u003d {\r\n        \"alarmSequence\"  :  (\"1.3.6.1.4.1.24562.300.1.2.1\", \"Alarm Sequence Number\"),\r\n        \"referenceNumber\"  :  (\"1.3.6.1.4.1.24562.300.1.3.1\", \"Reference Number\"),\r\n        \"alarmTime\" :  (\"1.3.6.1.4.1.24562.300.1.4.1\", \"Alarm Time\"),\r\n        \"alarmId\" :  (\"1.3.6.1.4.1.24562.300.1.6.1\", \"Alarm ID\"),\r\n        \"alarmType\" :  (\"1.3.6.1.4.1.24562.300.1.7.1\", \"Alarm Type\"),\r\n        \"alarmText\"  :  (\"1.3.6.1.4.1.24562.300.1.8.1\", \"Alarm Description\"),\r\n        \"sourceText\" :  (\"1.3.6.1.4.1.24562.300.1.9.1\", \"Source Text\"),\r\n        \"severityLevel\" :  (\"1.3.6.1.4.1.24562.300.1.10.1\", \"Severity Level\"),\r\n    }\r\n\r\n    # Bell Specific Dict for Sencore API Queries\r\n    # REMOVE IF YOU ARE USING THIS TRANSLATOR FOR NON-BELL PROJECTS\r\n    probeToIpDict \u003d {\r\n        \"Post Transcoder Probe\" :   [\"10.51.3.11\", \"10.51.3.12\", \"10.51.3.48\"],\r\n        \"Post Transcoder Probe Secondary\" :   [\"10.51.3.13\", \"10.51.3.14\", \"10.51.3.15\", \"10.51.3.26\", \"10.51.3.27\", \"10.51.3.28\", \"10.51.3.48\", \"10.51.3.58\", \"10.51.3.59\"],\r\n        \"Pre Transcoder Probe 1\" :   [\"10.51.3.57\"],\r\n        \"Pre Transcoder Probe 2\"  :   [\"10.51.3.56\"],\r\n        \"Post Origin Probe 1\"   :   [\"10.51.3.29\", \"10.51.3.50\", \"10.51.3.51\"],\r\n        \"Post Origin Probe 2\"   :   [\"10.51.3.29\", \"10.51.3.50\", \"10.51.3.51\"],\r\n        \"Post Load Balancer\"     :   [\"10.51.3.38\"],\r\n        \"Post CDN Probe\"      :   [\"10.51.3.35\"],\r\n    }\r\n\r\n    def __init__(self):\r\n        BaseSnmpTranslator.__init__(self, UUID)\r\n        DeviceManagementSystem.__init__(self)\r\n        ProbeUtils.__init__(self)\r\n\r\n        trapsTab \u003d DatapointTableDef(\"trapTable\", \"Last 50 Events\")\r\n        trapsTab.setMaxRowCount(50)\r\n\r\n\r\n        for oid,descTuple in self.oidToColDict.iteritems():\r\n            col \u003d (DatapointBuilder(oid, descTuple[1])\r\n                .isMap(True)\r\n                #.withPolicy(\"AlwaysSendPolicy\") --- why are you always sending\r\n                .create()\r\n            )\r\n\r\n            trapsTab.addColumnDef(col)\r\n            self.addDatapointDef(col)\r\n\r\n        self.addDatapointTableDef(trapsTab)\r\n\r\n        self.addDatapointDef(DatapointBuilder(\"allowCreateSubdevices\", \"Create sub-devices\")\r\n                              .isSettable(InstructionBuilder()\r\n                                          .listParm(\"allowCreateSubdevices\", \"Create sub-devices\")\r\n                                          .entry(\"True\")\r\n                                          .entry(\"False\")\r\n                                .create())\r\n                             .defaultValue(\"False\")\r\n                             .create())\r\n\r\n\r\n        self.addInstructionDef(InstructionBuilder(\"clearTable\", \"clear table\").create())\r\n\r\n        self.registerTrapHandler(\"*\", self.handleTrap)\r\n\r\n        # This instruction is for testing purposes only\r\n        self.addInstructionDef(InstructionBuilder(\"testIncomingTrap\", \"Test Incoming Trap\")\r\n                                .create())\r\n\r\n        self.add(SimpleInstBuilder(\"executeApiPoll\", \"Execute API Poll\")\r\n                 .instHandler(self.executeApiInstruction))\r\n\r\n\r\n    def start(self, instruction, resource\u003dNone):\r\n        #this only need be done once, self.utils.createSubResources takes care of keeping it up to date\r\n        if resource is not None:\r\n            self.utils.getExistingSubResources(resource)\r\n\r\n            SECOND \u003d 1000\r\n            MINUTE \u003d 60 * SECOND\r\n            # added 12/12/18 by Adam Hayes\r\n            alarmPoll \u003d (SimplePollBuilder(\"alarmPoll\")\r\n                         .repeatEvery(3 * MINUTE)\r\n                         .funcOrMethodToCall(self.executeApiAlarmPoll))\r\n            resource.addPoll(alarmPoll.getPollName(), alarmPoll.getPoll())\r\n\r\n        BaseSnmpTranslator.start(self, instruction, resource)\r\n\r\n    def buildApiUrl(self, ipAddress, device, restCmd, severity\u003dNone):\r\n        # builds the http query for the Sencore Probe API\r\n        if severity is None:\r\n            url \u003d \"http://\" + ipAddress + \"/\" + device + restCmd\r\n        else:\r\n            url \u003d \"http://\" + ipAddress + \"/\" + device + restCmd + \"\u0026severity\u003d\" + severity\r\n\r\n        return url\r\n\r\n    def executeApiAlarmPoll(self, poll, resource, userdata):\r\n        # this poll will run every min and will query all probe devices that the VBC normally gets traps from and will\r\n        # cross reference returned alarms with the currently active alarms\r\n        logger \u003d resource.getLogger()\r\n        logger.debug(\"Executing Poll with key: %s\" % poll.getName())\r\n        currentAlarmsStatus \u003d {}\r\n\r\n        # loop through each device in the dict and check each one on its own before moving on\r\n        for key in self.probeToIpDict:\r\n            logger.trace(\"Handling Alarm Status for probe %s\" % key)\r\n\r\n            # DEBUG CODE REMOVE WHEN DONE TESTING\r\n            # if key !\u003d \"Post Transcoder Probe\":\r\n            #     continue\r\n\r\n            resUUID \u003d self.utils.getResourceUUIDByName(resource, key)\r\n\r\n            if resUUID is None:\r\n                logger.warn(\"Cannot process probe, no probe found with name: %s\" % key)\r\n                continue\r\n\r\n            alarmsFromApi \u003d []\r\n            probeResource \u003d resource.getResourceManager().getResource(resUUID)\r\n\r\n            for ip in self.probeToIpDict[key]:\r\n\r\n                # generate query url for API\r\n                logger.trace(\"Generating url for ip %s\" % ip)\r\n                #TODO: test using severity of Fatal and Critical in query instead of parsing later\r\n                url \u003d self.buildApiUrl(ip, \"probe\", \"/alarms\")\r\n                # runs the api query and throws appropriate errors if query is unsuccessful\r\n                logger.trace(\"Sending url: %s\" % url)\r\n                alarmUrlConn \u003d None\r\n                try:\r\n                    alarmUrlConn \u003d urlopen(url)\r\n                    response \u003d alarmUrlConn.read()\r\n                    alarmUrlConn.close()\r\n                except Exception as e:\r\n                    logger.warn(\"Exception reading response from url: %s. Make sure IP Address and severity are correct. Error: %s\" % (url, str(e)))\r\n                    try:\r\n                        alarmUrlConn.close()\r\n                    except Exception as e:\r\n                        logger.warn(\"Failed to close socket connection connection\")\r\n\r\n                    self.handleBadPoll(resource, poll)\r\n                    return\r\n\r\n                # parse the response and filter for Severity and then grab TRAP info\r\n                # response is XML, format is:\r\n\r\n                # \u003c?xml version\u003d\"1.0\"\u003e\r\n                # \u003cAlarmList boardtype, hwId, updated, IPAddress, uptime, probetime, crc, release\u003e\r\n                #     \u003cAlarm status, time, duration, severity, aty, aid, stream, description, trap_text, seq, ref, id,\u003e\u003c/Alarm\u003e\r\n                #     \u003cAlarm\u003e\u003c/Alarm\u003e\r\n                # \u003c/AlarmList\u003e\r\n                #\r\n                # The only relevant values we process from this is the severity and description\r\n                # severity \u003d {Fault, Major, Warning, Error}\r\n                # description \u003d Alarm Description\r\n                #\r\n                # description matches the trap text we get\r\n\r\n                # logger.debug(\"Parsing XML from response: %s\" % str(response))\r\n                tree \u003d ET.fromstring(response)\r\n                for child in tree.findall(\"Alarm\"):\r\n                    attributes \u003d child.attrib\r\n                    description \u003d None\r\n\r\n                    # only looking for major and critical alarms\r\n                    if attributes[\"severity\"] !\u003d \"Major\" and attributes[\"severity\"] !\u003d \"Fatal\":\r\n                        continue\r\n\r\n                    # if this is not an \"Active\" or \"Cleared\" entry, ignore\r\n                    status \u003d attributes[\"status\"]\r\n                    if status !\u003d \"Active\" and status !\u003d \"Cleared\":\r\n                        continue\r\n\r\n                    # the cleared alarms have a timestamp appended to the description, so it is not good to use\r\n                    # for checking status. So we need to take the last element in the Trap Text (desc but with\r\n                    # no timestamp)\r\n                    if status \u003d\u003d \"Cleared\":\r\n                        trapText \u003d attributes[\"trap_text\"]\r\n                        textSplit \u003d trapText.split(\"|\")\r\n                        description \u003d textSplit[-1]\r\n                    else:\r\n                        description \u003d attributes[\"description\"]\r\n\r\n                    # format of alarm names is stream - description\r\n                    alarmKey \u003d \"%s - %s\" % (attributes[\"stream\"], description)\r\n\r\n                    # track the current status (active or clear) in the dict\r\n                    currentAlarmsStatus[alarmKey] \u003d status\r\n\r\n                    alarmsFromApi.append(alarmKey)\r\n                    logger.debug(\"adding %s to alarms list\" % alarmKey)\r\n\r\n            clearedAlarms \u003d []\r\n\r\n            # grab all alarms that have cleared on the resource, will compare them to active alarms\r\n            # on the resource\r\n            for clearAlarmKey, clearAlarmValue in currentAlarmsStatus.items():\r\n                if clearAlarmValue \u003d\u003d \"Cleared\":\r\n                    clearedAlarms.append(clearAlarmKey)\r\n\r\n\r\n            # all valid alarms should be in the alarmsFromApi list now, start cross referencing with what is actually on\r\n            # the probeResource\r\n            # probeAlarmDps \u003d DBHelper.getInstance().runGenericCurrentQuery(\"ownerUUID:\" + probeResource.getUuidAsString())\r\n            probeAlarmDps \u003d probeResource.getDatapoints()\r\n            alarmLevels \u003d [\"1\",\"2\",\"3\"]\r\n            clearCount \u003d 0\r\n            # logger.debug(\"Alarms from API Query: %s\" % str(alarmsFromApi))\r\n            logger.debug(\"Clear Alarms from API Query: %s\" % str(clearedAlarms))\r\n            logger.debug(\"Alarms from API len: %s\" % str(len(alarmsFromApi)))\r\n            for dpKey in probeAlarmDps.keySet():\r\n                sevLevel \u003d probeResource.getAttributeValueAsString(dpKey, \"sevLevel\", None)\r\n                if sevLevel is not None and sevLevel !\u003d \"0\" and sevLevel in alarmLevels:\r\n                    dp \u003d probeAlarmDps.get(dpKey)\r\n                    logger.debug(\"Checking if %s is in alarmsFromApi\" % dp.getKey())\r\n                    # if dp.getKey() in alarmsFromApi:\r\n                    #     continue\r\n                    # else:\r\n                    #     logger.debug(\"Found active alarm not in alarms list, clearing alarm: %s\" % dp.getKey())\r\n                    #     probeResource.setDatapoint(dp.getKey(), \"OK\", {Fault.ATTRIB_NAME:Fault.CLEAR})\r\n                    #     clearCount +\u003d 1\r\n\r\n                    if dp.getKey() in clearedAlarms:\r\n                        logger.debug(\"Found active alarm not in alarms list, clearing alarm: %s\" % dp.getKey())\r\n                        probeResource.setDatapoint(dp.getKey(), \"OK\", {Fault.ATTRIB_NAME:Fault.CLEAR})\r\n                        clearCount +\u003d 1\r\n            logger.info(\"Cleared %d alarms on %s\" % (clearCount, key))\r\n\r\n        self.handleGoodPoll(resource, poll)\r\n\r\n    def executeApiInstruction(self, instruction, resource):\r\n        # does the same thing as the poll above, but is available for use as an instruction\r\n\r\n        logger \u003d resource.getLogger()\r\n        logger.debug(\"Executing Sencore API Poll\")\r\n        currentAlarmsStatus \u003d {}\r\n\r\n        # loop through each device in the dict and check each one on its own before moving on\r\n        for key in self.probeToIpDict:\r\n            logger.trace(\"Handling Alarm Status for probe %s\" % key)\r\n\r\n            # DEBUG CODE REMOVE WHEN DONE TESTING\r\n            # if key !\u003d \"Post Transcoder Probe\":\r\n            #     continue\r\n\r\n            resUUID \u003d self.utils.getResourceUUIDByName(resource, key)\r\n\r\n            if resUUID is None:\r\n                logger.warn(\"Cannot process probe, no probe found with name: %s\" % key)\r\n                continue\r\n\r\n            alarmsFromApi \u003d []\r\n            probeResource \u003d resource.getResourceManager().getResource(resUUID)\r\n\r\n            for ip in self.probeToIpDict[key]:\r\n\r\n                # generate query url for API\r\n                logger.trace(\"Generating url for ip %s\" % ip)\r\n                #TODO: test using severity of Fatal and Critical in query instead of parsing later\r\n                url \u003d self.buildApiUrl(ip, \"probe\", \"/alarms\")\r\n                # runs the api query and throws appropriate errors if query is unsuccessful\r\n                logger.trace(\"Sending url: %s\" % url)\r\n                alarmUrlConn \u003d None\r\n                try:\r\n                    alarmUrlConn \u003d urlopen(url)\r\n                    response \u003d alarmUrlConn.read()\r\n                    alarmUrlConn.close()\r\n                except Exception as e:\r\n                    logger.warn(\"Exception reading response from url: %s. Make sure IP Address and severity are correct. Error: %s\" % (url, str(e)))\r\n                    try:\r\n                        alarmUrlConn.close()\r\n                    except Exception as e:\r\n                        logger.warn(\"Failed to close socket connection connection\")\r\n\r\n                        resource.sendInstructionResponse(\r\n                            InstructionResponse(resource, instruction, InstructionResponse.DEFAULT_BAD_RC,\r\n                                                \"Failed to Connect to API\"))\r\n                    return\r\n\r\n                # parse the response and filter for Severity and then grab TRAP info\r\n                # response is XML, format is:\r\n\r\n                # \u003c?xml version\u003d\"1.0\"\u003e\r\n                # \u003cAlarmList boardtype, hwId, updated, IPAddress, uptime, probetime, crc, release\u003e\r\n                #     \u003cAlarm status, time, duration, severity, aty, aid, stream, description, trap_text, seq, ref, id,\u003e\u003c/Alarm\u003e\r\n                #     \u003cAlarm\u003e\u003c/Alarm\u003e\r\n                # \u003c/AlarmList\u003e\r\n                #\r\n                # The only relevant values we process from this is the severity and description\r\n                # severity \u003d {Fault, Major, Warning, Error}\r\n                # description \u003d Alarm Description\r\n                #\r\n                # description matches the trap text we get\r\n\r\n                # logger.debug(\"Parsing XML from response: %s\" % str(response))\r\n                tree \u003d ET.fromstring(response)\r\n                for child in tree.findall(\"Alarm\"):\r\n                    attributes \u003d child.attrib\r\n                    description \u003d None\r\n\r\n                    # only looking for major and critical alarms\r\n                    if attributes[\"severity\"] !\u003d \"Major\" and attributes[\"severity\"] !\u003d \"Fatal\":\r\n                        continue\r\n\r\n                    # if this is not an \"Active\" or \"Cleared\" entry, ignore\r\n                    status \u003d attributes[\"status\"]\r\n                    if status !\u003d \"Active\" and status !\u003d \"Cleared\":\r\n                        continue\r\n\r\n                    # the cleared alarms have a timestamp appended to the description, so it is not good to use\r\n                    # for checking status. So we need to take the last element in the Trap Text (desc but with\r\n                    # no timestamp)\r\n                    if status \u003d\u003d \"Cleared\":\r\n                        trapText \u003d attributes[\"trap_text\"]\r\n                        textSplit \u003d trapText.split(\"|\")\r\n                        description \u003d textSplit[-1]\r\n                    else:\r\n                        description \u003d attributes[\"description\"]\r\n\r\n                    # format of alarm names is stream - description\r\n                    alarmKey \u003d \"%s - %s\" % (attributes[\"stream\"], description)\r\n\r\n                    # track the current status (active or clear) in the dict\r\n                    currentAlarmsStatus[alarmKey] \u003d status\r\n\r\n                    alarmsFromApi.append(alarmKey)\r\n                    logger.debug(\"adding %s to alarms list\" % alarmKey)\r\n\r\n            clearedAlarms \u003d []\r\n\r\n\r\n            # grab all alarms that have cleared on the resource, will compare them to active alarms\r\n            # on the resource\r\n            for clearAlarmKey, clearAlarmValue in currentAlarmsStatus.items():\r\n                if clearAlarmValue \u003d\u003d \"Cleared\":\r\n                    clearedAlarms.append(clearAlarmKey)\r\n\r\n\r\n            # all valid alarms should be in the alarmsFromApi list now, start cross referencing with what is actually on\r\n            # the probeResource\r\n            # probeAlarmDps \u003d DBHelper.getInstance().runGenericCurrentQuery(\"ownerUUID:\" + probeResource.getUuidAsString())\r\n            probeAlarmDps \u003d probeResource.getDatapoints()\r\n            alarmLevels \u003d [\"1\",\"2\",\"3\"]\r\n            clearCount \u003d 0\r\n            # logger.debug(\"Alarms from API Query: %s\" % str(alarmsFromApi))\r\n            logger.debug(\"Clear Alarms from API Query: %s\" % str(clearedAlarms))\r\n            logger.debug(\"Alarms from API len: %s\" % str(len(alarmsFromApi)))\r\n            for dpKey in probeAlarmDps.keySet():\r\n                sevLevel \u003d probeResource.getAttributeValueAsString(dpKey, \"sevLevel\", None)\r\n                if sevLevel is not None and sevLevel !\u003d \"0\" and sevLevel in alarmLevels:\r\n                    dp \u003d probeAlarmDps.get(dpKey)\r\n                    logger.debug(\"Checking if %s is in alarmsFromApi\" % dp.getKey())\r\n                    # if dp.getKey() in alarmsFromApi:\r\n                    #     continue\r\n                    # else:\r\n                    #     logger.debug(\"Found active alarm not in alarms list, clearing alarm: %s\" % dp.getKey())\r\n                    #     probeResource.setDatapoint(dp.getKey(), \"OK\", {Fault.ATTRIB_NAME:Fault.CLEAR})\r\n                    #     clearCount +\u003d 1\r\n\r\n                    if dp.getKey() in clearedAlarms:\r\n                        logger.debug(\"Found active alarm not in alarms list, clearing alarm: %s\" % dp.getKey())\r\n                        probeResource.setDatapoint(dp.getKey(), \"OK\", {Fault.ATTRIB_NAME:Fault.CLEAR})\r\n                        clearCount +\u003d 1\r\n            logger.info(\"Cleared %d alarms on %s\" % (clearCount, key))\r\n\r\n        resource.sendInstructionResponse(\r\n            InstructionResponse(resource, instruction, InstructionResponse.DEFAULT_GOOD_RC,\r\n                                InstructionResponse.DEFAULT_GOOD_RESPONSE))\r\n\r\n    def handleTrap(self, resource, trapPDU, userdata\u003dNone):\r\n\r\n        subName \u003d \"\"\r\n        subKey \u003d \"\"\r\n        subIP \u003d \"\"\r\n        peerName \u003d \"\"\r\n        peerIP \u003d \"\"\r\n        sevLevel \u003d \"\"\r\n        resUuid \u003d None\r\n        alarmKey \u003d \"\"\r\n        serviceId \u003d None\r\n        setOrClear \u003d \"\"\r\n\r\n        for vb in trapPDU.getVariableBindings():\r\n            oid \u003d str(vb.getOid().toString())\r\n            value \u003d str(vb.getVariable().toString())\r\n\r\n            resource.getLogger().debug(\"OID: \" + str(oid) + \" Value: \" + str(value))\r\n\r\n            if oid \u003d\u003d self.oidToColDict[\"sourceText\"][0]:\r\n                subKey \u003d resource.getName() + \"_\" + value    # Setting sub dev key to source text for now -\r\n                                                             # probably not going to be the real way to set this\r\n            if oid \u003d\u003d self.oidToColDict[\"alarmText\"][0]:\r\n                # Alarm text in form:  site\u003dPost TX - 7880|board\u003dVB7880-1|iface\u003dE-IPTV|sname\u003dCHKLA|Audio silence where\r\n                # Post TX - 7880 \u003d name of source device\r\n                # Audio silence \u003d alarm type\r\n                # sname\u003dCHKLA \u003d channel/service name\r\n                if value.startswith(\"site\u003d\"): value \u003d value.replace(\"site\u003d\", \"\")\r\n                valueArr \u003d value.split(\"|\")\r\n\r\n                if len(valueArr) !\u003d 5:\r\n                    resource.getLogger().warn(\"Unrecognizable alarm text: \" + str(value) + \" - not passing to subdevice\")\r\n                    return\r\n\r\n                resName \u003d valueArr[0]\r\n                if \"Primary\" in valueArr[1] or \"Second\" in valueArr[1]:\r\n                    resName \u003d valueArr[1]\r\n                    resName \u003d resName.replace(\"board\u003d\", \"\")\r\n                serviceId \u003d valueArr[3].replace(\"sname\u003d\",\"\")\r\n                alarmKey \u003d \"%s - %s\" % (serviceId, valueArr[4])\r\n\r\n                resUuid \u003d DeviceManagementSystem.getSubDeviceUuidByName(self, resource, resName)\r\n\r\n                if resUuid is None:\r\n                    resource.getLogger().trace(\"Unrecognized child device with name: \" + str(resName) + \". Potentially adding to probe collector instead\")\r\n\r\n            if oid \u003d\u003d self.oidToColDict[\"alarmType\"][0]:\r\n                if value \u003d\u003d \"2\":\r\n                    setOrClear \u003d \"SET\"\r\n                elif value \u003d\u003d \"3\":\r\n                    setOrClear \u003d \"CLEAR\"\r\n                    sevLevel \u003d \"0\"\r\n                resource.getLogger().debug(\"Alarm is a \" + str(setOrClear) + \" alarm\")\r\n\r\n            if oid \u003d\u003d self.oidToColDict[\"severityLevel\"][0]:\r\n                #sevLevel \u003d \"0\" if value \u003d\u003d \"3\" else \"2\"\r\n                #green(1), yellow(2), orange(3), red(4) and black(5)\r\n                sevLevel \u003d \"0\"\r\n                if value \u003d\u003d \"5\" or value \u003d\u003d \"4\":\r\n                    sevLevel \u003d \"3\"\r\n                elif value \u003d\u003d \"3\":\r\n                    sevLevel \u003d \"2\"\r\n                elif value \u003d\u003d \"2\":\r\n                    sevLevel \u003d \"1\"\r\n                if setOrClear \u003d\u003d \"CLEAR\":\r\n                    sevLevel \u003d \"0\"\r\n                resource.getLogger().debug(\"SevLevel: \" + str(sevLevel))\r\n\r\n\r\n        # We need to figure out how we are defining the subdev key - needs to tie back to something in the trap\r\n        alarmText \u003d \"CLEAR\" if sevLevel \u003d\u003d \"0\" else \"ALARM\"\r\n        if resUuid is not None:\r\n            resource.getLogger().debug(\"Just got alarm trap for a sub-resource: \" + str(alarmKey) + \", \" + str(alarmText) + \" with severity: \" + str(sevLevel))\r\n            i \u003d Instruction(\"sendChildAlarm\")\r\n            i.addRecipientUuid(str(resUuid))\r\n            i.setResponseRequired(False)\r\n            i.addParm(\"alarmKey\", alarmKey)\r\n            i.addParm(\"sevLevel\", sevLevel)\r\n            i.addParm(\"alarmText\", alarmText)\r\n            resource.sendInstruction(i)\r\n\r\n        else:\r\n            probeCollectorActive \u003d resource.setDatapointValueIfBlank(\"probeCollectorActive\", \"True\")\r\n\r\n            if probeCollectorActive \u003d\u003d \"True\":\r\n                # Sencore alarms ONLY service affecting for FONSE services\r\n\r\n                # remove parentheses to solve issue with FOXHW(mlqc) alarms not populating correctly\r\n                regex \u003d re.compile(\"\\(\"     # match ( literally\r\n                                   \"[^)]*\"  # find any character that isn\u0027t )\r\n                                   \"\\)\")    # match ) literally\r\n                serviceId \u003d re.sub(regex, \"\", serviceId)\r\n\r\n                resource.getLogger().debug(\"Probe Collecter Rules Vals -- Alarm Key: %s SevLevel: %s\"\r\n                                           \"Alarm Text: %s ResName: %s ServiceId: %s\" % (str(alarmKey), str(sevLevel), str(alarmText), str(resName), str(serviceId)))\r\n                ProbeUtils.activateProbeCollectorRule(self, resource, alarmKey, sevLevel, alarmText, resName, serviceId, serviceAffectingPlatforms\u003d[\"fonse\"])\r\n\r\n    def runInstruction( self, instruction, resource\u003dNone ):\r\n        bHandled \u003d False\r\n        if resource:\r\n            key \u003d instruction.getKey()\r\n            if key \u003d\u003d \"clearTable\":\r\n                bHandled \u003d True\r\n                resource.setDatapointMap(\"c04\", DatapointMap())\r\n                resource.setDatapointMap(\"c06\", DatapointMap())\r\n                resource.setDatapointMap(\"c10\", DatapointMap())\r\n                resource.setDatapointMap(\"c11\", DatapointMap())\r\n                resource.setDatapointMap(\"c12\", DatapointMap())\r\n                resource.setDatapointMap(\"c13\", DatapointMap())\r\n                resource.setDatapointMap(\"c24\", DatapointMap())\r\n                resource.setDatapointMap(\"c25\", DatapointMap())\r\n                resource.setDatapointMap(\"c26\", DatapointMap())\r\n                resource.setDatapointMap(\"alarmCol\", DatapointMap())\r\n                resource.sendInstructionResponse(InstructionResponse(resource, instruction, InstructionResponse.DEFAULT_GOOD_RC, \"OK\"))\r\n            elif key \u003d\u003d \"changeThroughputTab\":\r\n                bHandled \u003d True\r\n                column \u003d resource.getDatapointMap(\"trafficCol\")\r\n                for entry in column.entrySet():\r\n                    k \u003d entry.getKey()\r\n                    v \u003d entry.getValue()\r\n                    value \u003d float(v.getValueAsString())\r\n                    adjusted \u003d value / 1000000.0\r\n                    column.put(k, Datapoint(str(adjusted)))\r\n                resource.setDatapointMap(\"trafficCol\", column)\r\n                resource.sendInstructionResponse(InstructionResponse(resource, instruction, InstructionResponse.DEFAULT_GOOD_RC, \"OK\"))\r\n            elif key \u003d\u003d \"testIncomingTrap\":\r\n                bHandled \u003d True\r\n                resource.getLogger().info(\"Testing incoming trap logic\")\r\n                i \u003d Instruction(\"handleIncomingAlarm\")\r\n                i.addRecipientUuid(\"0d85688f-d126-47b0-bcd9-c644ba009e56\")\r\n                i.setResponseRequired(False)\r\n                resource.sendInstruction(i)\r\n                resource.sendInstructionResponse(InstructionResponse(resource, instruction, InstructionResponse.DEFAULT_GOOD_RC, \"OK\"))\r\n\r\n\r\n        if not bHandled:\r\n            bHandled \u003d DeviceManagementSystem.runInstruction(self, instruction, resource)\r\n        else:\r\n            resource.sendInstructionResponse(InstructionResponse(resource, instruction, InstructionResponse.DEFAULT_GOOD_RC, \"OK\"))\r\n            return\r\n\r\n        if not bHandled:\r\n            bHandled \u003d ProbeUtils.runInstruction(self, instruction, resource)\r\n        else:\r\n            resource.sendInstructionResponse(InstructionResponse(resource, instruction, InstructionResponse.DEFAULT_GOOD_RC, \"OK\"))\r\n            return\r\n\r\n        if not bHandled:\r\n            BaseSnmpTranslator.runInstruction(self, instruction, resource)\r\n        else:\r\n            resource.sendInstructionResponse(InstructionResponse(resource, instruction, InstructionResponse.DEFAULT_GOOD_RC, \"OK\"))\r\n            return"}}
{"BookingType":{"key":"","uuid":"48db4156-ae3e-4254-b5eb-160d5f229dfe","desc":"Auto Generated Bookable Unit","name":"Bell Booking"}}
{"ResourceStatus":{"sharing":{"roles":[],"everybody":true,"users":[],"similarResources":true},"translatorUuid":"1901ecf7-cfe8-39ae-9a6c-f9b6990a1368","uuid":"0001be0b-766b-4633-8f4b-1e666664c306","elements":["2e9931e7-32ef-357c-ba04-7242fc307e8b","425eb0da-c36f-3c5d-b0da-07e89f6de3e9","498894ed-9701-3c2a-8d6b-b9d7e68718f1","5ccd92cf-f79e-3f4a-b89e-2d0086a23679"],"resourceUuid":"e7fd5ecd-bdf7-427a-9967-fd2ba16be822","ownerUUID":"21232f29-7a57-35a7-8389-4a0e4a801fc3","name":"Standard Favs"}}
{"Topology":{"uuid":"64510677-2187-44a8-b21f-27dfc9aea481","desc":"Template 69 - DTH","properties":{"templateForGroups":"CBSHW - DTH,ABCHW - DTH,CNVTV - DTH,NATYF - DTH"},"isTemplate":true,"key":"Template 69 - DTH","isPrimary":false,"name":"Template 69 - DTH","linkType":"com.ibm.ilog.elixir.diagram.graphlayout.hierarchical.HierarchicalLayout"}}
{"Role":{"uuid":"b2477f80-9b20-4958-8d7f-723c3303dcd3","name":"MFR_Ops","permissionGroups":["3138c518-4a71-4722-962a-607c7e1a8766","147e1817-4d05-4580-8aa5-18f54f86c261"],"description":""}}
{"GraphNode":{"rscTopoId":"","ypos":1100,"height":190,"iconType":"blank_grey_node.svg","ownerUUID":"d00abdf8-8b67-495d-9d8d-05135de1b283","xpos":4515,"m_properties":{"templateRefId":"14B"},"uuid":"007ed708-ca2c-4fb9-ae12-be8c512de7e7","width":230}}
{"ResourceManager":{"dynamicFields":{},"name":"CAM","uuid":"6535dd49-d59e-32e4-a01c-86c9aa9ec29f","isCam":true,"m_properties":{},"version":"3.1.1.BELL-11-SNAPSHOT.4b896a8","managerUUID":"6535dd49-d59e-32e4-a01c-86c9aa9ec29f"}}
{"Note":{"creator":"admin","uuid":"7aadc985-c0ae-4dc1-9f4e-f673730ab2c1","urgent":true,"text":"Test entry in Admin dashboard.","modTime":1523462725768,"noteType":"System"}}
{"ManagerQuery":{"types":["Translators","Resources","BookingTemplates","Dashboards","Users","Racks","Transports","Topologies","ResourceGroups","Rules","BookingTypes","Bookings","PermissionGroups","Roles","ServiceGroups","Services","BookableUnits","GroupBookings","CAMs"],"uuid":"ff1e28e5-c8ca-4e07-8470-3d07f0ae4a89","query":"*","created":1554917390671,"ownerUUID":"21232f29-7a57-35a7-8389-4a0e4a801fc3"}}
{"SharedTranslatorModule":{"name":"shared/vendor/DMSUtils/ProbeUtils.py","modTime":1554465816133,"filecontents":"\u003d","uuid":"5db5b628-c204-37b8-8b41-6b6f5f315205"}}
{"CamScript":{"filecontents":"from java.util import Date\r\nfrom shared.base.BaseMonitoredRule import *  # @UnusedWildImport\r\nfrom com.codemettle.sherpa.datamodel.services import JManagedService\r\nfrom com.codemettle.sherpa.cam.impl import CamDroolsImpl\r\nfrom com.codemettle.sherpa.datamodel.impl import DatapointProxy, RMConstants, Datapoint, DatapointTableBuilder, \\\r\n    DatapointMap, NumberParm, StringParm, ListParm, SMConstants\r\nfrom shared.pollutils.SimplePollBuilder import SimplePollBuilder\r\nimport time\r\nfrom com.codemettle.sherpa.database import DBHelper\r\n\r\n################################################\r\n# MANDATORY TRANSLATOR-LEVEL CONSTANTS\r\n\r\n\r\nNAME \u003d \"Last X Log rule\"\r\n################################################\r\n\r\n################################################\r\n# OPTIONAL TRANSLATOR-LEVEL CONSTANTS\r\nDESC \u003d \"Listens for alarms greater than 0, and then store in database\"\r\nAUTHOR \u003d \"Suman Mallick\"\r\nHELPTEXT \u003d \"n/a\"\r\n\r\n\r\n################################################\r\n\r\n\r\n################################################\r\n# Translator Class\r\n################################################\r\n\r\n# noinspection PyUnresolvedReferences,SpellCheckingInspection\r\nclass GenericAlarmEmailRule(BaseMonitoredRule):\r\n    \"\"\"\r\n    classdocs\r\n    \"\"\"\r\n\r\n    PLATFORMS \u003d [\"FoNSE\", \"Live\", \"VOD\", \"IPTV\", \"DTH\", \"PPV\"]\r\n\r\n    RECENT_ALM_GRP \u003d \"Recent Alarms - Last 3 Hours\"\r\n\r\n    SEV_HTML_MAP \u003d {\"CRITICAL\": \u0027\u003cdiv class\u003d\"sherpa-badge\" style\u003d\"background-color: rgb(211,47,47);\"\u003eCritical\u003c/div\u003e\u0027,\r\n                    \"MAJOR\": \u0027\u003cdiv class\u003d\"sherpa-badge\" style\u003d\"background-color: rgb(255,193,7);\"\u003eMajor\u003c/div\u003e\u0027,\r\n                    \"MINOR\": \u0027\u003cdiv class\u003d\"sherpa-badge\" style\u003d\"background-color: rgb(255,235,59);\"\u003eMinor\u003c/div\u003e\u0027,\r\n                    \"CLEAR\": \u0027\u003cdiv class\u003d\"sherpa-badge\" style\u003d\"background-color: rgb(102,187,106);\"\u003eClear\u003c/div\u003e\u0027,\r\n                    \"MAINT\": \u0027\u003cdiv class\u003d\"sherpa-badge\" style\u003d\"background-color: rgb(117,117,117);\"\u003eMaintenance\u003c/div\u003e\u0027,\r\n                    \"COMM\": \u0027\u003cdiv class\u003d\"sherpa-badge\" style\u003d\"background-color: rgb(240,98,146);\"\u003eCommunications\u003c/div\u003e\u0027,\r\n                    \"TRANSPORT\": \u0027\u003cdiv class \u003d\"sherpa-badge\" style\u003d\"background-color: rgb(238,109,0);\"\u003eTransport\u003c/div\u003e\u0027}\r\n\r\n    ################################################\r\n    # __init__ is the constructor for this class\r\n    ################################################\r\n\r\n    def __init__(self):\r\n\r\n        \"\"\"\r\n        Constructor\r\n        \"\"\"\r\n\r\n        # Start off by calling the constructor of our base class\r\n        BaseMonitoredRule.__init__(self, UUID)  # @UndefinedVariable\r\n\r\n        for platform in self.PLATFORMS:\r\n            alarmLogTable \u003d DatapointTableBuilder(\"alarmLogTable_\" + str(platform),\r\n                                                  \"Last 20 Alarms - \" + str(platform)).create()\r\n            deviceMap \u003d DatapointBuilder(\"ownerDeviceMap_\" + str(platform), \"Owner Device\").withPolicy(\r\n                RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n            self.addDatapointDef(deviceMap)\r\n            alarmLogTable.addColumnDef(deviceMap)\r\n\r\n            alarmChannelMap \u003d DatapointBuilder(\"alarmChannel_\" + str(platform), \"Channels\").withPolicy(\r\n                RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n            self.addDatapointDef(alarmChannelMap)\r\n            alarmLogTable.addColumnDef(alarmChannelMap)\r\n\r\n            alarmKeyMap \u003d DatapointBuilder(\"alarmKeyMap_\" + str(platform), \"Alarm Key\").withPolicy(\r\n                RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n            self.addDatapointDef(alarmKeyMap)\r\n            alarmLogTable.addColumnDef(alarmKeyMap)\r\n\r\n            alarmSevLevelMap \u003d DatapointBuilder(\"alarmSevLevelMap_\" + str(platform), \"Alarm Severity Level\").withPolicy(\r\n                RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n            self.addDatapointDef(alarmSevLevelMap)\r\n            alarmLogTable.addColumnDef(alarmSevLevelMap)\r\n\r\n            alarmModtimeMap \u003d DatapointBuilder(\"alarmModtimeMap_\" + str(platform), \"Alarm Time\").withPolicy(\r\n                RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n            self.addDatapointDef(alarmModtimeMap)\r\n            alarmLogTable.addColumnDef(alarmModtimeMap)\r\n\r\n            alarmEndModtimeMap \u003d DatapointBuilder(\"alarmEndModtimeMap_\" + str(platform), \"Alarm End Time\").withPolicy(\r\n                RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n            self.addDatapointDef(alarmEndModtimeMap)\r\n            alarmLogTable.addColumnDef(alarmEndModtimeMap)\r\n\r\n            alarmDurationMap \u003d DatapointBuilder(\"alarmDuration_\" + str(platform), \"Duration\").withPolicy(\r\n                RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n            self.addDatapointDef(alarmDurationMap)\r\n            alarmLogTable.addColumnDef(alarmDurationMap)\r\n\r\n            alarmLogTable.setMaxRowCount(20)\r\n            self.addDatapointTableDef(alarmLogTable)\r\n\r\n        for platform in self.PLATFORMS:\r\n            alarmLogTable \u003d DatapointTableBuilder(\"histEventTable_\" + str(platform),\r\n                                                  \"Historical Events  - \" + str(platform)).create()\r\n            deviceMap \u003d DatapointBuilder(\"histOwnerDeviceMap_\" + str(platform), \"Device\").withPolicy(\r\n                RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n            self.addDatapointDef(deviceMap)\r\n            alarmLogTable.addColumnDef(deviceMap)\r\n\r\n            alarmChannelMap \u003d DatapointBuilder(\"histChannel_\" + str(platform), \"Channels\").withPolicy(\r\n                RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n            self.addDatapointDef(alarmChannelMap)\r\n            alarmLogTable.addColumnDef(alarmChannelMap)\r\n\r\n            alarmKeyMap \u003d DatapointBuilder(\"histAlarmKeyMap_\" + str(platform), \"Alarm\").withPolicy(\r\n                RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n            self.addDatapointDef(alarmKeyMap)\r\n            alarmLogTable.addColumnDef(alarmKeyMap)\r\n\r\n            alarmSevLevelMap \u003d DatapointBuilder(\"histAlarmSevLevelMap_\" + str(platform),\r\n                                                \"Alarm Severity Level\").withPolicy(\r\n                RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n            self.addDatapointDef(alarmSevLevelMap)\r\n            alarmLogTable.addColumnDef(alarmSevLevelMap)\r\n\r\n            alarmModtimeMap \u003d DatapointBuilder(\"histAlarmModtimeMap_\" + str(platform), \"Alarm Time Start\").withPolicy(\r\n                RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n            self.addDatapointDef(alarmModtimeMap)\r\n            alarmLogTable.addColumnDef(alarmModtimeMap)\r\n\r\n            alarmEndModtimeMap \u003d DatapointBuilder(\"histAlarmEndModtimeMap_\" + str(platform),\r\n                                                  \"Alarm Time End\").withPolicy(\r\n                RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n            self.addDatapointDef(alarmEndModtimeMap)\r\n            alarmLogTable.addColumnDef(alarmEndModtimeMap)\r\n\r\n            alarmDurationMap \u003d DatapointBuilder(\"histAlarmDuration_\" + str(platform), \"Duration (in mins)\").withPolicy(\r\n                RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n            self.addDatapointDef(alarmDurationMap)\r\n            alarmLogTable.addColumnDef(alarmDurationMap)\r\n\r\n            alarmOwnerMap \u003d DatapointBuilder(\"histOwner_\" + str(platform), \"Device Type\").withPolicy(\r\n                RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n            self.addDatapointDef(alarmOwnerMap)\r\n            alarmLogTable.addColumnDef(alarmOwnerMap)\r\n\r\n            alarmChannelMap \u003d DatapointBuilder(\"histChannel_\" + str(platform), \"Channels\").withPolicy(\r\n                RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n            self.addDatapointDef(alarmChannelMap)\r\n            alarmLogTable.addColumnDef(alarmChannelMap)\r\n\r\n            self.addDatapointTableDef(alarmLogTable)\r\n\r\n        serviceAlarmTable \u003d DatapointTableBuilder(\"serviceAlarmTable\", \"Recent Alarms - Last 3 Hours\").create()\r\n        serviceNameMap \u003d DatapointBuilder(\"serviceName\", \"Service Name\").withPolicy(\r\n            RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n        self.addDatapointDef(serviceNameMap)\r\n        serviceAlarmTable.addColumnDef(serviceNameMap)\r\n\r\n        alarmTimeMap \u003d DatapointBuilder(\"alarmTime\", \"Last Alarm Time\").withPolicy(\r\n            RMConstants.ALWAYS_SEND_POLICY_NAME).isMap().create()\r\n        self.addDatapointDef(alarmTimeMap)\r\n        serviceAlarmTable.addColumnDef(alarmTimeMap)\r\n\r\n        self.addDatapointTableDef(serviceAlarmTable)\r\n\r\n        serviceHistoryDef \u003d DatapointBuilder(\"serviceHistoryMinutes\", \"Service History Minutes\") \\\r\n            .isSettable(InstructionBuilder().stringParm().create()).create()\r\n\r\n        self.addDatapointDef(serviceHistoryDef)\r\n\r\n        serviceHistoryDef \u003d DatapointBuilder(\"alarmHistoryMinutes\", \"Alarm History Minutes\") \\\r\n            .isSettable(InstructionBuilder().stringParm().create()).create()\r\n\r\n        self.addDatapointDef(serviceHistoryDef)\r\n\r\n        self.addInstructionDef(InstructionBuilder(\"clearTable\", \"Clear Table\")\r\n                               .listParm(\"tableEntries\", \"Table to Clear\")\r\n                               .entries(self.PLATFORMS)\r\n                               .create())\r\n\r\n        self.addInstructionDef(InstructionBuilder(\"clearAllTables\", \"Clear All Tables\")\r\n                               .create())\r\n\r\n        self.addInstructionDef(InstructionBuilder(\"removeAllFromRecentlyAlarmed\", \"Clear Last 30 Services\")\r\n                               .create())\r\n\r\n        self.addInstructionDef(InstructionBuilder(\"fixBrokenRows\", \"Fix Broken Rows\")\r\n                 .listParm(\"platformType\", \"Platform List\")\r\n                    .entries([\"FoNSE\", \"Live\", \"VOD\", \"IPTV\", \"DTH\", \"PPV\"])\r\n                    .allowMultiSelect(False)\r\n                 .create())\r\n\r\n        self.addDatapointDef(DatapointBuilder(\"maxHist\", \"Max. Historical Events Per Platform\")\r\n                             .isSettable(\r\n            InstructionBuilder().numberParm().min(1).max(9999).stepSize(1).defaultValue(30).create())\r\n                             .isConfig()\r\n                             .create())\r\n\r\n        self.logger.info(\"Rule \" + NAME + \":\" + VERSION + \" initialization complete.\")\r\n\r\n    ################################################\r\n    # start\r\n    ################################################\r\n\r\n    def start(self, instruction, resource\u003dNone):\r\n\r\n        if resource is not None:\r\n\r\n            SECOND \u003d 1000\r\n            MINUTE \u003d 60 * SECOND\r\n            HOUR \u003d 60 * MINUTE\r\n\r\n            self.logger.info(\r\n                \"Starting dRool \" + resource.getName() + \"... with \" + instruction.getKey() + \" and parms: \" + str(\r\n                    instruction.getParms()))\r\n            # disabling this rule to check performance implications\r\n\r\n            watchAllAlarms(\"alarmRule\", resource) \\\r\n                .withListener(self.myAlarmHandler)\r\n\r\n            _ \u003d resource.getDatapointValueAsString(\"maxHist\", \"\")\r\n            if _ is None or _.strip() \u003d\u003d \"\":\r\n                resource.getLogger().info(\"setting maxHist to default\")\r\n                resource.setDatapoint(\"maxHist\", \"30\")\r\n\r\n            resource.setDatapoint(\"serviceHistoryMinutes\", \"180\")\r\n\r\n            # Poll to send commands for an activating goal\r\n            serviceAlarmPurgePoll \u003d (SimplePollBuilder(\"serviceAlarmPurgePoll\")\r\n                                     .repeatEvery(900000)  # fast poll rate, but this poll is not run all the time.\r\n                                     .funcOrMethodToCall(self.purgeServiceAlarmPoll)\r\n                                     .create()\r\n                                     )\r\n            resource.addPoll(serviceAlarmPurgePoll.getPollName(), serviceAlarmPurgePoll.getPoll())\r\n\r\n\r\n            # Poll to write received alarms to the tables\r\n            poll \u003d (SimplePollBuilder(\"writeTable\")\r\n                    .funcOrMethodToCall(self.writeTable)\r\n                    .repeatEvery((30 * SECOND))\r\n                    .addUserData(\"resource\", resource)\r\n                    .create())\r\n            resource.addPoll(poll.getPollName(), poll.getPoll())\r\n\r\n            # Poll to update the table with alarms that cleared and were not processed properly\r\n            # Added 8/17/18 by Adam Hayes\r\n            updateTime \u003d HOUR\r\n            poll \u003d (SimplePollBuilder(\"updateActiveAlarms\")\r\n                    .funcOrMethodToCall(self.updateActive)\r\n                    .repeatEvery(10 * MINUTE)\r\n                    .addUserData(\"resource\", resource)\r\n                    .create())\r\n            resource.addPoll(poll.getPollName(), poll.getPoll())\r\n\r\n            poll \u003d (SimplePollBuilder(\"checkFixTableRows\")\r\n                    .funcOrMethodToCall(self.checkFixTableRows)\r\n                    .repeatEvery(HOUR)\r\n                    .addUserData(\"resource\", resource)\r\n                    .create())\r\n            resource.addPoll(poll.getPollName(), poll.getPoll())\r\n\r\n            for platformType in self.PLATFORMS:\r\n                if resource.getVar(\"ownerDeviceMap_\" + str(platformType)) is None:\r\n                    resource.putVar(\"ownerDeviceMap_\" + str(platformType), DatapointMap())\r\n\r\n                if resource.getVar(\"histOwnerDeviceMap_\" + str(platformType)) is None:\r\n                    resource.putVar(\"histOwnerDeviceMap_\" + str(platformType), DatapointMap())\r\n\r\n                if resource.getVar(\"histOwner_\" + str(platformType)) is None:\r\n                    resource.putVar(\"histOwner_\" + str(platformType), DatapointMap())\r\n\r\n                if resource.getVar(\"alarmKeyMap_\" + str(platformType)) is None:\r\n                    resource.putVar(\"alarmKeyMap_\" + str(platformType), DatapointMap())\r\n\r\n                if resource.getVar(\"alarmModtimeMap_\" + str(platformType)) is None:\r\n                    resource.putVar(\"alarmModtimeMap_\" + str(platformType), DatapointMap())\r\n\r\n                if resource.getVar(\"alarmEndModtimeMap_\" + str(platformType)) is None:\r\n                    resource.putVar(\"alarmEndModtimeMap_\" + str(platformType), DatapointMap())\r\n\r\n                if resource.getVar(\"alarmDuration_\" + str(platformType)) is None:\r\n                    resource.putVar(\"alarmDuration_\" + str(platformType), DatapointMap())\r\n\r\n                if resource.getVar(\"alarmSevLevelMap_\" + str(platformType)) is None:\r\n                    resource.putVar(\"alarmSevLevelMap_\" + str(platformType), DatapointMap())\r\n\r\n                if resource.getVar(\"histAlarmKeyMap_\" + str(platformType)) is None:\r\n                    resource.putVar(\"histAlarmKeyMap_\" + str(platformType), DatapointMap())\r\n\r\n                if resource.getVar(\"histAlarmModtimeMap_\" + str(platformType)) is None:\r\n                    resource.putVar(\"histAlarmModtimeMap_\" + str(platformType), DatapointMap())\r\n\r\n                if resource.getVar(\"histAlarmEndModtimeMap_\" + str(platformType)) is None:\r\n                    resource.putVar(\"histAlarmEndModtimeMap_\" + str(platformType), DatapointMap())\r\n\r\n                if resource.getVar(\"histAlarmDuration_\" + str(platformType)) is None:\r\n                    resource.putVar(\"histAlarmDuration_\" + str(platformType), DatapointMap())\r\n\r\n                if resource.getVar(\"histAlarmSevLevelMap_\" + str(platformType)) is None:\r\n                    resource.putVar(\"histAlarmSevLevelMap_\" + str(platformType), DatapointMap())\r\n\r\n                if resource.getVar(\"alarmChannel_\" + str(platformType)) is None:\r\n                    resource.putVar(\"alarmChannel_\" + str(platformType), DatapointMap())\r\n\r\n                if resource.getVar(\"histAlarmChannel_\" + str(platformType)) is None:\r\n                    resource.putVar(\"histAlarmChannel_\" + str(platformType), DatapointMap())\r\n\r\n\r\n        return BaseMonitoredRule.start(self, instruction, resource)\r\n\r\n    def purgeServiceAlarmPoll(self, poll, resource, userdata\u003dNone):\r\n\r\n        resource.getLogger().trace(\"Purging older services...\")\r\n        alarmTimeMap \u003d resource.getDatapointMap(\"alarmTime\")\r\n\r\n        if alarmTimeMap is None:\r\n            return\r\n\r\n        allSvcs \u003d DBHelper.getInstance().runGenericConfigQuery(\"ManagedService\")\r\n        historyIntervalMinutes \u003d resource.getDatapointValueAsString(\"serviceHistoryMinutes\", \"180\")\r\n        historyIntervalMillis \u003d float(historyIntervalMinutes) * 60 * 1000\r\n        resource.getLogger().trace(\"History in millis: \" + str(historyIntervalMillis))\r\n        timeCutOff \u003d (time.time() * 1000) - historyIntervalMillis\r\n\r\n        for entry in alarmTimeMap:\r\n            resource.getLogger().trace(\"Processing service from alarm time map: \" + str(entry))\r\n            timeString \u003d alarmTimeMap[entry]\r\n            resource.getLogger().trace(\"Time string: \" + str(timeString))\r\n            if str(timeString) !\u003d \"YYYY-MM-DD HH:mm:ss\":\r\n                timeInMillis \u003d self.utils.utilStringToModtime(str(timeString), \u0027%Y-%m-%d %H:%M:%S\u0027)\r\n            else:\r\n                timeInMillis \u003d 0\r\n            resource.getLogger().debug(\"Time in millis: %s - Time Cut Off: %s\" % (str(timeInMillis), str(timeCutOff)))\r\n            if timeCutOff \u003e timeInMillis:\r\n                resource.getLogger().trace(\r\n                    \"Removing service from alarm map %s with timestamp: %s\" % (str(entry), str(timeString)))\r\n                resource.delDatapointTableRow(\"serviceAlarmTable\", entry)\r\n\r\n        for svc in allSvcs:\r\n            allProps \u003d svc.getExtraProperties()\r\n            if \"modTime\" in allProps:\r\n                timeInMillis \u003d float(allProps[\"modTime\"])\r\n                resource.getLogger().debug(\"Time in properties: %s and cutoff time: %s\" % (timeInMillis, timeCutOff))\r\n                if timeCutOff \u003e timeInMillis:\r\n                    # Removing from last 3 hours group\r\n                    self.removeServiceFromRecentlyAlarmed(resource, svc)\r\n\r\n    def purgeHistoricalAlarmPoll(self, poll, resource, userdata\u003dNone):\r\n\r\n        historyIntervalMinutes \u003d resource.setDatapointValueIfBlank(\"alarmHistoryMinutes\", \"10080\")\r\n        resource.getLogger().debug(\r\n            \"Purging historical tables of records older than %s minutes\" % historyIntervalMinutes)\r\n\r\n        historyIntervalMillis \u003d float(historyIntervalMinutes) * 60 * 1000\r\n        resource.getLogger().trace(\"History in millis: \" + str(historyIntervalMillis))\r\n        timeCutOff \u003d (time.time() * 1000) - historyIntervalMillis\r\n\r\n        try:\r\n            maxEntries \u003d int(resource.getDatapointValueAsString(\"maxHist\", \"300\"))\r\n        except:\r\n            maxEntries \u003d 300\r\n        resource.getLogger().debug(\"max entries: \" + str(maxEntries))\r\n        for platform in self.PLATFORMS:\r\n            resource.getLogger().trace(\"platform is: \" + platform)\r\n            histOwnerDeviceMap \u003d resource.getDatapointMap(\"histOwnerDeviceMap_\" + str(platform))\r\n            histAlarmKeyMap \u003d resource.getDatapointMap(\"histAlarmKeyMap_\" + str(platform))\r\n            histAlarmModtimeMap \u003d resource.getDatapointMap(\"histAlarmModtimeMap_\" + str(platform))\r\n            histAlarmEndModtimeMap \u003d resource.getDatapointMap(\"histAlarmEndModtimeMap_\" + str(platform))\r\n            histAlarmDuration \u003d resource.getDatapointMap(\"histAlarmDuration_\" + str(platform))\r\n            histAlarmSevLevelMap \u003d resource.getDatapointMap(\"histAlarmSevLevelMap_\" + str(platform))\r\n            histAlarmChannelMap \u003d resource.getDatapointMap(\"histChannel_\" + str(platform))\r\n            histOwner \u003d resource.getDatapointMap(\"histOwner_\" + str(platform))\r\n            histOwnerDeviceMapBuffer \u003d resource.getVar(\"histOwnerDeviceMap_\" + str(platform))\r\n            histAlarmKeyMapBuffer \u003d resource.getVar(\"histAlarmKeyMap_\" + str(platform))\r\n            histAlarmModtimeMapBuffer \u003d resource.getVar(\"histAlarmModtimeMap_\" + str(platform))\r\n            histAlarmEndModtimeMapBuffer \u003d resource.getVar(\"histAlarmEndModtimeMap_\" + str(platform))\r\n            histAlarmDurationBuffer \u003d resource.getVar(\"histAlarmDuration_\" + str(platform))\r\n            histAlarmSevLevelMapBuffer \u003d resource.getVar(\"histAlarmSevLevelMap_\" + str(platform))\r\n            histChannelMapBuffer \u003d resource.getVar(\"histAlarmChannel_\" + str(platform))\r\n            histOwnerBuffer \u003d resource.getVar(\"histOwner_\" + str(platform))\r\n            histOwnerDeviceMap.putAll(histOwnerDeviceMapBuffer)\r\n            histAlarmKeyMap.putAll(histAlarmKeyMapBuffer)\r\n            histAlarmModtimeMap.putAll(histAlarmModtimeMapBuffer)\r\n            histAlarmEndModtimeMap.putAll(histAlarmEndModtimeMapBuffer)\r\n            histAlarmDuration.putAll(histAlarmDurationBuffer)\r\n            histAlarmSevLevelMap.putAll(histAlarmSevLevelMapBuffer)\r\n            histAlarmChannelMap.putAll(histChannelMapBuffer)\r\n            histOwner.putAll(histOwnerBuffer)\r\n\r\n            writeToTables \u003d False\r\n            if histOwnerDeviceMap is None:\r\n                resource.getLogger().warn(\"didn\u0027t get deviceMap for platform: \" + platform)\r\n            else:\r\n                if len(histOwnerDeviceMap) \u003d\u003d 0:\r\n                    resource.getLogger().trace(\"platform %s device map is empty!\" % platform)\r\n                    resource.getLogger().trace(str(histOwnerDeviceMap))\r\n                else:\r\n                    entries \u003d len(histOwnerDeviceMap)\r\n                    if entries \u003e maxEntries:\r\n                        writeToTables \u003d True\r\n                        excess \u003d entries - maxEntries\r\n                        resource.getLogger().debug(\"trimming history table for platform: \" + platform+\" trimming \"+str(excess)+\" rows\")\r\n                        for i in range(1, excess + 1):\r\n                            oldestEntry \u003d self.findOldestHistEntry(resource, platform)\r\n                            resource.getLogger().trace(\"removing row %s of %s\" % (str(i), str(excess)))\r\n                            histOwnerDeviceMap.remove(oldestEntry)\r\n                            histAlarmKeyMap.remove(oldestEntry)\r\n                            histAlarmModtimeMap.remove(oldestEntry)\r\n                            histAlarmEndModtimeMap.remove(oldestEntry)\r\n                            histAlarmDuration.remove(oldestEntry)\r\n                            histAlarmSevLevelMap.remove(oldestEntry)\r\n                            histAlarmChannelMap.remove(oldestEntry)\r\n                            histOwner.remove(oldestEntry)\r\n\r\n            if histAlarmModtimeMap is None:\r\n                resource.getLogger().trace(\"didn\u0027t get histAlarmModtimeMap for platform: \" + platform)\r\n                continue\r\n            else:\r\n\r\n                if len(histAlarmModtimeMap) \u003d\u003d 0:\r\n                    pass\r\n                    # resource.getLogger().trace(\"platform %s alarm map is empty!\" % platform)\r\n                    # resource.getLogger().trace(str(histAlarmModtimeMap))\r\n                else:\r\n\r\n                    for entry in histAlarmModtimeMap:\r\n                        resource.getLogger().trace(\"Processing service from alarm time map: \" + str(entry))\r\n                        timeString \u003d histAlarmModtimeMap[entry]\r\n                        resource.getLogger().trace(\"Time string: \" + str(timeString))\r\n                        timeInMillis \u003d self.utils.utilStringToModtime(str(timeString), \u0027%Y-%m-%d %H:%M:%S\u0027)\r\n                        if timeCutOff \u003e timeInMillis:\r\n                            histOwnerDeviceMap.remove(entry)\r\n                            histAlarmKeyMap.remove(entry)\r\n                            histAlarmModtimeMap.remove(entry)\r\n                            histAlarmEndModtimeMap.remove(entry)\r\n                            histAlarmDuration.remove(entry)\r\n                            histAlarmSevLevelMap.remove(entry)\r\n                            histAlarmChannelMap.remove(entry)\r\n                            histOwner.remove(entry)\r\n\r\n            if writeToTables:\r\n                resource.setDatapointMap(\"histOwnerDeviceMap_\" + str(platform), histOwnerDeviceMap)\r\n                resource.setDatapointMap(\"histAlarmKeyMap_\" + str(platform), histAlarmKeyMap)\r\n                resource.setDatapointMap(\"histAlarmModtimeMap_\" + str(platform), histAlarmModtimeMap)\r\n                resource.setDatapointMap(\"histAlarmEndModtimeMap_\" + str(platform), histAlarmEndModtimeMap)\r\n                resource.setDatapointMap(\"histAlarmDuration_\" + str(platform), histAlarmDuration)\r\n                resource.setDatapointMap(\"histAlarmSevLevelMap_\" + str(platform), histAlarmSevLevelMap)\r\n                resource.setDatapointMap(\"histChannel_\" + str(platform), histAlarmChannelMap)\r\n                resource.setDatapointMap(\"histOwner_\" + str(platform), histOwner)\r\n    ################################################\r\n    # Writes current alarm lists to the data tables\r\n    ################################################\r\n    def writeTable(self, poll, resource, userdata\u003dNone):\r\n\r\n        logger \u003d resource.getLogger()\r\n        logger.debug(\"*****Beginning writeTable *****\")\r\n        for platformType in self.PLATFORMS:\r\n\r\n            ownerDeviceMap \u003d resource.getDatapointMap(\"ownerDeviceMap_\" + str(platformType))\r\n            alarmKeyMap \u003d resource.getDatapointMap(\"alarmKeyMap_\" + str(platformType))\r\n            alarmModtimeMap \u003d resource.getDatapointMap(\"alarmModtimeMap_\" + str(platformType))\r\n            alarmEndModtimeMap \u003d resource.getDatapointMap(\"alarmEndModtimeMap_\" + str(platformType))\r\n            alarmDuration \u003d resource.getDatapointMap(\"alarmDuration_\" + str(platformType))\r\n            alarmSevLevelMap \u003d resource.getDatapointMap(\"alarmSevLevelMap_\" + str(platformType))\r\n            alarmChannelMap \u003d resource.getDatapointMap(\"alarmChannel_\" + str(platformType))\r\n            ownerDeviceMapBuffer \u003d resource.getVar(\"ownerDeviceMap_\" + str(platformType))\r\n            alarmKeyMapBuffer \u003d resource.getVar(\"alarmKeyMap_\" + str(platformType))\r\n            alarmModtimeMapBuffer \u003d resource.getVar(\"alarmModtimeMap_\" + str(platformType))\r\n            alarmEndModtimeMapBuffer \u003d resource.getVar(\"alarmEndModtimeMap_\" + str(platformType))\r\n            alarmDurationBuffer \u003d resource.getVar(\"alarmDuration_\" + str(platformType))\r\n            alarmSevLevelMapBuffer \u003d resource.getVar(\"alarmSevLevelMap_\" + str(platformType))\r\n            alarmChannelBuffer \u003d resource.getVar(\"alarmChannel_\" + str(platformType))\r\n            ownerDeviceMap.putAll(ownerDeviceMapBuffer)\r\n            alarmKeyMap.putAll(alarmKeyMapBuffer)\r\n            alarmModtimeMap.putAll(alarmModtimeMapBuffer)\r\n            alarmEndModtimeMap.putAll(alarmEndModtimeMapBuffer)\r\n            alarmDuration.putAll(alarmDurationBuffer)\r\n            alarmSevLevelMap.putAll(alarmSevLevelMapBuffer)\r\n            alarmChannelMap.putAll(alarmChannelBuffer)\r\n\r\n            histOwnerDeviceMap \u003d resource.getDatapointMap(\"histOwnerDeviceMap_\" + str(platformType))\r\n            histAlarmKeyMap \u003d resource.getDatapointMap(\"histAlarmKeyMap_\" + str(platformType))\r\n            histAlarmModtimeMap \u003d resource.getDatapointMap(\"histAlarmModtimeMap_\" + str(platformType))\r\n            histAlarmEndModtimeMap \u003d resource.getDatapointMap(\"histAlarmEndModtimeMap_\" + str(platformType))\r\n            histAlarmDuration \u003d resource.getDatapointMap(\"histAlarmDuration_\" + str(platformType))\r\n            histAlarmSevLevelMap \u003d resource.getDatapointMap(\"histAlarmSevLevelMap_\" + str(platformType))\r\n            histChannelMap \u003d resource.getDatapointMap(\"histChannel_\" + str(platformType))\r\n            histOwner \u003d resource.getDatapointMap(\"histOwner_\" + str(platformType))\r\n            histOwnerDeviceMapBuffer \u003d resource.getVar(\"histOwnerDeviceMap_\" + str(platformType))\r\n            histAlarmKeyMapBuffer \u003d resource.getVar(\"histAlarmKeyMap_\" + str(platformType))\r\n            histAlarmModtimeMapBuffer \u003d resource.getVar(\"histAlarmModtimeMap_\" + str(platformType))\r\n            histAlarmEndModtimeMapBuffer \u003d resource.getVar(\"histAlarmEndModtimeMap_\" + str(platformType))\r\n            histAlarmDurationBuffer \u003d resource.getVar(\"histAlarmDuration_\" + str(platformType))\r\n            histAlarmSevLevelMapBuffer \u003d resource.getVar(\"histAlarmSevLevelMap_\" + str(platformType))\r\n            histAlarmChannelBuffer \u003d resource.getVar(\"histAlarmChannel_\" + str(platformType))\r\n            histOwnerBuffer \u003d resource.getVar(\"histOwner_\" + str(platformType))\r\n            histOwnerDeviceMap.putAll(histOwnerDeviceMapBuffer)\r\n            histAlarmKeyMap.putAll(histAlarmKeyMapBuffer)\r\n            histAlarmModtimeMap.putAll(histAlarmModtimeMapBuffer)\r\n            histAlarmEndModtimeMap.putAll(histAlarmEndModtimeMapBuffer)\r\n            histAlarmDuration.putAll(histAlarmDurationBuffer)\r\n            histAlarmSevLevelMap.putAll(histAlarmSevLevelMapBuffer)\r\n            histOwner.putAll(histOwnerBuffer)\r\n            histChannelMap.putAll(histAlarmChannelBuffer)\r\n\r\n\r\n            historyIntervalMinutes \u003d resource.setDatapointValueIfBlank(\"alarmHistoryMinutes\", \"10080\")\r\n            resource.getLogger().trace(\r\n                    \"Purging historical tables of records older than %s minutes\" % historyIntervalMinutes)\r\n\r\n            historyIntervalMillis \u003d float(historyIntervalMinutes) * 60 * 1000\r\n            resource.getLogger().trace(\"History in millis: \" + str(historyIntervalMillis))\r\n            timeCutOff \u003d (time.time() * 1000) - historyIntervalMillis\r\n\r\n            sortedTimeStamps \u003d sorted(histAlarmModtimeMap.keySet())\r\n            try:\r\n                maxEntries \u003d int(resource.getDatapointValueAsString(\"maxHist\", \"300\"))\r\n            except:\r\n                maxEntries \u003d 300\r\n            resource.getLogger().trace(\"max entries: \" + str(maxEntries))\r\n\r\n            #### If the Last 20 Alarms table has more then 20, trim the oldest\r\n            if alarmModtimeMap is not None and len(alarmModtimeMap) \u003e\u003d 20:\r\n                counter \u003d 0\r\n                alarmTimeKeys \u003d sortedTimeStamps[len(sortedTimeStamps)-len(alarmModtimeMap):]\r\n                for x in range(len(alarmModtimeMap)-20) :\r\n                    if len(alarmTimeKeys) \u003e\u003d (x+1):\r\n                        oldestKey \u003d alarmTimeKeys[x]\r\n                        resource.getLogger().trace(\"Removing oldest entry from table: \" + str(oldestKey))\r\n                        if oldestKey is not None and oldestKey in alarmModtimeMap:\r\n                            resource.getLogger().trace(\"Oldest entry key is still in the map: \" + str(oldestKey))\r\n                            ownerDeviceMap.remove(oldestKey)\r\n                            alarmKeyMap.remove(oldestKey)\r\n                            alarmModtimeMap.remove(oldestKey)\r\n                            alarmEndModtimeMap.remove(oldestKey)\r\n                            alarmDuration.remove(oldestKey)\r\n                            alarmSevLevelMap.remove(oldestKey)\r\n                            alarmChannelMap.remove(oldestKey)\r\n                        counter +\u003d 1\r\n                    else:\r\n                        resource.getLogger().warn(\"alarmTimeKeys did not have index \" + str(x))\r\n            if histOwnerDeviceMap is None:\r\n                resource.getLogger().warn(\"didn\u0027t get deviceMap for platform: \" + platformType)\r\n            else:\r\n                if len(histOwnerDeviceMap) \u003d\u003d 0:\r\n                    resource.getLogger().trace(\"platform %s device map is empty!\" % platformType)\r\n                    resource.getLogger().trace(str(histOwnerDeviceMap))\r\n                else:\r\n                    entries \u003d len(histOwnerDeviceMap)\r\n                    if entries \u003e maxEntries:\r\n                        excess \u003d entries - maxEntries\r\n                        resource.getLogger().debug(\"trimming history table for platform: \" + str(platformType)+\" trimming \"+str(excess)+\" rows\")\r\n                        for i in range(1, excess + 1):\r\n                            oldestKey \u003d sortedTimeStamps[0]\r\n                            resource.getLogger().trace(\"removing row %s of %s\" % (str(i), str(excess)))\r\n                            histOwnerDeviceMap.remove(oldestKey)\r\n                            histAlarmKeyMap.remove(oldestKey)\r\n                            histAlarmModtimeMap.remove(oldestKey)\r\n                            histAlarmEndModtimeMap.remove(oldestKey)\r\n                            histAlarmDuration.remove(oldestKey)\r\n                            histAlarmSevLevelMap.remove(oldestKey)\r\n                            histChannelMap.remove(oldestKey)\r\n                            histOwner.remove(oldestKey)\r\n                            del sortedTimeStamps[0]\r\n\r\n            if histAlarmModtimeMap is None:\r\n                resource.getLogger().trace(\"didn\u0027t get histAlarmModtimeMap for platform: \" + platformType)\r\n                continue\r\n            else:\r\n\r\n                if len(histAlarmModtimeMap) \u003d\u003d 0:\r\n                    pass\r\n                    # resource.getLogger().trace(\"platform %s alarm map is empty!\" % platform)\r\n                    # resource.getLogger().trace(str(histAlarmModtimeMap))\r\n                else:\r\n                    counter \u003d 0\r\n                    while timeCutOff \u003e sortedTimeStamps[0] and counter \u003c2000:\r\n                        entry \u003d sortedTimeStamps[0]\r\n                        resource.getLogger().trace(\"Processing service from alarm time map: \" + str(entry))\r\n                        timeString \u003d histAlarmModtimeMap[entry]\r\n                        resource.getLogger().trace(\"Time string: \" + str(timeString))\r\n                        timeInMillis \u003d self.utils.utilStringToModtime(str(timeString), \u0027%Y-%m-%d %H:%M:%S\u0027)\r\n                        if timeCutOff \u003e timeInMillis:\r\n                            histOwnerDeviceMap.remove(entry)\r\n                            histAlarmKeyMap.remove(entry)\r\n                            histAlarmModtimeMap.remove(entry)\r\n                            histAlarmEndModtimeMap.remove(entry)\r\n                            histAlarmDuration.remove(entry)\r\n                            histAlarmSevLevelMap.remove(entry)\r\n                            histChannelMap.remove(entry)\r\n                            histOwner.remove(entry)\r\n                            del sortedTimeStamps[0]\r\n                        counter +\u003d 1\r\n            for diffKey in set(alarmModtimeMap) - set(histAlarmModtimeMap):\r\n                ownerDeviceMap.remove(diffKey)\r\n                alarmKeyMap.remove(diffKey)\r\n                alarmModtimeMap.remove(diffKey)\r\n                alarmEndModtimeMap.remove(diffKey)\r\n                alarmDuration.remove(diffKey)\r\n                alarmSevLevelMap.remove(diffKey)\r\n                alarmChannelMap.remove(diffKey)\r\n            #### Write buffers to the database\r\n            resource.setDatapointMap(\"ownerDeviceMap_\" + str(platformType), ownerDeviceMap)\r\n            resource.setDatapointMap(\"alarmKeyMap_\" + str(platformType), alarmKeyMap)\r\n            resource.setDatapointMap(\"alarmModtimeMap_\" + str(platformType), alarmModtimeMap)\r\n            resource.setDatapointMap(\"alarmEndModtimeMap_\" + str(platformType), alarmEndModtimeMap)\r\n            resource.setDatapointMap(\"alarmDuration_\" + str(platformType), alarmDuration)\r\n            resource.setDatapointMap(\"alarmSevLevelMap_\" + str(platformType), alarmSevLevelMap)\r\n            resource.getLogger().trace(\" The channel map is : \"+str(alarmChannelMap))\r\n            resource.setDatapointMap(\"alarmChannel_\" + str(platformType), alarmChannelMap)\r\n\r\n            resource.setDatapointMap(\"histOwnerDeviceMap_\" + str(platformType), histOwnerDeviceMap)\r\n            resource.setDatapointMap(\"histAlarmKeyMap_\" + str(platformType), histAlarmKeyMap)\r\n            resource.setDatapointMap(\"histAlarmModtimeMap_\" + str(platformType), histAlarmModtimeMap)\r\n            resource.setDatapointMap(\"histAlarmEndModtimeMap_\" + str(platformType), histAlarmEndModtimeMap)\r\n            resource.setDatapointMap(\"histAlarmDuration_\" + str(platformType), histAlarmDuration)\r\n            resource.setDatapointMap(\"histAlarmSevLevelMap_\" + str(platformType), histAlarmSevLevelMap)\r\n            resource.setDatapointMap(\"histChannel_\" + str(platformType), histChannelMap)\r\n            resource.setDatapointMap(\"histOwner_\" + str(platformType), histOwner)\r\n\r\n            resource.putVar(\"ownerDeviceMap_\" + str(platformType), DatapointMap())\r\n            resource.putVar(\"alarmKeyMap_\" + str(platformType), DatapointMap())\r\n            resource.putVar(\"alarmSevLevelMap_\" + str(platformType), DatapointMap())\r\n            resource.putVar(\"alarmChannel_\" + str(platformType), DatapointMap())\r\n            resource.putVar(\"alarmModtimeMap_\" + str(platformType), DatapointMap())\r\n            resource.putVar(\"alarmEndModtimeMap_\" + str(platformType), DatapointMap())\r\n            resource.putVar(\"alarmDuration_\" + str(platformType), DatapointMap())\r\n\r\n            resource.putVar(\"histOwnerDeviceMap_\" + str(platformType), DatapointMap())\r\n            resource.putVar(\"histAlarmKeyMap_\" + str(platformType), DatapointMap())\r\n            resource.putVar(\"histAlarmSevLevelMap_\" + str(platformType), DatapointMap())\r\n            resource.putVar(\"histAlarmChannel_\" + str(platformType), DatapointMap())\r\n            resource.putVar(\"histAlarmModtimeMap_\" + str(platformType), DatapointMap())\r\n            resource.putVar(\"histAlarmEndModtimeMap_\" + str(platformType), DatapointMap())\r\n            resource.putVar(\"histAlarmDuration_\" + str(platformType), DatapointMap())\r\n            resource.putVar(\"histOwner_\" + str(platformType), DatapointMap())\r\n\r\n        return\r\n\r\n    ################################################\r\n    # handleFault\r\n    ################################################\r\n\r\n    def myAlarmHandler(self, rule, resource, userdata, events\u003dNone):\r\n        from java.util import UUID\r\n\r\n        logger \u003d resource.getLogger()\r\n        logger.info(\"Events list len: %s and events %s\" % (str(len(events)), str(events)))\r\n        for event in events:\r\n            attrProxy \u003d event\r\n            dpKey \u003d attrProxy.getDatapointKey()\r\n            sevLevelAlarm \u003d attrProxy.getValue()\r\n            ownerDevice \u003d resource.getResourceManager().getResource(attrProxy.getEntityUuidAsString())\r\n            if ownerDevice is None:\r\n                # resource.getLogger().info(\"######### logging uuid with None type OwnerDevice \" +attrProxy.getEntityUuidAsString())\r\n                return\r\n            ownerDeviceName \u003d ownerDevice.getName()\r\n            ownerUUID \u003d ownerDevice.getUuidAsString()\r\n            ownerTranslator \u003d ownerDevice.getTranslator().getFilename()\r\n            alarmLogtime \u003d attrProxy.getModTime()\r\n            platformTypeMap \u003d ownerDevice.getDatapointMap(\"platform\")\r\n\r\n            logger.info(\"Alarm captured: \" + str(dpKey) + \" --- \" + str(sevLevelAlarm) + \" --- \" + str(alarmLogtime))\r\n            # logger.trace(\"Alarm Captured\")\r\n            # logger.trace(\"DP Key: %s\" % str(dpKey))\r\n            # logger.trace(\"Sev Level: %s\" % str(sevLevelAlarm))\r\n            # logger.trace(\"Owner Device: %s\" % str(ownerDeviceName))\r\n            # logger.trace(\"Alarm Log Time: %s\" % str(alarmLogtime))\r\n\r\n            # Only put alarms in platform-specific tables that are defined in this rule\r\n\r\n            # the getAttributeValueAsString later in this method is not working, so the temp fix is to query the Solr DB for the information\r\n\r\n\r\n            # resource.getLogger().debug(\"Querying database for all attributes...\")\r\n            # attrOwnerUUID \u003d attrProxy.getOwnerUuidAsString()\r\n            # # query for all attributes on this resource\r\n            # attrQuery \u003d \"ownerUUID:\" + attrOwnerUUID\r\n            # attrQueryResults \u003d DBHelper.getInstance().runGenericCurrentQuery(attrQuery)\r\n            # #resource.getLogger().debug(\"Query Result: \" + str(attrQueryResults) + \" with type: \" + str(type(attrQueryResults)))\r\n            #\r\n            # resource.getLogger().debug(\"Building Dict for query.....\")\r\n            logger.trace(\"Getting dpCat9Value...\")\r\n            dpCat9Value \u003d None\r\n            dpCat9Platforms \u003d []\r\n\r\n            dp \u003d ownerDevice.getDatapoint(dpKey)\r\n            if dp:\r\n                dpCat9Value \u003d dp.getAttributeAsString(\"dpCategory9\")\r\n\r\n            for platform in self.PLATFORMS:\r\n                if dpCat9Value is not None and platform in dpCat9Value:\r\n                    dpCat9Platforms.append(platform)\r\n\r\n            resource.getLogger().debug(\"dpCat9 Value: \" + str(dpCat9Value) + \" and dpCat9 platforms: \" + str(dpCat9Platforms))\r\n\r\n            # if attrQueryResults is not None:\r\n            #     for entry in attrQueryResults:\r\n            #         entry \u003d self.utils.toJSON(entry)\r\n            #         entry_dict \u003d eval(entry)\r\n            #         # resource.getLogger().debug(\"JSON Dict: \" + str(entry_dict))\r\n            #         # try:\r\n            #         #     resource.getLogger().debug(\"Attr: %s, name: %s, AttrName: %s\" % \\\r\n            #         #                            (entry_dict.has_key(\"Attribute\"), (\"name\" in entry_dict[\"Attribute\"]), entry_dict[\"Attribute\"][\"name\"]))\r\n            #         # except:\r\n            #         #     pass\r\n            #         if entry_dict.has_key(\"Attribute\") and (\"name\" in entry_dict[\"Attribute\"]) and \\\r\n            #             entry_dict[\"Attribute\"][\"name\"] \u003d\u003d \"dpCategory9\":\r\n            #             # resource.getLogger().debug(\"dbCategory9 attribute\")\r\n            #             dpCat9Value \u003d entry_dict[\"Attribute\"][\"value\"]\r\n            #             for platform in self.PLATFORMS:\r\n            #                 if platform in dpCat9Value:\r\n            #                     dpCat9Platforms.append(platform)\r\n\r\n            #if resource has no dpCat9 value\r\n            if dpCat9Value is None:\r\n                dpCat9Value \u003d \"\"\r\n\r\n            if platformTypeMap is not None:\r\n                for platformTypeKey in platformTypeMap:\r\n                    platformType \u003d platformTypeMap.get(platformTypeKey).getValue()\r\n\r\n                    resource.getLogger().debug(\"Handling platform: \" + str(platformType))\r\n                    if platformType !\u003d \"N/A\" and platformType in self.PLATFORMS and (dpCat9Platforms \u003d\u003d [] or platformType in dpCat9Platforms):\r\n                        # Determine if combination of owner device and dpKey already exists in table\r\n                        # and that either the current platform is affected by the service, or there are no service affected platforms\r\n\r\n                        ownerEntry \u003d \"[%s](/resource/status/%s)\" % (ownerDeviceName, ownerUUID)\r\n                        entryKey \u003d self.returnOpenAlarmEntryFromTable(resource, platformType, dpKey, ownerEntry)\r\n\r\n                        resource.getLogger().trace(\"Found open row without end time: \" + str(entryKey))\r\n                        # If there is already an open entry in the table for the specified device/dpkey and the alarm is being set,\r\n                        # just update the modtime of the existing entry\r\n                        if sevLevelAlarm !\u003d Fault.CLEAR and entryKey is not None:\r\n                            resource.getLogger().debug(\"Alarm %s not processed, already set\" % dpKey)\r\n                            # Do nothing for now, since alarm was supposedly already set\r\n                            pass\r\n\r\n                        # If the alarm has not been entered in the table yet, add a new entry\r\n                        elif sevLevelAlarm !\u003d Fault.CLEAR and entryKey is None:\r\n                            resource.getLogger().debug(\"adding row to tables for this alarm.\")\r\n                            modTime_tstamp_key \u003d self.utils.utilModtimeToString(alarmLogtime*1.0, \u0027%Y-%m-%d %H:%M:%S.%f\u0027)\r\n                            modTime_tstamp_display \u003d datetime.datetime.fromtimestamp(alarmLogtime*1.0/1000).strftime(\u0027%Y-%m-%d %H:%M:%S\u0027)\r\n\r\n                            # resource.getLogger().debug(\"The alarm time stamp: \" + modTime_tstamp)\r\n                            alarmValDp \u003d Datapoint(\"ALARM\")\r\n                            alarmValDp.setAttribute(Fault.ATTRIB_NAME, str(sevLevelAlarm))\r\n\r\n                            alarmTableCol \u003d resource.getDatapointMap(\"alarmModtimeMap_\" + str(platformType))\r\n                            alarmTableColBuffer \u003d resource.getVar(\"alarmModtimeMap_\" + str(platformType))\r\n                            alarmTableCol.putAll(alarmTableColBuffer)\r\n\r\n                            #### Grab all channels, de-duplicate them, and store them as a readable string in markdown\r\n                            # affectedServices \u003d resource.getAttributeValueAsString(dpKey,\u0027dpCategory9\u0027,\"\")\r\n                            # replacing affectedServices with the value pulled from the DB\r\n                            affectedServices \u003d dpCat9Value\r\n                            # affectedServicesDeDuped \u003d list(set(affectedServices.split(\",\")))\r\n                            # format of multi-values changing soon from \u0027,\u0027 seperated to \u0027::\u0027 seperated.\r\n                            affectedServicesDeDuped \u003d list(set(affectedServices.split(\"::\")))\r\n                            resource.getLogger().info(\"Got alarm (%s) with dpCat9 of :%s\" % (dpKey, str(affectedServices)))\r\n                            if affectedServices \u003d\u003d \"\" :\r\n                                servicesToDisplay \u003d \"None\"\r\n                            elif len(affectedServicesDeDuped) \u003c 5:\r\n                                servicesToDisplay \u003d \" \".join(affectedServicesDeDuped)\r\n                            else:\r\n                                servicesToDisplay \u003d \"Multiple services affected\"\r\n\r\n                            # resource.getLogger().trace(\"Parse affected services :\" +str(servicesToDisplay))\r\n                            if ownerDeviceName is not None and dpKey is not None and alarmValDp is not None:\r\n                                ###### Grab the buffer for each data map, add the new value and replace the buffer with the new map\r\n                                ###### Write buffer for alarmLogTable\r\n                                logger.info(\"Setting alarm buffer for %s\" % dpKey)\r\n\r\n                                dataBuffer \u003d resource.getVar(\"ownerDeviceMap_\" + str(platformType))\r\n                                dataBuffer.put(str(modTime_tstamp_key), Datapoint(ownerEntry))\r\n                                resource.putVar(\"ownerDeviceMap_\" + str(platformType), dataBuffer)\r\n\r\n                                dataBuffer \u003d resource.getVar(\"alarmKeyMap_\" + str(platformType))\r\n                                dataBuffer.put(str(modTime_tstamp_key), Datapoint(str(dpKey)))\r\n                                resource.putVar(\"alarmKeyMap_\" + str(platformType), dataBuffer)\r\n\r\n                                dataBuffer \u003d resource.getVar(\"alarmModtimeMap_\" + str(platformType))\r\n                                dataBuffer.put(str(modTime_tstamp_key), Datapoint(str(modTime_tstamp_display)))\r\n                                resource.putVar(\"alarmModtimeMap_\" + str(platformType), dataBuffer)\r\n\r\n                                dataBuffer \u003d resource.getVar(\"alarmEndModtimeMap_\" + str(platformType))\r\n                                dataBuffer.put(str(modTime_tstamp_key), Datapoint(\"\"))\r\n                                resource.putVar(\"alarmEndModtimeMap_\" + str(platformType), dataBuffer)\r\n\r\n                                dataBuffer \u003d resource.getVar(\"alarmDuration_\" + str(platformType))\r\n                                dataBuffer.put(str(modTime_tstamp_key), Datapoint(\"\"))\r\n                                resource.putVar(\"alarmDuration_\" + str(platformType), dataBuffer)\r\n\r\n                                dataBuffer \u003d resource.getVar(\"alarmSevLevelMap_\" + str(platformType))\r\n                                #7/20/2018 display alarm severity\r\n                                #11/6/2018 update to display severity badges on table\r\n                                sevVal \u003d str(sevLevelAlarm)\r\n                                if sevVal  \u003d\u003d \"0\":\r\n                                    fault \u003d self.SEV_HTML_MAP[\"CLEAR\"] #\"CLEAR\"\r\n                                elif sevVal \u003d\u003d \"1\":\r\n                                    fault \u003d self.SEV_HTML_MAP[\"MINOR\"] #\"MINOR\"\r\n                                elif sevVal \u003d\u003d \"2\":\r\n                                    fault \u003d self.SEV_HTML_MAP[\"MAJOR\"] #\"MAJOR\"\r\n                                elif sevVal \u003d\u003d \"3\":\r\n                                    fault \u003d self.SEV_HTML_MAP[\"CRITICAL\"] #\"CRITICAL\"\r\n                                elif sevVal \u003d\u003d \"COMM\":\r\n                                    fault \u003d self.SEV_HTML_MAP[\"COMM\"] #\"Communications\"\r\n                                elif sevVal \u003d\u003d \"MAINT\":\r\n                                    fault \u003d self.SEV_HTML_MAP[\"MAINT\"] #\"Maintenance\"\r\n                                elif sevVal \u003d\u003d \"TRANSPORT\":\r\n                                    fault \u003d self.SEV_HTML_MAP[\"TRANSPORT\"] #\"Transport\"\r\n                                else:\r\n                                    fault \u003d \"\"\r\n\r\n                                # logger.debug(\"Fault: \" + fault)\r\n                                # sevValDp \u003d Datapoint(\"\", {Fault.ATTRIB_NAME:fault})\r\n                                sevValDp \u003d Datapoint(fault)\r\n                                sevValDp.setAttribute(Fault.ATTRIB_NAME, str(sevLevelAlarm))\r\n                                dataBuffer.put(str(modTime_tstamp_key), sevValDp)\r\n                                resource.putVar(\"alarmSevLevelMap_\" + str(platformType), dataBuffer)\r\n\r\n                                dataBuffer \u003d resource.getVar(\"alarmChannel_\" + str(platformType))\r\n                                dataBuffer.put(str(modTime_tstamp_key), Datapoint(servicesToDisplay))\r\n                                resource.putVar(\"alarmChannel_\" + str(platformType), dataBuffer)\r\n\r\n                                ###### Write buffer for histEventTable\r\n                                dataBuffer \u003d resource.getVar(\"histOwnerDeviceMap_\" + str(platformType))\r\n                                dataBuffer.put(str(modTime_tstamp_key), Datapoint(\"[%s](/resource/status/%s)\" % (ownerDeviceName, ownerUUID)))\r\n                                resource.putVar(\"histOwnerDeviceMap_\" + str(platformType), dataBuffer)\r\n\r\n                                dataBuffer \u003d resource.getVar(\"histAlarmKeyMap_\" + str(platformType))\r\n                                dataBuffer.put(str(modTime_tstamp_key), Datapoint(str(dpKey)))\r\n                                resource.putVar(\"histAlarmKeyMap_\" + str(platformType), dataBuffer)\r\n\r\n                                dataBuffer \u003d resource.getVar(\"histAlarmModtimeMap_\" + str(platformType))\r\n                                dataBuffer.put(str(modTime_tstamp_key), Datapoint(str(modTime_tstamp_display)))\r\n                                resource.putVar(\"histAlarmModtimeMap_\" + str(platformType), dataBuffer)\r\n\r\n                                dataBuffer \u003d resource.getVar(\"histAlarmEndModtimeMap_\" + str(platformType))\r\n                                dataBuffer.put(str(modTime_tstamp_key), Datapoint(\"\"))\r\n                                resource.putVar(\"histAlarmEndModtimeMap_\" + str(platformType), dataBuffer)\r\n\r\n                                dataBuffer \u003d resource.getVar(\"histAlarmDuration_\" + str(platformType))\r\n                                dataBuffer.put(str(modTime_tstamp_key), Datapoint(\"\"))\r\n                                resource.putVar(\"histAlarmDuration_\" + str(platformType), dataBuffer)\r\n\r\n                                dataBuffer \u003d resource.getVar(\"histAlarmSevLevelMap_\" + str(platformType))\r\n                                #7/20/2018 display alarm severity\r\n                                dataBuffer.put(str(modTime_tstamp_key), sevValDp)\r\n                                resource.putVar(\"histAlarmSevLevelMap_\" + str(platformType), dataBuffer)\r\n\r\n                                dataBuffer \u003d resource.getVar(\"histAlarmChannel_\" + str(platformType))\r\n                                dataBuffer.put(str(modTime_tstamp_key), Datapoint(servicesToDisplay))\r\n                                resource.putVar(\"histAlarmChannel_\" + str(platformType), dataBuffer)\r\n\r\n                                dataBuffer \u003d resource.getVar(\"histOwner_\" + str(platformType))\r\n                                dataBuffer.put(str(modTime_tstamp_key), Datapoint(str(ownerTranslator)))\r\n                                resource.putVar(\"histOwner_\" + str(platformType), dataBuffer)\r\n\r\n                        # If there is an open entry in an alarm log table for the specified platform, close it by adding an endtime\r\n                        # and duration, and setting the sevLevel to clear\r\n                        elif sevLevelAlarm \u003d\u003d Fault.CLEAR and entryKey is not None:\r\n                            modTime_tstamp_key \u003d self.utils.utilModtimeToString(alarmLogtime*1.0, \u0027%Y-%m-%d %H:%M:%S\u0027)\r\n\r\n                            logger.info(\"Clearing alarm from table: %s\" % dpKey)\r\n                            ##### these will make changes to the buffered data now\r\n                            self.clearAlarmFromTable(resource, platformType, entryKey, modTime_tstamp_key, alarmLogtime, False)\r\n\r\n                            self.clearAlarmFromTable(resource, platformType, entryKey, modTime_tstamp_key, alarmLogtime, True)\r\n\r\n                        # Otherwise, if a clear comes through and no entry exists in the table, just ignore it\r\n                        else:  # sevLevelAlarm \u003d\u003d Fault.CLEAR and entryKey is None\r\n                            pass\r\n                    else:\r\n                        resource.getLogger().debug(\"ignoring platform: \" + platformType)\r\n            else:\r\n                resource.getLogger().debug(\"no platform map on owner resource.\")\r\n\r\n            \u0027\u0027\u0027\r\n            # This kills performance - need to think of a better way\r\n            ownerDeviceTypeUuid \u003d str(ownerDevice.getTranslatorUuid())\r\n            allRes \u003d resource.getResourceManager().getResources()\r\n    \r\n            # Need to ensure all resources of the same type have the same alarm, so that a user can apply a service-affecting\r\n            # status to all devices that are the same type without waiting for an alarm to come through\r\n            for resKey in allRes:\r\n                currRes \u003d allRes[resKey]\r\n                if str(currRes.getTranslatorUuid()) \u003d\u003d ownerDeviceTypeUuid:\r\n                    resource.getLogger().trace(\"Found device of same type: \" + str(currRes) + \", trying to find alarm\")\r\n                    if currRes.getDatapoint(dpKey) \u003d\u003d None and currRes.getName() !\u003d ownerDevice.getName():\r\n                        resource.getLogger().trace(\"Device does not have alarm, adding default clear\")\r\n                        self.utils.addAlarm(currRes, dpKey, dpKey, Fault.CLEAR, \"Clear\", True, False)\r\n    \r\n            \u0027\u0027\u0027\r\n            if sevLevelAlarm \u003d\u003d Fault.CLEAR:\r\n                resource.getLogger().trace(\"Cleared alarm, not modifying recently alarmed groups\")\r\n                return\r\n\r\n            # If alarm is service affecting, figure out which services it belongs to and add to service alarm map\r\n            alarmDp \u003d ownerDevice.getDatapoint(dpKey)\r\n\r\n            historyIntervalMinutes \u003d resource.getDatapointValueAsString(\"serviceHistoryMinutes\", \"180\")\r\n            historyIntervalMillis \u003d float(historyIntervalMinutes) * 60 * 1000\r\n            resource.getLogger().trace(\"History in millis: \" + str(historyIntervalMillis))\r\n            timeCutOff \u003d (time.time() * 1000) - historyIntervalMillis\r\n\r\n            if timeCutOff \u003e alarmLogtime:\r\n                # resource.getLogger().info(\"Alarm outside of monitored window, not processing. Maybe resource restarted?\")\r\n                return\r\n\r\n            if alarmDp is not None and alarmDp.getAttribute(\"dpCategory9\") is not None:\r\n                resource.getLogger().trace(\"Found datapoint object with attributes: \" + str(alarmDp.getAttributes()))\r\n                serviceAttr \u003d alarmDp.getAttribute(\"dpCategory9\")\r\n                serviceList \u003d []\r\n\r\n                # If \"all\" is specified in the attribute, we need to go to Svc manager and pull the actual service names\r\n                # tied to the resource\r\n                if serviceAttr.getValue().lower() \u003d\u003d \"all\":\r\n                    resource.getLogger().debug(\"All services found on attribute: \" + str(serviceAttr.getValue()))\r\n                    val \u003d UUID.fromString(ownerDevice.getUuidAsString())\r\n                    serviceList \u003d self.utils.requestObjectESBQueue(resource, val, SMConstants.SERVICE_API_QUEUE,\r\n                                                                   SMConstants.MSGTYPE_GET_SVCS_FOR_RESOURCE)\r\n\r\n                else:\r\n                    resource.getLogger().trace(\"Specific services found on attribute: \" + str(serviceAttr.getValue()))\r\n                    svcListNames \u003d serviceAttr.getValue().split(\",\")\r\n                    allSvcs \u003d DBHelper.getInstance().runGenericConfigQuery(\"ManagedService\")\r\n\r\n                    for svcName in svcListNames:\r\n                        tempList \u003d filter(lambda x: svcName \u003d\u003d x.name(), allSvcs)\r\n                        serviceList +\u003d tempList\r\n\r\n                # Put services that have alarmed recently into a separate group\r\n                resource.getLogger().trace(\"List of services: \" + str(serviceList))\r\n\r\n                for svc in serviceList:\r\n                    # Copy into a mutable list\r\n                    svcProps \u003d {}\r\n                    resource.getLogger().trace(\"Found properties on service: \" + str(svcProps))\r\n\r\n                    resource.getLogger().trace(\"Service group not found in services, adding new entry\")\r\n                    svcProps[\"serviceGroup\"] \u003d self.RECENT_ALM_GRP\r\n                    svcProps[\"modTime\"] \u003d str(time.time() * 1000)\r\n                    modTime_tstamp_key \u003d self.utils.utilModtimeToString(time.time() * 1000)\r\n                    # self.addServiceToRecentlyAlarmed(resource, svc, svcProps)\r\n                    #### also buffer here\r\n                    resource.setDatapointTableRow(\"serviceAlarmTable\", str(svc.name()),\r\n                                                  {\r\n                                                      \"serviceName\": str(svc.name()),\r\n                                                      \"alarmTime\": str(modTime_tstamp_key)})\r\n\r\n    # Returns the key of the appropriate table if an open entry for a particular dpKey/owning device exists in the table\r\n    # Otherwise, returns None\r\n    # An open entry is defined as one that has a matching dpKey/ownerDevice entry in a table for the specified platform,\r\n    # but the end time for the entry is blank or nonexistant.\r\n    def returnOpenAlarmEntryFromTable(self, resource, platform, dpKey, ownerDeviceName):\r\n        resource.getLogger().trace(\r\n            \"Attempting to find an open row for: \" + str(ownerDeviceName.replace(u\u0027\\xa0\u0027, u\u0027 \u0027)) + \"/\" + str(dpKey) + \"(\" + str(\r\n                platform) + \")\")\r\n\r\n        # dpEntryMap \u003d resource.getDatapointMap(\"alarmKeyMap_\" + str(platform))\r\n        # dpEntryMap.putAll(resource.getVar(\"alarmKeyMap_\" + str(platform)))\r\n        # ownerDeviceMap \u003d resource.getDatapointMap(\"ownerDeviceMap_\" + str(platform))\r\n        # ownerDeviceMap.putAll(resource.getVar(\"ownerDeviceMap_\" + str(platform)))\r\n        # endTimeMap \u003d resource.getDatapointMap(\"alarmEndModtimeMap_\" + str(platform))\r\n        # endTimeMap.putAll(resource.getVar(\"alarmEndModtimeMap_\" + str(platform)))\r\n\r\n        # Changed by Adam Hayes on 4/10/19\r\n        # The previous maps pulled only have the last 20 alarms\r\n        # so if something was more than 20 alarms old, it wouldn\u0027t get found\r\n        # where the hist table was 300 entries, so we use that instead. Had to make changes to\r\n        # clearAlarmFromTable to handle this change too\r\n        dpEntryMap \u003d resource.getDatapointMap(\"histAlarmKeyMap_\" + str(platform))\r\n        dpEntryMap.putAll(resource.getVar(\"histAlarmKeyMap_\" + str(platform)))\r\n        ownerDeviceMap \u003d resource.getDatapointMap(\"histOwnerDeviceMap_\" + str(platform))\r\n        ownerDeviceMap.putAll(resource.getVar(\"histOwnerDeviceMap_\" + str(platform)))\r\n        endTimeMap \u003d resource.getDatapointMap(\"histAlarmEndModtimeMap_\" + str(platform))\r\n        endTimeMap.putAll(resource.getVar(\"histAlarmEndModtimeMap_\" + str(platform)))\r\n\r\n\r\n        if dpEntryMap is None or ownerDeviceMap is None:\r\n            # resource.getLogger().warn(\"Unable to retrieve table for entry: \" + str(dpKey))\r\n            return None\r\n\r\n        for entryMapKey in dpEntryMap:\r\n            # resource.getLogger().debug(\"entryMapKey: \" + str(entryMapKey))\r\n            currDpKey \u003d dpEntryMap[entryMapKey].getValueAsString()\r\n            # resource.getLogger().debug(\"Current dpKey: \" + str(currDpKey))\r\n            currOwnerName \u003d ownerDeviceMap[entryMapKey].getValueAsString()\r\n            # resource.getLogger().debug(\"Current Owner Name: \" + str(currOwnerName))\r\n\r\n            if currDpKey \u003d\u003d dpKey and currOwnerName \u003d\u003d ownerDeviceName:\r\n                resource.getLogger().trace(\"Found a matching row in the table, checking if open\")\r\n                if endTimeMap is None or endTimeMap[entryMapKey] is None or endTimeMap[\r\n                    entryMapKey].getValueAsString() \u003d\u003d \"\":\r\n                    return entryMapKey\r\n\r\n        return None\r\n\r\n    ################################################\r\n    # stop\r\n    ################################################\r\n\r\n    def stop(self, resource\u003dNone):\r\n\r\n        if resource is not None:\r\n            resource.getLogger().info(\"Stopping \" + resource.getName())\r\n\r\n        BaseMonitoredRule.stop(self, resource)\r\n\r\n    ################################################\r\n    # runInstruction\r\n    ################################################\r\n\r\n    def runInstruction(self, instruction, ruleResource):\r\n\r\n        bHandled \u003d False\r\n        if ruleResource is not None:\r\n\r\n            if instruction.getKey() \u003d\u003d \"clearTable\":\r\n                platform \u003d instruction.getParmValueAsString(\"tableEntries\", \"\")\r\n                if platform \u003d\u003d \"\":\r\n                    ruleResource.sendInstructionResponse(\r\n                        InstructionResponse(ruleResource, instruction, InstructionResponse.DEFAULT_BAD_RC,\r\n                                            \"Invalid parameter provided\"))\r\n                    return\r\n\r\n                ruleResource.getLogger().debug(\"Clearing last 20 table: \" + str(platform))\r\n                ruleResource.setDatapointMap(\"ownerDeviceMap_\" + str(platform), DatapointMap())\r\n                ruleResource.setDatapointMap(\"alarmKeyMap_\" + str(platform), DatapointMap())\r\n                ruleResource.setDatapointMap(\"alarmSevLevelMap_\" + str(platform), DatapointMap())\r\n                ruleResource.setDatapointMap(\"alarmChannel_\" + str(platform), DatapointMap())\r\n                ruleResource.setDatapointMap(\"alarmModtimeMap_\" + str(platform), DatapointMap())\r\n                ruleResource.setDatapointMap(\"alarmEndModtimeMap_\" + str(platform), DatapointMap())\r\n                ruleResource.setDatapointMap(\"alarmDuration_\" + str(platform), DatapointMap())\r\n                ruleResource.putVar(\"ownerDeviceMap_\" + str(platform), DatapointMap())\r\n                ruleResource.putVar(\"alarmKeyMap_\" + str(platform), DatapointMap())\r\n                ruleResource.putVar(\"alarmSevLevelMap_\" + str(platform), DatapointMap())\r\n                ruleResource.putVar(\"alarmChannel_\" + str(platform), DatapointMap())\r\n                ruleResource.putVar(\"alarmModtimeMap_\" + str(platform), DatapointMap())\r\n                ruleResource.putVar(\"alarmEndModtimeMap_\" + str(platform), DatapointMap())\r\n                ruleResource.putVar(\"alarmDuration_\" + str(platform), DatapointMap())\r\n\r\n                ruleResource.getLogger().debug(\"Clearing historical table: \" + str(platform))\r\n                ruleResource.setDatapointMap(\"histOwnerDeviceMap_\" + str(platform), DatapointMap())\r\n                ruleResource.setDatapointMap(\"histAlarmKeyMap_\" + str(platform), DatapointMap())\r\n                ruleResource.setDatapointMap(\"histAlarmSevLevelMap_\" + str(platform), DatapointMap())\r\n                ruleResource.setDatapointMap(\"histChannel_\" + str(platform), DatapointMap())\r\n                ruleResource.setDatapointMap(\"histAlarmModtimeMap_\" + str(platform), DatapointMap())\r\n                ruleResource.setDatapointMap(\"histAlarmEndModtimeMap_\" + str(platform), DatapointMap())\r\n                ruleResource.setDatapointMap(\"histAlarmDuration_\" + str(platform), DatapointMap())\r\n                ruleResource.setDatapointMap(\"histOwner_\" + str(platform), DatapointMap())\r\n                ruleResource.putVar(\"histOwnerDeviceMap_\" + str(platform), DatapointMap())\r\n                ruleResource.putVar(\"histAlarmKeyMap_\" + str(platform), DatapointMap())\r\n                ruleResource.putVar(\"histAlarmSevLevelMap_\" + str(platform), DatapointMap())\r\n                ruleResource.putVar(\"histAlarmChannel_\" + str(platform), DatapointMap())\r\n                ruleResource.putVar(\"histAlarmModtimeMap_\" + str(platform), DatapointMap())\r\n                ruleResource.putVar(\"histAlarmEndModtimeMap_\" + str(platform), DatapointMap())\r\n                ruleResource.putVar(\"histAlarmDuration_\" + str(platform), DatapointMap())\r\n                ruleResource.putVar(\"histOwner_\" + str(platform), DatapointMap())\r\n\r\n                ruleResource.sendInstructionResponse(\r\n                    InstructionResponse(ruleResource, instruction, InstructionResponse.DEFAULT_GOOD_RC,\r\n                                        InstructionResponse.DEFAULT_GOOD_RESPONSE))\r\n                bHandled \u003d True\r\n\r\n            elif instruction.getKey() \u003d\u003d \"clearAllTables\":\r\n\r\n                for platform in self.PLATFORMS:\r\n                    ruleResource.getLogger().debug(\"Clearing last 20 table: \" + str(platform))\r\n                    ruleResource.setDatapointMap(\"ownerDeviceMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.setDatapointMap(\"alarmKeyMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.setDatapointMap(\"alarmSevLevelMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.setDatapointMap(\"alarmChannel_\" + str(platform), DatapointMap())\r\n                    ruleResource.setDatapointMap(\"alarmModtimeMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.setDatapointMap(\"alarmEndModtimeMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.setDatapointMap(\"alarmDuration_\" + str(platform), DatapointMap())\r\n                    ruleResource.putVar(\"ownerDeviceMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.putVar(\"alarmKeyMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.putVar(\"alarmSevLevelMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.putVar(\"alarmChannel_\" + str(platform), DatapointMap())\r\n                    ruleResource.putVar(\"alarmModtimeMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.putVar(\"alarmEndModtimeMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.putVar(\"alarmDuration_\" + str(platform), DatapointMap())\r\n\r\n                    ruleResource.getLogger().debug(\"Clearing historical table: \" + str(platform))\r\n                    ruleResource.setDatapointMap(\"histOwnerDeviceMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.setDatapointMap(\"histAlarmKeyMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.setDatapointMap(\"histAlarmSevLevelMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.setDatapointMap(\"histChannel_\" + str(platform), DatapointMap())\r\n                    ruleResource.setDatapointMap(\"histAlarmModtimeMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.setDatapointMap(\"histAlarmEndModtimeMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.setDatapointMap(\"histAlarmDuration_\" + str(platform), DatapointMap())\r\n                    ruleResource.setDatapointMap(\"histOwner_\" + str(platform), DatapointMap())\r\n                    ruleResource.putVar(\"histOwnerDeviceMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.putVar(\"histAlarmKeyMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.putVar(\"histAlarmSevLevelMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.putVar(\"histAlarmChannel_\" + str(platform), DatapointMap())\r\n                    ruleResource.putVar(\"histAlarmModtimeMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.putVar(\"histAlarmEndModtimeMap_\" + str(platform), DatapointMap())\r\n                    ruleResource.putVar(\"histAlarmDuration_\" + str(platform), DatapointMap())\r\n                    ruleResource.putVar(\"histOwner_\" + str(platform), DatapointMap())\r\n\r\n                ruleResource.sendInstructionResponse(\r\n                    InstructionResponse(ruleResource, instruction, InstructionResponse.DEFAULT_GOOD_RC,\r\n                                        InstructionResponse.DEFAULT_GOOD_RESPONSE))\r\n                bHandled \u003d True\r\n\r\n            elif instruction.isDatapointKeyParm(\"serviceHistoryMinutes\"):\r\n                historyParm \u003d instruction.getDatapointKeyParm()\r\n                historyVal \u003d historyParm.getValueAsString()\r\n                ruleResource.setDatapoint(\"serviceHistoryMinutes\", historyVal)\r\n                ruleResource.sendInstructionResponse(\r\n                    InstructionResponse(ruleResource, instruction, InstructionResponse.DEFAULT_GOOD_RC,\r\n                                        InstructionResponse.DEFAULT_GOOD_RESPONSE))\r\n                bHandled \u003d True\r\n\r\n            elif instruction.isDatapointKeyParm(\"alarmHistoryMinutes\"):\r\n                historyParm \u003d instruction.getDatapointKeyParm()\r\n                historyVal \u003d historyParm.getValueAsString()\r\n                ruleResource.setDatapoint(\"alarmHistoryMinutes\", historyVal)\r\n                ruleResource.sendInstructionResponse(\r\n                    InstructionResponse(ruleResource, instruction, InstructionResponse.DEFAULT_GOOD_RC,\r\n                                        InstructionResponse.DEFAULT_GOOD_RESPONSE))\r\n                bHandled \u003d True\r\n            elif instruction.isDatapointKeyParm(\"maxHist\"):\r\n                historyParm \u003d instruction.getDatapointKeyParm()\r\n                historyVal \u003d historyParm.getValueAsString()\r\n                ruleResource.setDatapoint(\"maxHist\", historyVal)\r\n                ruleResource.sendInstructionResponse(\r\n                    InstructionResponse(ruleResource, instruction, InstructionResponse.DEFAULT_GOOD_RC,\r\n                                        InstructionResponse.DEFAULT_GOOD_RESPONSE))\r\n                bHandled \u003d True\r\n\r\n            elif instruction.getKey() \u003d\u003d \"removeAllFromRecentlyAlarmed\":\r\n                self.removeAllServicesFromRecentlyAlarmed(ruleResource)\r\n                ruleResource.sendInstructionResponse(\r\n                    InstructionResponse(ruleResource, instruction, InstructionResponse.DEFAULT_GOOD_RC,\r\n                                        InstructionResponse.DEFAULT_GOOD_RESPONSE))\r\n                bHandled \u003d True\r\n\r\n            elif instruction.getKey() \u003d\u003d \"fixBrokenRows\":\r\n                platformType \u003d instruction.getParmValueAsString(\"platformType\", None)\r\n                if platformType:\r\n                    self.fixBrokenRows(ruleResource, platformType)\r\n                    ruleResource.sendInstructionResponse(\r\n                        InstructionResponse(ruleResource, instruction, InstructionResponse.DEFAULT_GOOD_RC,\r\n                                            InstructionResponse.DEFAULT_GOOD_RESPONSE))\r\n                    bHandled \u003d True\r\n                else:\r\n                    ruleResource.sendInstructionResponse(\r\n                        InstructionResponse(ruleResource, instruction, InstructionResponse.DEFAULT_BAD_RC,\r\n                                            \"Invalid parameter provided\"))\r\n\r\n        if not bHandled:\r\n            return BaseRule.runInstruction(self, instruction, ruleResource)\r\n\r\n    def addServiceToRecentlyAlarmed(self, resource, svc, svcProps):\r\n        from java.util import UUID\r\n        resource.getLogger().debug(\"Adding service in recently alarmed: \" + str(svc))\r\n\r\n        # TODO: A better way to do this?\r\n        allSvcs \u003d DBHelper.getInstance().runGenericConfigQuery(\"ManagedService\")\r\n        for currSvc in allSvcs:\r\n\r\n            tempSvcProps \u003d currSvc.getExtraProperties()\r\n            if \"serviceGroup\" not in tempSvcProps:\r\n                continue\r\n            if tempSvcProps[\"serviceGroup\"] \u003d\u003d self.RECENT_ALM_GRP and currSvc.name().strip() \u003d\u003d svc.name():\r\n                resource.getLogger().debug(\"Service already alarmed recently, not reading to list\")\r\n                return\r\n\r\n        resource.getLogger().trace(\"Adding service with properties: \" + str(svcProps))\r\n\r\n        svc2 \u003d JManagedService.create(UUID.randomUUID(), svc.key() + \" \", svc.name() + \" \", svc.desc(),\r\n                                      svc.srcPortUuid(),\r\n                                      True, None, svcProps)\r\n\r\n        err \u003d self.utils.requestObjectESBQueue(resource, svc2,\r\n                                               \"serviceManagement\",\r\n                                               SMConstants.MSGTYPE_ADD_SERVICE)\r\n\r\n        if err is not None:\r\n            resource.getLogger().error(\"Updating service failed: \" + str(err))\r\n\r\n        resource.getLogger().trace(\"Added service to recent alarms: %s\" % svc.name())\r\n\r\n    def removeServiceFromRecentlyAlarmed(self, resource, svc):\r\n\r\n        resource.getLogger().debug(\"Attempting to delete service: %s\" % svc.name())\r\n\r\n        allSvcs \u003d DBHelper.getInstance().runGenericConfigQuery(\"ManagedService\")\r\n        svcToRemove \u003d None\r\n        for currSvc in allSvcs:\r\n            svcProps \u003d currSvc.getExtraProperties()\r\n            resource.getLogger().debug(\"Processing service %s with props %s\" % (currSvc.name(), svcProps))\r\n            if \"serviceGroup\" not in svcProps:\r\n                continue\r\n            resource.getLogger().debug(\"serviceGroup in svcProps\")\r\n            if svcProps[\"serviceGroup\"] \u003d\u003d self.RECENT_ALM_GRP and currSvc.name() \u003d\u003d svc.name():\r\n                resource.getLogger().debug(\"Found service to remove: %s\" % currSvc.name())\r\n                svcToRemove \u003d currSvc\r\n                break\r\n\r\n        if svcToRemove is None:\r\n            resource.getLogger().error(\r\n                \"Unable to find service to delete that matches existing service: %s\" % svc.name())\r\n            return\r\n\r\n        self.utils.sendObjectMessageToESBQueue(resource, RMConstants.MSGTYPE_DEL_DEFINITION,\r\n                                               self.utils.toJSON(svcToRemove),\r\n                                               \"dbinsert\")\r\n        self.utils.sendObjectMessageToESBTopic(resource, RMConstants.MSGTYPE_DEL_DEFINITION,\r\n                                               self.utils.toJSON(svcToRemove),\r\n                                               \"system\")\r\n\r\n        resource.getLogger().trace(\"Removed service from recent alarms: %s\" % svcToRemove.name())\r\n\r\n    def removeAllServicesFromRecentlyAlarmed(self, resource):\r\n\r\n        allSvcs \u003d DBHelper.getInstance().runGenericConfigQuery(\"ManagedService\")\r\n        for currSvc in allSvcs:\r\n            svcProps \u003d currSvc.getExtraProperties()\r\n            resource.getLogger().debug(\"Processing service %s with props %s\" % (currSvc.name(), svcProps))\r\n            if \"serviceGroup\" not in svcProps:\r\n                continue\r\n\r\n            if svcProps[\"serviceGroup\"] \u003d\u003d self.RECENT_ALM_GRP:\r\n                resource.getLogger().debug(\"Found service to remove: %s\" % currSvc.name())\r\n\r\n                self.utils.sendObjectMessageToESBQueue(resource, RMConstants.MSGTYPE_DEL_DEFINITION,\r\n                                                       self.utils.toJSON(currSvc),\r\n                                                       \"dbinsert\")\r\n                self.utils.sendObjectMessageToESBTopic(resource, RMConstants.MSGTYPE_DEL_DEFINITION,\r\n                                                       self.utils.toJSON(currSvc),\r\n                                                       \"system\")\r\n\r\n                resource.getLogger().trace(\"Removed service from recent alarms: %s\" % currSvc.name())\r\n\r\n    def clearAlarmFromTable(self, resource, platformType, entryKey, modTime_tstamp, alarmLogtime, isHist\u003dFalse):\r\n\r\n        prefix \u003d \"histA\" if isHist else \"a\"\r\n        alarmModtimeMap \u003d resource.getDatapointMap(prefix + \"larmModtimeMap_\" + str(platformType))\r\n        alarmModtimeMapBuffer \u003d resource.getVar(prefix + \"larmModtimeMap_\" + str(platformType))\r\n        alarmModtimeMap.putAll(alarmModtimeMapBuffer)\r\n        alarmEndTypeMapBuffer \u003d resource.getVar(prefix + \"larmEndModtimeMap_\" + str(platformType))\r\n        alarmDurationMapBuffer \u003d resource.getVar(prefix + \"larmDuration_\" + str(platformType))\r\n        alarmSevLevelMapBuffer \u003d resource.getVar(prefix + \"larmSevLevelMap_\" + str(platformType))\r\n\r\n        # Added 4/10/19 by Adam Hayes\r\n        # changed the findOpenEntry to use hist Maps instead of current maps,\r\n        # hist has more entries, so need to make sure this won\u0027t try to insert\r\n        # data where none exists\r\n        if alarmModtimeMap.get(entryKey) is not None:\r\n            startAlarmTime \u003d str(alarmModtimeMap.get(entryKey).getValue())\r\n\r\n            alarmDuration \u003d alarmLogtime - self.utils.utilStringToModtime(startAlarmTime, \u0027%Y-%m-%d %H:%M:%S\u0027)\r\n            alarmDuration \u003d alarmDuration / 1000 /60   # duration in seconds\r\n            alarmEndTypeMapBuffer.put(entryKey, Datapoint(modTime_tstamp))\r\n            alarmDurationMapBuffer.put(entryKey, Datapoint(str(alarmDuration)))\r\n\r\n            alarmValDp \u003d Datapoint(self.SEV_HTML_MAP[\"CLEAR\"])\r\n            alarmValDp.setAttribute(Fault.ATTRIB_NAME, Fault.CLEAR)\r\n\r\n            alarmSevLevelMapBuffer.put(entryKey, alarmValDp)\r\n\r\n            resource.putVar(prefix + \"larmEndModtimeMap_\" + str(platformType), alarmEndTypeMapBuffer)\r\n            resource.putVar(prefix + \"larmDuration_\" + str(platformType), alarmDurationMapBuffer)\r\n            resource.putVar(prefix + \"larmSevLevelMap_\" + str(platformType), alarmSevLevelMapBuffer)\r\n        else:\r\n            resource.getLogger().debug(\"No alarm entry found for key %s in tables for %s\" % (str(entryKey), prefix + \"larm\"))\r\n\r\n    def findOldestAlarmEntry(self, timeMap):\r\n\r\n        alarmModtimeMap \u003d timeMap\r\n\r\n        if alarmModtimeMap is None or len(alarmModtimeMap) \u003c 1:\r\n            return None\r\n\r\n        oldestKey \u003d None\r\n        oldestTime \u003d None\r\n        for key in alarmModtimeMap:\r\n            startAlarmTimeString \u003d str(alarmModtimeMap.get(key).getValue())\r\n            startAlarmTime \u003d self.utils.utilStringToModtime(startAlarmTimeString, \u0027%Y-%m-%d %H:%M:%S\u0027)\r\n\r\n            if oldestKey is None:\r\n                oldestKey \u003d key\r\n                oldestTime \u003d startAlarmTime\r\n                continue\r\n\r\n            if startAlarmTime \u003c oldestTime:\r\n                oldestKey \u003d key\r\n                oldestTime \u003d startAlarmTime\r\n\r\n        return oldestKey\r\n\r\n    def findOldestHistEntry(self, resource, platformType):\r\n\r\n        alarmModtimeMap \u003d resource.getDatapointMap(\"histOwnerDeviceMap_\" + str(platformType))\r\n        alarmModtimeMap.putAll(resource.getVar(\"histOwnerDeviceMap_\" + str(platformType)))\r\n\r\n        if alarmModtimeMap is None or len(alarmModtimeMap) \u003c 1:\r\n            return None\r\n\r\n        oldestKey \u003d None\r\n        oldestTime \u003d None\r\n        for key in alarmModtimeMap:\r\n            startAlarmTimeString \u003d key\r\n            startAlarmTime \u003d self.utils.utilStringToModtime(startAlarmTimeString, \u0027%Y-%m-%d %H:%M:%S\u0027)\r\n\r\n            if oldestKey is None:\r\n                oldestKey \u003d key\r\n                oldestTime \u003d startAlarmTime\r\n                continue\r\n\r\n            if startAlarmTime \u003c oldestTime:\r\n                oldestKey \u003d key\r\n                oldestTime \u003d startAlarmTime\r\n\r\n        return oldestKey\r\n\r\n    # added for poll by Adam Hayes 8/17/18\r\n    # This method will run through the tables for each platform and check all active alarms\r\n    # on the specified resource. If the alarm is still active, do nothing, if it cleared it will\r\n    # update the table to match. Thsi should increase the reliability of the table overall.\r\n    def updateActive(self, poll, resource, userdata\u003dNone):\r\n        logger \u003d resource.getLogger()\r\n        logger.info(\"Entering Active Alarms Update\")\r\n        for platformType in self.PLATFORMS:\r\n            logger.debug(\"Handling Platform: \" + str(platformType))\r\n            # grab all the maps from the resource for each platform\r\n            histOwnerDeviceMap \u003d resource.getDatapointMap(\"histOwnerDeviceMap_\" + str(platformType))\r\n            histAlarmKeyMap \u003d resource.getDatapointMap(\"histAlarmKeyMap_\" + str(platformType))\r\n            histAlarmEndModtimeMap \u003d resource.getDatapointMap(\"histAlarmEndModtimeMap_\" + str(platformType))\r\n\r\n            histOwnerDeviceMapBuffer \u003d resource.getVar(\"histOwnerDeviceMap_\" + str(platformType))\r\n            histAlarmKeyMapBuffer \u003d resource.getVar(\"histAlarmKeyMap_\" + str(platformType))\r\n            histAlarmEndModtimeMapBuffer \u003d resource.getVar(\"histAlarmEndModtimeMap_\" + str(platformType))\r\n\r\n            histOwnerDeviceMap.putAll(histOwnerDeviceMapBuffer)\r\n            histAlarmKeyMap.putAll(histAlarmKeyMapBuffer)\r\n            histAlarmEndModtimeMap.putAll(histAlarmEndModtimeMapBuffer)\r\n\r\n            for entryMapKey in histAlarmKeyMap:\r\n                # for each entry in the hist keys\r\n                # check if there is an end mod time\r\n                if histAlarmEndModtimeMap is None or histAlarmEndModtimeMap[entryMapKey] is None or histAlarmEndModtimeMap[\r\n                    entryMapKey].getValueAsString() \u003d\u003d \"\":\r\n\r\n                    logger.debug(\"Entry Map Key: \" + str(entryMapKey) + \" Entry Map Key Value: \" + histAlarmKeyMap[entryMapKey].getValueAsString())\r\n                    alarmKey \u003d histAlarmKeyMap[entryMapKey].getValueAsString()\r\n                    deviceString \u003d histOwnerDeviceMap[entryMapKey].getValueAsString()\r\n                    # logger.debug(\"Device String \u003d \" + str(deviceString))\r\n\r\n                    # matches a uuid exactly. Uuids only use lowercase letters and digits, in the format\r\n                    # 8-4-4-4-12. Potentially edit regex to handle fringe cases, but should not be needed.\r\n                    regex \u003d re.compile(\"[a-z0-9]{8}\"\r\n                                       \"-\"\r\n                                       \"[a-z0-9]{4}\"\r\n                                       \"-\"\r\n                                       \"[a-z0-9]{4}\"\r\n                                       \"-\"\r\n                                       \"[a-z0-9]{4}\"\r\n                                       \"-\"\r\n                                       \"[a-z0-9]{12}\")\r\n\r\n                    deviceUUID \u003d str(regex.findall(deviceString)[0])\r\n                    # logger.debug(\"Uuid from Device String: \" + deviceUUID)\r\n\r\n                    deviceResource \u003d resource.getResourceManager().getResource(deviceUUID)\r\n                    dp \u003d deviceResource.getDatapoint(alarmKey)\r\n                    if dp is not None:\r\n                        # check if dp exists\r\n                        sevAttr \u003d dp.getAttribute(\"sevLevel\")\r\n                        sevLevel \u003d sevAttr.getValue()\r\n                        logger.debug(\"Sev Level: \" + str(sevLevel)) # + \" \\nBig Nasty String: \" + str(dp.getAttribute(\"sevLevel\")))\r\n                        logger.debug(\"If sevLevel \u003d\u003d 0: \" + str(sevLevel \u003d\u003d 0) + \" Sevlevel \u003d\u003d \u00270\u0027:\" + str(sevLevel \u003d\u003d \u00270\u0027))\r\n                        if sevLevel \u003d\u003d \u00270\u0027:\r\n                            # Clear alarm from table with the mod time that the dp changed to clear\r\n                            logger.debug(\"Clearing alarm: \" + alarmKey)\r\n                            alarmLogtime \u003d sevAttr.getModTime()\r\n                            modTime_tstamp \u003d self.utils.utilModtimeToString(alarmLogtime)\r\n\r\n                            # clear alarm on both hist and active table\r\n                            # self.clearAlarmFromTable(resource, platformType, entryMapKey, modTime_tstamp, alarmLogtime, False)\r\n                            self.clearAlarmFromTable(resource, platformType, entryMapKey, modTime_tstamp, alarmLogtime, True)\r\n\r\n                            logger.debug(\"Cleared Alarm: \" + alarmKey)\r\n\r\n        logger.info(\"Finished Active Alarms Update\")\r\n\r\n    # we have issues with some of the maps getting out of sync\r\n\r\n    def fixBrokenRows(self, resource, platformType):\r\n        logger \u003d resource.getLogger()\r\n\r\n        logger.info(\"Entered Fix Broken Rows\")\r\n\r\n        dpMapsCurrent \u003d {}\r\n        dpMapsHistorical \u003d {}\r\n\r\n        if platformType in self.PLATFORMS:\r\n            dpMapsCurrent[\"ownerDeviceMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"ownerDeviceMap_\" + str(platformType))\r\n            dpMapsCurrent[\"alarmKeyMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"alarmKeyMap_\" + str(platformType))\r\n            dpMapsCurrent[\"alarmModtimeMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"alarmModtimeMap_\" + str(platformType))\r\n            dpMapsCurrent[\"alarmEndModtimeMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"alarmEndModtimeMap_\" + str(platformType))\r\n            dpMapsCurrent[\"alarmDuration_\" + str(platformType)] \u003d resource.getDatapointMap(\"alarmDuration_\" + str(platformType))\r\n            dpMapsCurrent[\"alarmSevLevelMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"alarmSevLevelMap_\" + str(platformType))\r\n            dpMapsCurrent[\"alarmChannel_\" + str(platformType)] \u003d resource.getDatapointMap(\"alarmChannel_\" + str(platformType))\r\n            ownerDeviceMapBuffer \u003d resource.getVar(\"ownerDeviceMap_\" + str(platformType))\r\n            alarmKeyMapBuffer \u003d resource.getVar(\"alarmKeyMap_\" + str(platformType))\r\n            alarmModtimeMapBuffer \u003d resource.getVar(\"alarmModtimeMap_\" + str(platformType))\r\n            alarmEndModtimeMapBuffer \u003d resource.getVar(\"alarmEndModtimeMap_\" + str(platformType))\r\n            alarmDurationBuffer \u003d resource.getVar(\"alarmDuration_\" + str(platformType))\r\n            alarmSevLevelMapBuffer \u003d resource.getVar(\"alarmSevLevelMap_\" + str(platformType))\r\n            alarmChannelBuffer \u003d resource.getVar(\"alarmChannel_\" + str(platformType))\r\n            dpMapsCurrent[\"ownerDeviceMap_\" + str(platformType)].putAll(ownerDeviceMapBuffer)\r\n            dpMapsCurrent[\"alarmKeyMap_\" + str(platformType)].putAll(alarmKeyMapBuffer)\r\n            dpMapsCurrent[\"alarmModtimeMap_\" + str(platformType)].putAll(alarmModtimeMapBuffer)\r\n            dpMapsCurrent[\"alarmEndModtimeMap_\" + str(platformType)].putAll(alarmEndModtimeMapBuffer)\r\n            dpMapsCurrent[\"alarmDuration_\" + str(platformType)].putAll(alarmDurationBuffer)\r\n            dpMapsCurrent[\"alarmSevLevelMap_\" + str(platformType)].putAll(alarmSevLevelMapBuffer)\r\n            dpMapsCurrent[\"alarmChannel_\" + str(platformType)].putAll(alarmChannelBuffer)\r\n\r\n            dpMapsHistorical[\"histOwnerDeviceMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"histOwnerDeviceMap_\" + str(platformType))\r\n            dpMapsHistorical[\"histAlarmKeyMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"histAlarmKeyMap_\" + str(platformType))\r\n            dpMapsHistorical[\"histAlarmModtimeMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"histAlarmModtimeMap_\" + str(platformType))\r\n            dpMapsHistorical[\"histAlarmEndModtimeMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"histAlarmEndModtimeMap_\" + str(platformType))\r\n            dpMapsHistorical[\"histAlarmDuration_\" + str(platformType)] \u003d resource.getDatapointMap(\"histAlarmDuration_\" + str(platformType))\r\n            dpMapsHistorical[\"histAlarmSevLevelMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"histAlarmSevLevelMap_\" + str(platformType))\r\n            dpMapsHistorical[\"histChannel_\" + str(platformType)] \u003d resource.getDatapointMap(\"histChannel_\" + str(platformType))\r\n            dpMapsHistorical[\"histOwner_\" + str(platformType)] \u003d resource.getDatapointMap(\"histOwner_\" + str(platformType))\r\n            histOwnerDeviceMapBuffer \u003d resource.getVar(\"histOwnerDeviceMap_\" + str(platformType))\r\n            histAlarmKeyMapBuffer \u003d resource.getVar(\"histAlarmKeyMap_\" + str(platformType))\r\n            histAlarmModtimeMapBuffer \u003d resource.getVar(\"histAlarmModtimeMap_\" + str(platformType))\r\n            histAlarmEndModtimeMapBuffer \u003d resource.getVar(\"histAlarmEndModtimeMap_\" + str(platformType))\r\n            histAlarmDurationBuffer \u003d resource.getVar(\"histAlarmDuration_\" + str(platformType))\r\n            histAlarmSevLevelMapBuffer \u003d resource.getVar(\"histAlarmSevLevelMap_\" + str(platformType))\r\n            histAlarmChannelBuffer \u003d resource.getVar(\"histAlarmChannel_\" + str(platformType))\r\n            histOwnerBuffer \u003d resource.getVar(\"histOwner_\" + str(platformType))\r\n            dpMapsHistorical[\"histOwnerDeviceMap_\" + str(platformType)].putAll(histOwnerDeviceMapBuffer)\r\n            dpMapsHistorical[\"histAlarmKeyMap_\" + str(platformType)].putAll(histAlarmKeyMapBuffer)\r\n            dpMapsHistorical[\"histAlarmModtimeMap_\" + str(platformType)].putAll(histAlarmModtimeMapBuffer)\r\n            dpMapsHistorical[\"histAlarmEndModtimeMap_\" + str(platformType)].putAll(histAlarmEndModtimeMapBuffer)\r\n            dpMapsHistorical[\"histAlarmDuration_\" + str(platformType)].putAll(histAlarmDurationBuffer)\r\n            dpMapsHistorical[\"histAlarmSevLevelMap_\" + str(platformType)].putAll(histAlarmSevLevelMapBuffer)\r\n            dpMapsHistorical[\"histOwner_\" + str(platformType)].putAll(histOwnerBuffer)\r\n            dpMapsHistorical[\"histChannel_\" + str(platformType)].putAll(histAlarmChannelBuffer)\r\n\r\n            logger.debug(\"Got datapoint maps for platform\")\r\n\r\n            # TODO: Check the keys and delete rows that are not keys in the KeyMap\r\n            # then go through and delete rows are in Key Map but are not in other maps\r\n\r\n            delKeysCurrent \u003d []\r\n            delKeysHistorical \u003d []\r\n\r\n            # -------------------- #\r\n            # LAST 20 ALARM FIXING #\r\n            # -------------------- #\r\n            for dpMap in dpMapsCurrent:\r\n\r\n                for key in dpMapsCurrent[dpMap]:\r\n\r\n                    for iterMap in dpMapsCurrent:\r\n                        if iterMap \u003d\u003d dpMap:\r\n                            continue\r\n\r\n                        currentMap \u003d dpMapsCurrent[iterMap]\r\n                        if currentMap.getOrDefault(key, \"Returned Blank\") \u003d\u003d \"Returned Blank\" and key not in delKeysCurrent:\r\n                            logger.debug(\"Queuing key: %s for deletion\" % str(key))\r\n                            delKeysCurrent.append(key)\r\n\r\n            for key in delKeysCurrent:\r\n                for dpMap in dpMapsCurrent:\r\n                    dpMapsCurrent[dpMap].remove(key)\r\n\r\n            if len(delKeysCurrent) \u003e 0:\r\n                for dpMap in dpMapsCurrent:\r\n                    resource.setDatapointMap(dpMap, dpMapsCurrent[dpMap])\r\n\r\n            # --------------------- #\r\n            # HISTORICAL MAP FIXING #\r\n            # --------------------- #\r\n            for dpMap in dpMapsHistorical:\r\n                # loop through the maps and cross check the entries with the other maps\r\n                for key in dpMapsHistorical[dpMap]:\r\n\r\n                    for iterMap in dpMapsHistorical:\r\n                        if iterMap \u003d\u003d dpMap:\r\n                            continue\r\n\r\n                        currentMap \u003d dpMapsHistorical[iterMap]\r\n                        if currentMap.getOrDefault(key, \"Returned Blank\") \u003d\u003d \"Returned Blank\" and key not in delKeysHistorical:\r\n                            logger.debug(\"Queuing key: %s for deletion\" % str(key))\r\n                            delKeysHistorical.append(key)\r\n\r\n            for key in delKeysHistorical:\r\n                for dpMap in dpMapsHistorical:\r\n                    dpMapsHistorical[dpMap].remove(key)\r\n\r\n            if len(delKeysHistorical) \u003e 0:\r\n                for dpMap in dpMapsHistorical:\r\n                    resource.setDatapointMap(dpMap, dpMapsHistorical[dpMap])\r\n\r\n        logger.info(\"Exiting Fix Broken Rows\")\r\n\r\n    def checkFixTableRows(self, poll, resource, userdata\u003dNone):\r\n        logger \u003d resource.getLogger()\r\n\r\n        logger.info(\"Entered Check Fix Broken Rows Poll\")\r\n\r\n\r\n\r\n        for platformType in self.PLATFORMS:\r\n            dpMapsCurrent \u003d {}\r\n            dpMapsHistorical \u003d {}\r\n\r\n            dpMapsCurrent[\"ownerDeviceMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"ownerDeviceMap_\" + str(platformType))\r\n            dpMapsCurrent[\"alarmKeyMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"alarmKeyMap_\" + str(platformType))\r\n            dpMapsCurrent[\"alarmModtimeMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"alarmModtimeMap_\" + str(platformType))\r\n            dpMapsCurrent[\"alarmEndModtimeMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"alarmEndModtimeMap_\" + str(platformType))\r\n            dpMapsCurrent[\"alarmDuration_\" + str(platformType)] \u003d resource.getDatapointMap(\"alarmDuration_\" + str(platformType))\r\n            dpMapsCurrent[\"alarmSevLevelMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"alarmSevLevelMap_\" + str(platformType))\r\n            dpMapsCurrent[\"alarmChannel_\" + str(platformType)] \u003d resource.getDatapointMap(\"alarmChannel_\" + str(platformType))\r\n            ownerDeviceMapBuffer \u003d resource.getVar(\"ownerDeviceMap_\" + str(platformType))\r\n            alarmKeyMapBuffer \u003d resource.getVar(\"alarmKeyMap_\" + str(platformType))\r\n            alarmModtimeMapBuffer \u003d resource.getVar(\"alarmModtimeMap_\" + str(platformType))\r\n            alarmEndModtimeMapBuffer \u003d resource.getVar(\"alarmEndModtimeMap_\" + str(platformType))\r\n            alarmDurationBuffer \u003d resource.getVar(\"alarmDuration_\" + str(platformType))\r\n            alarmSevLevelMapBuffer \u003d resource.getVar(\"alarmSevLevelMap_\" + str(platformType))\r\n            alarmChannelBuffer \u003d resource.getVar(\"alarmChannel_\" + str(platformType))\r\n            dpMapsCurrent[\"ownerDeviceMap_\" + str(platformType)].putAll(ownerDeviceMapBuffer)\r\n            dpMapsCurrent[\"alarmKeyMap_\" + str(platformType)].putAll(alarmKeyMapBuffer)\r\n            dpMapsCurrent[\"alarmModtimeMap_\" + str(platformType)].putAll(alarmModtimeMapBuffer)\r\n            dpMapsCurrent[\"alarmEndModtimeMap_\" + str(platformType)].putAll(alarmEndModtimeMapBuffer)\r\n            dpMapsCurrent[\"alarmDuration_\" + str(platformType)].putAll(alarmDurationBuffer)\r\n            dpMapsCurrent[\"alarmSevLevelMap_\" + str(platformType)].putAll(alarmSevLevelMapBuffer)\r\n            dpMapsCurrent[\"alarmChannel_\" + str(platformType)].putAll(alarmChannelBuffer)\r\n\r\n            dpMapsHistorical[\"histOwnerDeviceMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"histOwnerDeviceMap_\" + str(platformType))\r\n            dpMapsHistorical[\"histAlarmKeyMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"histAlarmKeyMap_\" + str(platformType))\r\n            dpMapsHistorical[\"histAlarmModtimeMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"histAlarmModtimeMap_\" + str(platformType))\r\n            dpMapsHistorical[\"histAlarmEndModtimeMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"histAlarmEndModtimeMap_\" + str(platformType))\r\n            dpMapsHistorical[\"histAlarmDuration_\" + str(platformType)] \u003d resource.getDatapointMap(\"histAlarmDuration_\" + str(platformType))\r\n            dpMapsHistorical[\"histAlarmSevLevelMap_\" + str(platformType)] \u003d resource.getDatapointMap(\"histAlarmSevLevelMap_\" + str(platformType))\r\n            dpMapsHistorical[\"histChannel_\" + str(platformType)] \u003d resource.getDatapointMap(\"histChannel_\" + str(platformType))\r\n            dpMapsHistorical[\"histOwner_\" + str(platformType)] \u003d resource.getDatapointMap(\"histOwner_\" + str(platformType))\r\n            histOwnerDeviceMapBuffer \u003d resource.getVar(\"histOwnerDeviceMap_\" + str(platformType))\r\n            histAlarmKeyMapBuffer \u003d resource.getVar(\"histAlarmKeyMap_\" + str(platformType))\r\n            histAlarmModtimeMapBuffer \u003d resource.getVar(\"histAlarmModtimeMap_\" + str(platformType))\r\n            histAlarmEndModtimeMapBuffer \u003d resource.getVar(\"histAlarmEndModtimeMap_\" + str(platformType))\r\n            histAlarmDurationBuffer \u003d resource.getVar(\"histAlarmDuration_\" + str(platformType))\r\n            histAlarmSevLevelMapBuffer \u003d resource.getVar(\"histAlarmSevLevelMap_\" + str(platformType))\r\n            histAlarmChannelBuffer \u003d resource.getVar(\"histAlarmChannel_\" + str(platformType))\r\n            histOwnerBuffer \u003d resource.getVar(\"histOwner_\" + str(platformType))\r\n            dpMapsHistorical[\"histOwnerDeviceMap_\" + str(platformType)].putAll(histOwnerDeviceMapBuffer)\r\n            dpMapsHistorical[\"histAlarmKeyMap_\" + str(platformType)].putAll(histAlarmKeyMapBuffer)\r\n            dpMapsHistorical[\"histAlarmModtimeMap_\" + str(platformType)].putAll(histAlarmModtimeMapBuffer)\r\n            dpMapsHistorical[\"histAlarmEndModtimeMap_\" + str(platformType)].putAll(histAlarmEndModtimeMapBuffer)\r\n            dpMapsHistorical[\"histAlarmDuration_\" + str(platformType)].putAll(histAlarmDurationBuffer)\r\n            dpMapsHistorical[\"histAlarmSevLevelMap_\" + str(platformType)].putAll(histAlarmSevLevelMapBuffer)\r\n            dpMapsHistorical[\"histOwner_\" + str(platformType)].putAll(histOwnerBuffer)\r\n            dpMapsHistorical[\"histChannel_\" + str(platformType)].putAll(histAlarmChannelBuffer)\r\n\r\n            logger.debug(\"Got datapoint maps for platform %s\" % str(platformType))\r\n\r\n            # TODO: Check the keys and delete rows that are not keys in the KeyMap\r\n            # then go through and delete rows are in Key Map but are not in other maps\r\n\r\n            delKeysCurrent \u003d []\r\n            delKeysHistorical \u003d []\r\n\r\n            # -------------------- #\r\n            # LAST 20 ALARM FIXING #\r\n            # -------------------- #\r\n            for dpMap in dpMapsCurrent:\r\n\r\n                for key in dpMapsCurrent[dpMap]:\r\n\r\n                    for iterMap in dpMapsCurrent:\r\n                        if iterMap \u003d\u003d dpMap:\r\n                            continue\r\n\r\n                        currentMap \u003d dpMapsCurrent[iterMap]\r\n                        if currentMap.getOrDefault(key, \"Returned Blank\") \u003d\u003d \"Returned Blank\" and key not in delKeysCurrent:\r\n                            logger.debug(\"Queuing key: %s for deletion\" % str(key))\r\n                            delKeysCurrent.append(key)\r\n\r\n            for key in delKeysCurrent:\r\n                for dpMap in dpMapsCurrent:\r\n                    dpMapsCurrent[dpMap].remove(key)\r\n\r\n            if len(delKeysCurrent) \u003e 0:\r\n                for dpMap in dpMapsCurrent:\r\n                    resource.setDatapointMap(dpMap, dpMapsCurrent[dpMap])\r\n\r\n            # --------------------- #\r\n            # HISTORICAL MAP FIXING #\r\n            # --------------------- #\r\n            for dpMap in dpMapsHistorical:\r\n                # loop through the maps and cross check the entries with the other maps\r\n                for key in dpMapsHistorical[dpMap]:\r\n\r\n                    for iterMap in dpMapsHistorical:\r\n                        if iterMap \u003d\u003d dpMap:\r\n                            continue\r\n\r\n                        currentMap \u003d dpMapsHistorical[iterMap]\r\n                        if currentMap.getOrDefault(key, \"Returned Blank\") \u003d\u003d \"Returned Blank\" and key not in delKeysHistorical:\r\n                            logger.debug(\"Queuing key: %s for deletion\" % str(key))\r\n                            delKeysHistorical.append(key)\r\n\r\n            for key in delKeysHistorical:\r\n                for dpMap in dpMapsHistorical:\r\n                    dpMapsHistorical[dpMap].remove(key)\r\n\r\n            if len(delKeysHistorical) \u003e 0:\r\n                for dpMap in dpMapsHistorical:\r\n                    resource.setDatapointMap(dpMap, dpMapsHistorical[dpMap])\r\n\r\n        logger.info(\"Exiting Check Fix Broken Rows Poll\")\r\n\r\n################################################\r\n# doctest runner\r\n#\r\n# This is for running doctests outside of CAM.\r\n################################################\r\n\r\nif \"skipTests\" not in globals():\r\n    import doctest\r\n\r\n    # doctest.testmod(verbose\u003dTrue)\r\n    doctest.testmod()\r\n","modTime":1554913879386,"sharedModules":{"BaseMonitoredRule":"shared.base.BaseMonitoredRule"},"author":"Suman Mallick","filename":"AlarmLogRule.py","name":"Last X Log rule","desc":"Listens for alarms greater than 0, and then store in database","version":"1.0.0","uuid":"da609455-7e5a-3847-9ef4-b2c56f2ca2ce","key":"AlarmLogRule.py"}}
{"DatapointDef":{"generatorUUID":"dcfb0858-4e93-36f6-ac7e-8bc2c6e7fdd0","key":"Asset/hour Rate","instructionDef":{"uuid":"b5233577-a1c0-47e5-a444-56afd7c27b9c","key":"setDatapoint","dynamicFields":{},"name":"Asset/hour Rater","desc":"Asset/hour Rater","m_properties":{},"parameterDefs":[{"stepSize":1.0,"type":"Number","key":"Asset/hour Rate","defaultValue":"30","minValue":1.0,"name":"Asset/hour Rater","precision":0,"maxValue":60.0}]},"dynamicFields":{},"name":"Asset/hour Rater","uuid":"cff1f505-c181-3931-910f-04b4d72bf1d0","ownerUUID":"dcfb0858-4e93-36f6-ac7e-8bc2c6e7fdd0"}}
{"Clock":{"timezone":"America/Toronto","uuid":"67ec8fef-ebfb-40bb-9576-0671a68bda05","ownerUUID":"483942e9-6767-3aa2-8284-a3de3aee28ab","label":"Toronto"}}
{"AlarmLevelMap":{"ignoreMasks":false,"alarmList":[{"popUp":false,"lvl":"0","audioFile":"assets/sounds/alarm001.mp3","name":"Clear","color":6732650,"playSound":false},{"name":"Minor","color":16771899,"lvl":"1","popUp":true,"audioFile":"assets/sounds/alarm001.mp3","playSound":false},{"popUp":false,"audioFile":"assets/sounds/alarm001.mp3","color":16761095,"name":"Major","playSound":false,"lvl":"2"},{"popUp":false,"color":13840175,"audioFile":"assets/sounds/alarm001.mp3","lvl":"3","playSound":false,"name":"Critical"},{"popUp":false,"lvl":"MAINT","color":7697781,"audioFile":"assets/sounds/alarm001.mp3","playSound":false,"name":"Maintenance"},{"popUp":false,"color":15753874,"audioFile":"assets/sounds/alarm001.mp3","playSound":false,"lvl":"COMM","name":"Communications"},{"popUp":false,"name":"Transport","color":15690752,"audioFile":"assets/sounds/alarm001.mp3","lvl":"TRANSPORT","playSound":false},{"popUp":false,"color":2733814,"name":"Configuration","audioFile":"assets/sounds/alarm001.mp3","playSound":false,"lvl":"CONFIG"}],"uuid":"2812a6e5-5f10-496d-b403-d6ea98ebd66b","ownerUUID":"b55a4765-9bc2-3b14-b30c-b74cfc80632f"}}
{"Resource":{"transportUUID":"408094d3-4499-4a27-a41b-aa381a32bdb8","translatorUUID":"ba3633f1-14ab-3b29-9d15-48afce09365d","uuid":"206e53b3-f838-4cd1-9f98-4c80380ff41a","ownerUUID":"6535dd49-d59e-32e4-a01c-86c9aa9ec29f","dynamicFields":{},"desc":"Fibre Optic Receiver (C05725) (Zeus)","m_properties":{"templateRefId":"CTVTI - DTH::1"},"name":"Fibre Optic Receiver (C05725)","managerUUID":"6535dd49-d59e-32e4-a01c-86c9aa9ec29f"}}
{"BookingTemplate":{"generatorUUID":"80d4e53f-ddc0-43b5-a0ed-9cc2b30a1c4e","desc":"Books one Satellite Receiver device ","managerUUID":"3cfbaeaf-c83f-4b21-8327-2385ea3c58a7","properties":{},"ownerUUID":"71819e00-8e45-46a9-93f2-eea1cd67b261","activationDelaySeconds":0,"translatorUuid":"1047efe5-3038-3663-a08d-e7721a8c80ca","bookingType":"Bell Booking","uuid":"9dfd4656-2972-4ded-bcfe-540e9a69bf7c","requirementChain":[],"key":"bu_Bell_Book_Satellite_Receiver_","nonLinkedRequirements":[{"mustBeAdjacentInChain":true,"requirements":[{"key":"bu_Bell_Satellite_Receiver","capacity":1}],"required":true}],"deactivationDelaySeconds":0,"name":"Bell Book Satellite Receiver ","alternatives":[]}}
{"TransportDef":{"name":"SSH Client","uuid":"dd5d416f-b300-4311-bc45-330e19b64644","managerUuid":"6535dd49-d59e-32e4-a01c-86c9aa9ec29f","version":"1.0.0.0","startInstructionDef":{"key":"start","desc":"Set configuration values and start this transport.","uuid":"b83944c7-9a44-4b69-9b84-c72ad615dfe9","dynamicFields":{},"name":"Set configuration values and start this transport.","parameterDefs":[{"maxLength":0,"minLength":0,"type":"String","name":"Username","defaultValue":"root","key":"Username"},{"isEncrypted":true,"name":"Password","maxLength":0,"minLength":0,"type":"String","key":"Password"},{"key":"IP Address","name":"IP Address","maxLength":0,"minLength":0,"type":"String","defaultValue":"127.0.0.1"},{"maxValue":65535.0,"key":"TCP Port Number","name":"TCP Port Number","type":"Number","desc":"TCP Port Number","defaultValue":"22","precision":0,"minValue":0.0,"stepSize":0.0},{"type":"Number","desc":"Connection Timeout","key":"Connection Timeout","name":"Connection Timeout","precision":0,"stepSize":0.0,"defaultValue":"5000","maxValue":300000.0,"minValue":50.0}],"m_properties":{}},"numSchedulerThreads":1,"author":"Ladd Asper","desc":"This transport uses SSH to exec commands on a remote host.","helpText":""}}
{"PortConnection":{"srcPort":"2888ee30-1680-4516-b861-88c1ed3ed7c2","destPort":"32ec2cf2-91fa-41d0-90c1-2ac6b0329edd","internal":true,"uuid":"000074ad-753a-4631-b7f0-477319e6e285"}}
{"GraphLink":{"m_properties":{"SrcPortName":"r","strokeWidth":"5","portConnectionId":"96ae62c1-12cb-4731-b478-3b5c31e4a0a3","DestPortName":"l","radius":"5","rightPortKey":"left","dashStyle":"none","startArrowVisible":false,"curveSmoothRatio":"0","endArrowVisible":false,"leftPortKey":"right","joints":"round","curved":false},"uuid":"00001f61-35e5-43ca-a8a1-dc2860250978","ownerUUID":"82a30aa5-3dfd-4d0f-9f48-63dcc9099a12","linkTopoId":"Template 223 - IPTV","destUuid":"ab354de6-19ff-4d33-88d7-3d3890222383","srcUuid":"fe25f1bf-2174-47e4-a076-41d84bbdbbf4"}}
{"TakenFeatureTour":{"uuid":"161661b6-b8f3-32cd-b68a-c4e63ec73cb4","tourUuid":"1a658dd1-37e3-49ea-86f7-397a9c8ca335","ownerUUID":"483942e9-6767-3aa2-8284-a3de3aee28ab"}}
{"Port":{"properties":{"PortPosition":"RIGHT"},"name":"r","uuid":"002a2231-3422-4647-bba9-f28dcfed175f","ownerUUID":"5b3ecaf7-807d-470f-9c41-04b91fb43117"}}
{"AttributeDef":{"datapointKey":"building","dynamicFields":{},"ownerUUID":"a168285f-dc28-3e06-8bcb-9b4f30915d3f","entityUUID":"c1c15e0d-184f-4ea9-9ffc-45ab3a754c11","name":"dpCategory1","desc":"Show On Node Select","generatorUUID":"c1c15e0d-184f-4ea9-9ffc-45ab3a754c11","uuid":"00285541-ec4e-30c5-81f9-cf0535c8697c","key":"dpCategory1","managerUUID":"6535dd49-d59e-32e4-a01c-86c9aa9ec29f"}}
{"Transport":{"name":"SNMP Non-Throttled","ownerUUID":"6535dd49-d59e-32e4-a01c-86c9aa9ec29f","dynamicFields":{},"uuid":"d701571f-7210-47c5-b9bb-9a3443e53468","generatorUUID":"458724cf-202e-49c3-9863-0e9c176cc27a","m_properties":{},"version":"2.5.0.0","managerUUID":"6535dd49-d59e-32e4-a01c-86c9aa9ec29f"}}
{"DatapointTableDef":{"columnKeys":["locationName","locationLat","locationLon"],"managerUUID":"6535dd49-d59e-32e4-a01c-86c9aa9ec29f","ownerUUID":"cec3e2a2-700f-4ce2-b36b-46078b508801","removeInstructionDef":{"key":"removeRow","dynamicFields":{},"uuid":"032b3f8e-5cd5-473e-96b4-85d9d87b1db8","desc":"Remove a row","parameterDefs":[{"key":"tableKey","maxLength":0,"minLength":0,"name":"key of the table to edit","type":"String"},{"key":"rowKey","name":"key of the row to remove","maxLength":0,"minLength":0,"type":"String"}],"name":"Remove a row","m_properties":{}},"name":"Location Table","dynamicFields":{},"generatorUUID":"e07ff88e-ba39-3869-b968-0e83895d4a8a","desc":"Location Table","editable":true,"m_properties":{},"key":"locationTable","uuid":"0a08d11a-88cf-39d2-aa7f-b379059e96cd","putInstructionDef":{"key":"putRow","uuid":"aa976724-b6be-42a2-a239-d844ce681a54","dynamicFields":{},"parameterDefs":[{"key":"tableKey","maxLength":0,"minLength":0,"name":"key of the table to edit","type":"String"},{"name":"key of the row to add or edit","key":"rowKey","maxLength":0,"minLength":0,"type":"String"},{"desc":"the row\u0027s cells represented as a map of key/value pairs","jsonMapEntries":{},"name":"the row\u0027s cells represented as a map of key/value pairs","type":"Map","key":"cells"}],"name":"Add or edit a row","m_properties":{},"desc":"Add or edit a row"}}}
{"BookableUnit":{"bookableBlockSize":1,"key":"bu_Bell_Satellite_Receiver","maxCapacity":1,"units":"","bookingTypes":["Bell Booking"],"uuid":"04d2c959-b4f9-4ee2-802c-6fc3e615bae0","desc":"","generatorUUID":"cec3e2a2-700f-4ce2-b36b-46078b508801","ownerUUID":"b64d751a-43be-422f-8e14-ef0d095ff601","name":"Bell Satellite Receiver","managerUUID":"6535dd49-d59e-32e4-a01c-86c9aa9ec29f"}}
{"ManagedService":{"key":"","srcPortUuid":"a14a8bf6-a483-3806-845c-16a6fd7006ba","startsFromNode":true,"uuid":"a6b1d11c-077c-49b9-9b89-1521a68d3fe7","m_extraProperties":{"serviceGroup":"DTH-SD"},"desc":"","name":"STARZ 1 West (SZ1WS) - DTH"}}
{"PermissionGroup":{"uuid":"82991c5c-de82-45b7-b81b-8920c1a264fb","description":"FibeTV VOD","name":"FibeTV VOD","permissions":[{"parts":[["resource"],["read"],["bdff697d-72f3-4539-86bb-f2bcc4dcf067","f722b6b4-b3ac-4832-9561-2042e74696f1","ab2f8235-85d4-4d58-903f-672c1d57cfdb","c4e88c30-3910-4a95-8205-5ec23f3460d9","c5a45f68-fd31-4fb3-9b2f-7b63a5ba8127","1d26c201-e373-4ffc-829c-13b40318f2eb","cfdaf839-1275-4efa-ae9b-1affbe1ea870","ca745ea1-9fd0-4d48-8e29-de752c6103ed","726821c9-fa6c-47f5-b370-2baf9ecbfa4c","d0e32f7d-6778-4e92-988b-a03ea12080be","2c8322f8-ea01-4993-a86c-b15741fcd9f6","bf912483-bff9-4e65-b7a9-8dea5d7bd1b1","09a4bbd6-78e8-4848-aa0f-ebedc364da9b","8ab89c25-3643-4882-a283-cb077f8a7a30","c9fe21a5-600b-4261-af74-f08844be4a7f","aedce90e-099c-42da-b04c-ee1323e999ed","6d4fa158-81db-429c-9c90-b189209dcc8d","283af138-e57b-4792-8b97-661c2358744e","e08aa045-13a7-41b5-a437-b63c5445d069","f45f1f77-37cc-4ea8-91c1-3a71a0baf799","b8a3a377-b6e4-4b1c-a48f-459de9a7c43f","66fc5d88-b427-4427-a03e-95a9eb3b0c12","c0c4997b-1d6b-4c51-a790-01f01664a1ef","ac043ed9-582f-474c-90dd-f7b6520eb57b","70982599-99a1-457c-a74d-765139ae2772","7feb5f8e-d301-431a-8af7-56a186624380","517a4ed5-c621-4839-bff4-b7e90832f5da","6731045c-c482-4913-ba4d-b9227dd3166f","870d335b-5a1d-4940-b98d-7ae9599d1c24","68da03f6-292e-482d-bee5-e6211ba3008d","885383e4-43c7-40ac-8966-eb95782990cf","e16ce03a-1fda-47f2-b549-eb9c9f86f693","72576ef9-30f0-423f-87b0-856a388948ba","0c91bb65-4df0-4054-b0ed-a1ff4cb68545","e13280cf-c3b5-409b-babf-5c7e4d05103f","29cd05eb-d557-48e5-b3ca-80cdb242b22c","56ec4680-9fdb-4637-8839-936b7c414632","b4d4b564-848e-444b-afe6-f77541a748d2","9aa0a453-dfca-454c-9143-69aea041de6b","a1b60ceb-8492-4f1b-bcc2-a80090e8908e","861a6a86-03a9-463d-8bfa-79065799e823","dc88e7e4-71b5-4540-810d-cc021db2b698","70562c52-3d3e-408d-8193-d171429de612","aac12a33-c740-4259-9d0b-7f8aa9560bd0","b7a8d5f2-28d5-4856-a828-009cfeff616d","d4fb9c6e-6bfe-47b9-ba3c-6890be5dfd6e","3c6faaa2-dd16-4607-a601-4fb44800598c","63a2e96c-4b90-46c1-ad53-97537648f558","70ec1bfe-6458-4e76-b2b6-8e65b10b81a6","8c51f9c4-ae50-4153-9684-2747512f7864","7384aa4e-8495-4705-9de5-3b48a5ce10eb","85d090b1-7f48-42b1-ac3f-f5e18df65dea","a700b56e-4155-44b5-84c1-0df6e929f2fe","7c96f5dd-1204-46ae-8b84-671ec7f558d1","9b61c63c-86e0-4693-8c3b-89a3e2fdbccb","8970121e-7aa6-444e-b79f-22b95541953b","bebfe0a7-e0fc-4d82-8ba1-0a1972bdc2c0","9d8603c3-98c6-4384-9fc3-f1b48b332bf7","24a00c8d-9fa2-4083-88b6-7e672c45b6a8","9bdd3f49-4e93-4f83-ac99-d0252b5f1020","a6fba34b-3fe1-4b80-8c89-9b610831b2af","3e92e1f1-924b-4f86-bc5f-06bc614bf174","7d4dc5ef-4deb-48c5-9f06-4c9feafb7f98","6e89b498-1d89-4dc5-9291-c7f397f1a665","1eb198fb-9351-44ce-b8dc-2e5c8fa1fae4","4dcc56c8-021d-45b0-b8d9-48ee3f59cccb","2f2d5c67-ee3b-4283-a999-f51c0ce6feaf","5f549a6a-da36-4746-90a0-da8c5d43a2bd","0dcdf8cb-6b18-4202-b7c9-29b94a431435","238cae27-1524-4753-9c3a-4eb1bc16d0ff","d903fa18-ea03-448d-abca-3d4af0201bb2","7f60a4ad-f01f-4efb-a240-04a92e518a23","467d0bb8-30aa-4952-a058-0369e42c36dd","0af7772a-9e28-4768-84d8-884b37b5e1ed","313c20d6-ef53-4730-80d2-b84999777457","9b80d86d-606a-4293-a2dc-b202612cca85","a981dc0b-50fd-41b8-ba02-b5ec1a57cfaf","277dd7f1-68ef-4617-af32-ecf3df3b2a80","61a66ff0-0094-44b2-875c-e3e6db4ac34e","f82afe78-4dd1-4100-87b8-77adda0d43e6","bcb17811-76ed-4cf9-a12d-476f86f2b548","56f218cb-0880-4930-98ff-253e65a7c6a3","1f6596b1-2713-4a20-a477-e3146cba7d49","00072285-01c0-4ea7-bed8-025b133a59c0","db2a74d5-79fa-41e6-9fd5-d3658bc43cdb","81d2a08e-75f3-413c-8c89-f8c1e4a9b391","0b667754-0759-4f03-8ba0-edb48a40fbdb","6526f23c-fb9a-477c-a010-f905acb769c5","7e3cab59-361c-4220-9ca7-a89732d8b87e","fd4443bb-8c42-410f-8c59-1b8c4693f68e","1a7dd74c-6305-4cbd-9bf3-919625039b42","e57f6593-c674-4a77-8e13-4c9bbc91017f","735dfa39-768c-4576-ad19-fc75f43c847a","2f01833f-2f77-49c3-9b76-77147a246f8f","cfe8bf46-ecda-4a73-bbfa-58aeee5e8e35","09e51a92-5afe-41fc-9607-e5b34eeac0a9","d4f158cc-6fbc-4e0d-a03b-97ec496e31ec","97d473a3-2431-41e1-8a03-3fe478c82822","5a817048-d0a7-4cfc-952e-4c7b73d2c574","7370cf68-1f0f-4a02-a093-261262529f39","5e7ce285-38d6-4cce-ba76-8aefed818599","01cc40ff-752a-4152-a29c-6f4ca32930dc","663caf9c-bdec-4ee6-a7fb-0c21c9c6b88f","67f35801-0f88-4adb-bdc0-c059f3213bb0","9ff2f2ae-5a6d-4811-b322-fe7f4ae7ebfb","8e53d0d0-40ad-4631-9553-f0b993785478","9f709299-6b55-436c-b522-587c78369178","3d673772-6398-435f-908d-c294b24695f2","5dec1fec-a79c-4a6b-af82-d33dbd2cd649","a3719b66-4a50-41bd-bf2b-54b2a5590a46","dfff8d3f-ad2b-45a5-8fa5-65d0316f572c","ac882c75-f24f-4e0a-ab1c-9b353c3e4986","e661e9f6-5b50-48ec-ad12-d43e57f562e2","dd2f438b-3d61-432b-9c6c-743c6034e239","8b2d44b6-aa14-4fd8-9101-893bbf424e09","a0d738d7-1ff4-4fab-ae42-d41c285f87fe","a00fa2d9-94f8-4673-81a6-f94c6b5078cf","b2f608c3-32e9-4496-9394-4a331044b59a","4981819b-8023-4a02-9b2e-032a844b802b","a6e843c9-bf03-4543-93b8-700221fe4b90","5f08b18d-acb3-4fb3-a2d4-1827f29834d6","0e601f35-88ba-4b02-b9c8-0facc8cc35e8","f9136e88-fb15-4c00-8acb-7cf699f46ee9","7cf8581d-080a-4702-af35-5e4628183057","2aa718e5-f046-48cf-848c-032d9b2fa61c","8b433768-e7c7-4bbc-924b-85f1193c24a2","237ce5db-1fb7-46cb-bcd1-af412e9fb20a","87aa5023-fc97-4d2e-8997-a79e4bf3b0d9","42200716-0b5f-420a-af50-841edda99930","d66a4f7c-7b12-4303-86ac-0e26d3bfa1ef","99cd52d4-26c6-4761-9a27-bc7634a239f6","1a18a9b0-7814-4a41-8cac-63bd4d8af684","92ef768f-4f85-4429-b23b-a523c3b036f2","84bfac2b-4a04-45ad-a73a-8cfed74da1dc","4821ab07-6c97-4675-b891-ad64c2dd70d3","cb0a04a2-1760-4e9c-b3eb-1739b51ad01e","66077847-566b-4eb3-a4e5-c9183c294067","12d5087b-2f8d-4956-8a5c-5c52246d4cd9","9cbc7fda-3b0e-4ebe-b954-b83236b58266","835dcc15-872e-46da-9e81-74ec5c1240ef","45988f7b-c28b-42cb-a1d1-d1425ee018e2","ca9e7314-f53f-4611-99ae-f3eb92380bb6","2a0aa5c3-3afd-4390-ad8b-13092cd8e8e2","2332f5d2-d160-4862-9cfd-a49193db6087","04e008b7-c322-4cd0-86af-c9abe5dc6c83","83b5bd42-51b5-4914-9893-84888756800c","ff81b195-6d1b-4ed4-bc78-458c069a86d3","b0a3248b-40cf-414d-a6a2-bd098db5fe12","6f193623-a9d5-4f76-8114-a775c3d07e23","ae24554a-e077-4104-bbc7-4085f99e66d0","0767f440-1a67-42ee-8d06-2989fe46961f","0820768a-e0e6-4ad3-8ab3-71085a8e610b","dee0f686-c50c-4c1d-8c60-bd3f6c8b99f5","f384acc9-fc5b-48c5-8dd1-3254d4cbe7f3","32cb0678-9445-4160-8e49-a583d6c78768","f149ee71-d7d8-4061-9f3a-9caff97e4cb3","a77c09af-9b6b-4e04-bce6-803f71f038bf","8c8b574b-af42-43b5-bc08-b731fb4a36f5","4f42d350-1c34-4261-ad27-a023bcc9fa9e","91c80aa1-9b3c-410a-ac93-b3532c06fcaa","5c77614e-3db9-4688-9f80-4e25d1559e13","8d6d10c6-c902-47a7-8533-d42684518bb4","9a95cf03-c6fa-41c9-8fc7-1b3a14c0a2cd","77ba18e3-3064-4458-95dd-a6b5872759a7","f06aaba5-983e-472e-8c89-d9456e4e7b93","c9a39efb-6be7-4a83-b535-11b9ff06dc8d","5e88fa50-3d33-4487-bce1-65222f8914b7","2acacd6d-728b-4f8d-9ea2-360da3124200","18176c15-d782-4924-81e0-1d9fdc121071","1f2c204b-0934-43af-9a2e-ee2095425078","dc89f90b-72b0-44c1-87af-9cd79b0935db","3a778490-60a0-4ad6-8f32-de1a106aea0d","05468731-c3b5-4e76-b9c9-ce74a711b927","005a3abc-b567-4b82-bc8e-84b330465cf3","6d818332-6f9e-4efc-8b5c-a5e529954fe9","f7b251bd-5642-4ae8-85d9-54a6d0befd5b","029ed532-4141-4f8a-88e3-5fecc09c6de5","5be8b656-3c24-43a5-917f-3ac2aeeec259","56b9dd3c-d9c6-4548-819d-648ba1576b62","e0cde180-c486-424a-b617-a5272b6e3f61","c1ff5e4e-45de-4b34-9d5f-92c1e055fd75","25c1d722-dbb3-4501-b41d-03dc19e8656e","fe418598-a893-4060-964f-0df6e2f78b66","98d0492b-8ffb-4a7e-9470-488384c40d32","b38755c3-ed5f-45bd-b62b-f9b388360e84","5e15fdc7-c418-4c62-8298-6305e2d02ec9","3bb51a91-463e-4751-86b2-aa3a2ee54b43","7cb9c164-6af0-485d-bc48-740342f98f83","851abf23-f8d7-4a58-a68b-589d0e8a9d49","3f3ae5ff-4fd9-407f-a13e-f55778baea7d","e1ce7904-b6be-42d7-8cf2-4f5e94811762","34d96d4a-bd03-41bf-a234-fb1d1df515af","562eacbf-88b1-4413-a290-be02fbd74c83","04d8750f-3714-4ec4-8f1b-b1195ba66353","aa3e679d-7312-47a4-97ba-77b6b3ab46ce","c8eb6faa-3f7b-4ca3-95d2-3ea55bde32e1","aa23d1e7-cc07-497b-a931-97eb2a68df2f","5758d6da-b748-41c1-8df6-0f81d30b772e","cfe2427d-3219-4909-9431-de5bde8158aa","e2b57032-e353-4a25-a025-35cc20615560","1f750599-c55d-4237-a0ef-16338f84a647","35abb5c0-edae-4485-b5ec-40a31f32f1a7","06516428-a9eb-4710-87c4-af4125add197","c3cb0017-2b29-4107-8b0c-f5b24180fd79","9d113e98-cc27-434e-9556-713766ad7365","4ab9a7ff-8d44-4223-8a9b-fd86737eaa63","85c0d5a8-40d2-4ddd-88a9-18b4a660f1a1","a93bda62-1f0c-4c7f-afdc-b28b33521200","a4223867-7e74-48bc-9cf9-c237a8bb532a","0e8618b8-1b8e-47f6-b9f3-293e964b71f4","eca2ffa7-24a4-4a4a-817c-21c11ae7834c","53330690-5544-44fd-af43-9c536917e07f","21155c96-84eb-4846-a918-81cb21ccc490","f91852ca-31ec-48cc-8669-4b8b164e617d","f3ded8f3-0989-4fad-8bb1-27c6fe9f48eb","ebbdadfa-d97b-43c6-a5a8-505fdcb00796","77ffa422-d3b2-4446-8c7b-64bb191c3271","f2635b99-f1be-4d0a-b96f-ff58f88197aa","7c3f1a84-3f87-4de3-81eb-7cd9638ebcd6","d0fe8f02-4bfb-427f-998d-4f402774badc","76d29cb8-5785-437a-83eb-b31c3a861b5d","b4c4979f-c514-45e0-aedd-a62e097bbff6","aeffe187-f5b5-4170-9972-e06796d52f5c","1d1d0fbe-09a4-4c8d-8af3-d9fe4b6c8c05","d02f6ea2-5f00-4ee7-95ae-2562b93851e5","a98f7a71-16d4-461d-9ab0-706a2c9900a0","08b69340-a7f1-4225-a192-4a7d213e602e","8ceade33-6378-4d8d-b5f3-d62576e95c8e","928d02c3-8fb9-420f-bf9a-86880d89364b","7f3fabca-2c9c-4605-a229-c827e338c11a","0cad28c5-4dbf-4830-9933-0ee0f57e126d","fd945693-04f1-4e45-b7b9-cba8f2eff5a1","0e78305d-ea31-4720-9f0a-0550a6f92037","991bfa3e-ea39-4a27-af7a-efd30fa9ca67","fd4eb62c-2d7b-4069-9e13-69f73050154c","3eb6adb0-a9ac-4173-872f-c7164874b732","e46e8f01-b45f-4f91-a023-6afa79141f7f","da922c73-1b22-4d46-9afe-9fc7a88988e1","2cc69272-1c1d-406a-a349-4d9234dc0766","e551363c-4f25-4a43-b47e-150473738b2e","a6761895-e141-4ec6-9c13-acc1bdca12bd","cb5f0da1-b75e-41dc-a83e-41c48302b23b","7928cbc0-9e7d-4b3e-8176-9d90392dfd7e","e7ddd9cd-3cb9-49e1-b29e-ba953c1df1e7"]]}]}}
{"Solver":{"esbListenQueue":"ticketWidget.queue","name":"TicketWidget","uuid":"97a77836-137a-3f6a-93c8-88f7d4f22115"}}
{"ConfigVariable":{"key":"snmpManagerTransport.threadCount","ownerUUID":"6535dd49-d59e-32e4-a01c-86c9aa9ec29f","uuid":"2bae5bd4-6b33-3def-aa41-a6ec25a9907b","requiresRestart":true,"parm":[{"type":"Number","value":"50"}],"desc":"The number of threads avalailable to the Quartz scheduler for running triggers (ex: polls) simultaneously."}}
{"DashboardView":{"rowHeight":30,"ownerUUID":"f01700a0-8349-369d-acf8-adfd16df0abf","title":"Copy of MFR Main","sharing":{"roles":[],"similarResources":false,"users":[],"everybody":false},"cols":12,"containers":[{"y":0,"uuid":"96193e9b-b805-4bd4-bc24-39cd1b893b44","pinned":false,"h":23,"title":"Linear Channel Alarms","configuration":"{\"mode\":\"serviceGroupMode\",\"includeMode\":false,\"resourceGroupsToExclude\":[\"CBC1V - DTH\",\"AATHS - FoNSE\",\"SCHD1 - IPTV\",\"POLR3 - IPTV\",\"S+HD - IPTV\",\"AMitv - FoNSE\",\"GMA - DTH\",\"ID - DTH\",\"TRVXP - FoNSE\",\"WEAOH - IPTV\",\"SNDNC - FoNSE\",\"DJRHD - IPTV\",\"HLNHD - DTH\",\"RAI - IPTV\",\"GLBTH - DTH\",\"HDV15 (PPVH7) - DTH\",\"GEOHD - FoNSE\",\"CTV2W - DTH\",\"PATV - DTH\",\"VNUS8 - DTH\",\"FMLY - IPTV\",\"VKMHD - IPTV\",\"DSNY - DTH\",\"Z - IPTV\",\"cbsse - DTH\",\"VCTV2 - FoNSE\",\"CTVHT - DTH\",\"TAML1 - FoNSE\",\"SM28 - FoNSE\",\"SM19 - FoNSE\",\"ZEETV - DTH\",\"HDV27 (VuHD8) - DTH\",\"ABPN - FoNSE\",\"TLCHD - IPTV\",\"MET-O - FoNSE\",\"TELHD - DTH\",\"360HD - FoNSE\",\"BBC-C - DTH\",\"ABCHW - FoNSE\",\"Z-HD - FoNSE\",\"NGTV - IPTV\",\"SM43 - IPTV\",\"YTVHD - DTH\",\"CKWS - DTH\",\"ADDHD - IPTV\",\"VNUS6 - DTH\",\"EXPLH - FoNSE\",\"EUROF - IPTV\",\"DDNWS - IPTV\",\"SHWHD - DTH\",\"ICIVH - FoNSE\",\"CTVLB - DTH\",\"CodeMettle\",\"CTYWH - DTH\",\"CCCTV - IPTV\",\"PROSB - DTH\",\"VISON - IPTV\",\"EN2EH - IPTV\",\"TECH - FoNSE\",\"TY24 - IPTV\",\"V-RLH - FoNSE\",\"HS00 - DTH\",\"CPACF - DTH\",\"NTV - DTH\",\"GMC - FoNSE\",\"GLBSJ - DTH\",\"NFLHD - FoNSE\",\"CTVNC - DTH\",\"TFCPH - FoNSE\",\"BRAVO - DTH\",\"UTV-M - FoNSE\",\"SM41 - IPTV\",\"SM36 - FoNSE\",\"TREE - DTH\",\"ALNRD - FoNSE\",\"CTVNH - FoNSE\",\"ICI-S - IPTV\",\"Vu22 - DTH\",\"NBC-D - IPTV\",\"ATNM - FoNSE\",\"CFTK - DTH\",\"GUSTO - IPTV\",\"MM-SA - IPTV\",\"HIFI - FoNSE\",\"NTV-B - IPTV\",\"CCTV1 - IPTV\",\"HDV19 (HPPV5) - DTH\",\"CIN1G - FoNSE\",\"SNETE - IPTV\",\"CCCTV - FoNSE\",\"ICIAH - FoNSE\",\"HS90 - IPTV\",\"SHO-E - DTH\",\"ZEEPJ - IPTV\",\"GLBVH - IPTV\",\"BNNHD - FoNSE\",\"R-MOU - FoNSE\",\"MHNHD - IPTV\",\"ICI-Q - DTH\",\"CHAT - DTH\",\"CBSHW - IPTV\",\"CNBC - DTH\",\"PRMTH - FoNSE\",\"ICIHT - IPTV\",\"OMNVH - DTH\",\"ICIOH - IPTV\",\"RFI - DTH\",\"DJRHD - FoNSE\",\"KHL - IPTV\",\"NFL-N - IPTV\",\"LSTTV - DTH\",\"HDVu8 (PPVH3) - DTH\",\"SM37 - FoNSE\",\"GUANG - FoNSE\",\"CTV-O - DTH\",\"Vu13 - DTH\",\"TVA-O - DTH\",\"HLNHD - IPTV\",\"CBCMH - IPTV\",\"B4U-M - IPTV\",\"NINOS - IPTV\",\"TSNH4 - IPTV\",\"Vu11 - DTH\",\"AMCHD - IPTV\",\"TELMH - FoNSE\",\"FOX-E - DTH\",\"CHCH - IPTV\",\"SM29 - FoNSE\",\"SM17 - FoNSE\",\"DDURD - FoNSE\",\"DJRHD - DTH\",\"TVAHD - IPTV\",\"2CTVE - IPTV\",\"CBSSH - IPTV\",\"IDHD - DTH\",\"HSTHD - DTH\",\"SM3 - IPTV\",\"ABUDA - IPTV\",\"DAYST - FoNSE\",\"SE2 - IPTV\",\"SN1HD - IPTV\",\"LEAFS - IPTV\",\"FAIRW - FoNSE\",\"DDIND - FoNSE\",\"Vu8 - DTH\",\"CHUM - DTH\",\"W-HD - DTH\",\"IFC - DTH\",\"DOCU - IPTV\",\"WN-RL - IPTV\",\"PUNTV - FoNSE\",\"CTYVH - DTH\",\"RAI-N - FoNSE\",\"SM23 - IPTV\",\"SM23 - FoNSE\",\"NBCHW - FoNSE\",\"EXPLH - DTH\",\"R-CLS - IPTV\",\"WFN - IPTV\",\"BOTIH - IPTV\",\"ARTV - DTH\",\"DVELO - DTH\",\"ABCSH - DTH\",\"NBCHW - IPTV\",\"MBC-M - FoNSE\",\"RAWAL - FoNSE\",\"RITMS - IPTV\",\"CBCFN - IPTV\",\"HGTVH - FoNSE\",\"TVAHD - FoNSE\",\"GLBPJ - FoNSE\",\"TSN2H - FoNSE\",\"ANMHD - FoNSE\",\"PTC - FoNSE\",\"OLN - IPTV\",\"M2EHD - IPTV\",\"FOODH - FoNSE\",\"SCIHD - FoNSE\",\"HDV14 (PPVH6) - DTH\",\"ICIEH - DTH\",\"HPI-C - FoNSE\",\"MET-Q - IPTV\",\"GSN - IPTV\",\"RCVu1 - DTH\",\"RTVI - IPTV\",\"FMLYH - IPTV\",\"FOXHW - IPTV\",\"TENCR - IPTV\",\"HBOH1 - IPTV\",\"PBSHV - IPTV\",\"TSN1H - DTH\",\"PBSHB - FoNSE\",\"V-HD - IPTV\",\"ASVBC - FoNSE\",\"CBSHV - IPTV\",\"ICITo - DTH\",\"ATNU - IPTV\",\"TSNRW - IPTV\",\"NICK - DTH\",\"SM4 - FoNSE\",\"DREM2 - IPTV\",\"SHGER - IPTV\",\"CTVMH - DTH\",\"SNETE - DTH\",\"ICIQH - IPTV\",\"SM32 - IPTV\",\"HITS - FoNSE\",\"R-KJA - FoNSE\",\"BRVOH - FoNSE\",\"HDVu2 (VuHD) - DTH\",\"CBCOH - IPTV\",\"FOOD - DTH\",\"GLB-T - DTH\",\"PBSWH - IPTV\",\"TLC - IPTV\",\"TECH - DTH\",\"UNIVS - IPTV\",\"TVI - DTH\",\"PBSWH - FoNSE\",\"Vu20 - DTH\",\"SAISN - FoNSE\",\"LTIME - DTH\",\"SN360 - IPTV\",\"CW11H - DTH\",\"SLVSC - DTH\",\"CN - DTH\",\"CLAT - IPTV\",\"CNNHD - IPTV\",\"SCVLT - DTH\",\"ODYS1 - IPTV\",\"TVAGH - IPTV\",\"TALNT - IPTV\",\"INVHD - IPTV\",\"DREM2 - FoNSE\",\"CNNI - DTH\",\"AQUAH - IPTV\",\"ICIVH - IPTV\",\"GLBRE - DTH\",\"HPI-2 (Canadian Odds Channel) - channel culled - FoNSE\",\"LFSHD - FoNSE\",\"ARY-N - FoNSE\",\"NETVT - FoNSE\",\"ATNPM - FoNSE\",\"GLBVH - FoNSE\",\"NACTV - DTH\",\"Vu1 - DTH\",\"SN360 - DTH\",\"SE2HD - DTH\",\"TVPOL - FoNSE\",\"DIY - IPTV\",\"Vu7 - DTH\",\"Z-HD - DTH\",\"SCIHD - IPTV\",\"ONE - DTH\",\"D-HD - IPTV\",\"CBCCH / CBCHC - DTH\",\"DDNWS - FoNSE\",\"2CTVL - FoNSE\",\"ICI-O - DTH\",\"NGWHD - FoNSE\",\"PBS-E - DTH\",\"RTI1 - IPTV\",\"TSNH5 - FoNSE\",\"TSN4 - DTH\",\"JLTV - FoNSE\",\"CRTV - IPTV\",\"CCTV4 - IPTV\",\"Vu36 - DTH\",\"HISHD - FoNSE\",\"PRS2H - FoNSE\",\"VuF11 - DTH\",\"HBO1 - IPTV\",\"TSNH3 - IPTV\",\"OMNCH - DTH\",\"CTV-C - DTH\",\"ABC-E - DTH\",\"CYRT - FoNSE\",\"IDHD - FoNSE\",\"SHO-E - IPTV\",\"TVI - FoNSE\",\"ANQ - IPTV\",\"GMAL - FoNSE\",\"FUNTV - FoNSE\",\"CPAC - IPTV\",\"R-CLS - FoNSE\",\"C+I - DTH\",\"CASAH - IPTV\",\"CBCNH - DTH\",\"SNH-O - FoNSE\",\"TSP2H - IPTV\",\"SNWL - DTH\",\"HPI-1 - IPTV\",\"TENCR - FoNSE\",\"ATNTN - FoNSE\",\"AMI-F - FoNSE\",\"NBATV - IPTV\",\"VRKHD - IPTV\",\"RAIN - IPTV\",\"RTG - FoNSE\",\"TV5HD - IPTV\",\"VuF4 (Vu4F) - DTH\",\"FGHTH - IPTV\",\"TVAHD - DTH\",\"CNN - IPTV\",\"GLBHT - IPTV\",\"WFNHD - IPTV\",\"TLCHD - DTH\",\"DW-TV - FoNSE\",\"MEGA - DTH\",\"CBSHE - DTH\",\"TSNRM - IPTV\",\"BIGM - FoNSE\",\"CBC-E - IPTV\",\"V-SBR - IPTV\",\"HS70 - IPTV\",\"TVPOL - IPTV\",\"BNC - culled october 2016 - IPTV\",\"HLN - DTH\",\"ESPNC - IPTV\",\"GMA-N - FoNSE\",\"DJR - DTH\",\"CHX2H - IPTV\",\"EN1EH - DTH\",\"FOXHD - FoNSE\",\"MOIHD - FoNSE\",\"SKYNA - FoNSE\",\"WGNHD - FoNSE\",\"TV5 - DTH\",\"CGTN - IPTV\",\"FOXHB - IPTV\",\"TVJPN - FoNSE\",\"V-HD - DTH\",\"SHGER - FoNSE\",\"VRAK - IPTV\",\"VNUS2 - DTH\",\"ABCHW - DTH\",\"SNH-E - FoNSE\",\"CH-Y - FoNSE\",\"TMN3E - DTH\",\"EXPLR - IPTV\",\"MAGIO - DTH\",\"SM34 - FoNSE\",\"CITYW - DTH\",\"HDV17 (HPPV2) - DTH\",\"SPCHD - IPTV\",\"CTVNH - IPTV\",\"V-QBC - DTH\",\"AQUAH - DTH\",\"SM41 - FoNSE\",\"CTVSS - DTH\",\"FYIHD - FoNSE\",\"ALARB - FoNSE\",\"HISHD - IPTV\",\"CH-Y - IPTV\",\"CARVN - FoNSE\",\"CBS-V - IPTV\",\"HDV13 (PPVH5) - DTH\",\"LCNHD - IPTV\",\"DOCU - DTH\",\"CH9 - IPTV\",\"ANMHD - DTH\",\"360HD - IPTV\",\"FUNTV - IPTV\",\"BBC-E - FoNSE\",\"METEO - IPTV\",\"STR-G - FoNSE\",\"EVAHD - DTH\",\"MTV2 - FoNSE\",\"TOONW - DTH\",\"GEOTV - IPTV\",\"M4EHD - IPTV\",\"VRKHD - FoNSE\",\"CGTND - FoNSE\",\"ICI-E - DTH\",\"OLAHD - IPTV\",\"NGWHD - IPTV\",\"CBN - IPTV\",\"TMN2E - DTH\",\"R-KJA - IPTV\",\"TSN5H - IPTV\",\"CTVHH - FoNSE\",\"BOTIH - FoNSE\",\"Vu4 - DTH\",\"TVCI - FoNSE\",\"METMH - FoNSE\",\"CASA - DTH\",\"CBS-W / CBSSe - DTH\",\"SM14 - IPTV\",\"BEINH - DTH\",\"PBSHW - DTH\",\"M1EHD - FoNSE\",\"BOOK - DTH\",\"GPUNJ - FoNSE\",\"BBC-C - IPTV\",\"STARG - IPTV\",\"SNH-W - DTH\",\"SM22 - FoNSE\",\"PUNJ5 - FoNSE\",\"WAHSA - DTH\",\"SCGNX - DTH\",\"HPI-W - FoNSE\",\"MTVHD - FoNSE\",\"CBCNH - IPTV\",\"V-TRH - IPTV\",\"CP24 - IPTV\",\"SAHR - IPTV\",\"DAWN - culled April 30 - FoNSE\",\"FOODH - IPTV\",\"MBC - FoNSE\",\"SM45 - FoNSE\",\"TVI-P - IPTV\",\"FAIRW - DTH\",\"NBCHB - FoNSE\",\"RDSIH - FoNSE\",\"EUROR - FoNSE\",\"CBCHH - FoNSE\",\"B4U - IPTV\",\"CW11 - IPTV\",\"CAN-S - DTH\",\"ANIML - DTH\",\"CTYHE - DTH\",\"CLRSM - IPTV\",\"LSTYL - IPTV\",\"SBTN - IPTV\",\"SPCHD - DTH\",\"CH-V - FoNSE\",\"ICIOH - FoNSE\",\"Sony - IPTV\",\"M3EHD - IPTV\",\"CHEK - DTH\",\"WWEHD - DTH\",\"HS90 - FoNSE\",\"LVNTR - DTH\",\"CNNI - IPTV\",\"UNIS - DTH\",\"TRAVL - DTH\",\"FIGHT - IPTV\",\"2CTVE - FoNSE\",\"AMCHD - FoNSE\",\"SICN - IPTV\",\"FX - IPTV\",\"JIANG - FoNSE\",\"S+HD - FoNSE\",\"SM9 - FoNSE\",\"WNYO - IPTV\",\"ICIHD - FoNSE\",\"TVI - IPTV\",\"5KANL - FoNSE\",\"SM15 - FoNSE\",\"ICI-W - DTH\",\"TCMHD - FoNSE\",\"DSNYF - DTH\",\"CTV-V - DTH\",\"SE4HD - IPTV\",\"HGTV - DTH\",\"SNETW - IPTV\",\"CINE - FoNSE\",\"TVARN - DTH\",\"SNETO - IPTV\",\"TAC3 - IPTV\",\"CTVOH - IPTV\",\"RTL - IPTV\",\"GLBLE - DTH\",\"CTVMH - FoNSE\",\"GUSTH - FoNSE\",\"RTL-I - IPTV\",\"COTTG - FoNSE\",\"V-TR - DTH\",\"SN1HD - DTH\",\"CGTNF - IPTV\",\"1+1 - FoNSE\",\"CKPG - DTH\",\"PFC-I - IPTV\",\"2CTVW - IPTV\",\"BBCWN - IPTV\",\"V-RLH - DTH\",\"LTMHD - FoNSE\",\"HGTV - IPTV\",\"BOOK - FoNSE\",\"FXXCH - DTH\",\"MTV - DTH\",\"V-MTL - IPTV\",\"CKWS - IPTV\",\"ENC2W - DTH\",\"RISHT - FoNSE\",\"NTN24 - IPTV\",\"NDTV - IPTV\",\"CBSSN - IPTV\",\"NBCSE - DTH\",\"AFRO - FoNSE\",\"OM1HD - FoNSE\",\"POLR3 - DTH\",\"VKMFM - IPTV\",\"CHEX2 - DTH\",\"HDV21 (HPPV7) - DTH\",\"MBC-M - IPTV\",\"TELEQ - DTH\",\"ACTN - IPTV\",\"SPCHD - FoNSE\",\"D-HD - FoNSE\",\"AFRCS - FoNSE\",\"SEHD - IPTV\",\"CHRGD - IPTV\",\"RTG - IPTV\",\"TRAVL - IPTV\",\"RBTi - IPTV\",\"RAI - FoNSE\",\"CBC1H - DTH\",\"GMC - IPTV\",\"ONE - FoNSE\",\"DISC - DTH\",\"RDI - DTH\",\"HPI-W - DTH\",\"EVAHD - IPTV\",\"SHOP - IPTV\",\"SM17 - IPTV\",\"TMN4E - DTH\",\"VISON - DTH\",\"C+I - FoNSE\",\"NPR-WBUR - DTH\",\"RIKST - IPTV\",\"Vu27 - DTH\",\"FAIR - DTH\",\"DAYST - IPTV\",\"FOXNC - FoNSE\",\"CTV-L - DTH\",\"SNH-P - DTH\",\"TFOHD - IPTV\",\"RITMO - FoNSE\",\"RTI1 - FoNSE\",\"GLHCA - DTH\",\"RFI - IPTV\",\"CTVNH - DTH\",\"SM12 - FoNSE\",\"SM25 - FoNSE\",\"DEJA - IPTV\",\"JIANG - IPTV\",\"SLICE - IPTV\",\"ZEETV - IPTV\",\"TMN3E - IPTV\",\"S+L - IPTV\",\"CTV2V - IPTV\",\"STARG - FoNSE\",\"BNN - IPTV\",\"FYI - IPTV\",\"CJLO - IPTV\",\"RDI - IPTV\",\"MAX - IPTV\",\"ABCHV - IPTV\",\"POLR1 - IPTV\",\"SNDNC - DTH\",\"NTV - IPTV\",\"WSTVH - not launched - IPTV\",\"CINE - IPTV\",\"ZESHD - DTH\",\"CBC-C - DTH\",\"DSNFH - IPTV\",\"SM30 - FoNSE\",\"HBO2 - IPTV\",\"TMN1E - IPTV\",\"HDV24 (HPPV4) - DTH\",\"ITN - FoNSE\",\"RDSIH - IPTV\",\"MIRCL - DTH\",\"SM20 - FoNSE\",\"FIBEF - IPTV\",\"SETM - IPTV\",\"C1R - DTH\",\"SM20 - IPTV\",\"CTVSD - DTH\",\"TSNH5 - IPTV\",\"IFC - IPTV\",\"DEJA - FoNSE\",\"PRMNT - DTH\",\"MSITA - FoNSE\",\"Vu35 - DTH\",\"OUTHD - FoNSE\",\"NBCHD - IPTV\",\"PLN+H - FoNSE\",\"SM12 - IPTV\",\"HDV11 (VuHD3) - DTH\",\"ZESHD - FoNSE\",\"HLT - IPTV\",\"CGTNF - FoNSE\",\"SM29 - IPTV\",\"SAHR - FoNSE\",\"METEO - DTH\",\"SKYNA - IPTV\",\"Vu37 - DTH\",\"RDSIN - DTH\",\"MHNHD - FoNSE\",\"BEJTV - FoNSE\",\"ZCINE - IPTV\",\"105FM - DTH\",\"NTDTV - FoNSE\",\"DXDHD - IPTV\",\"ARY-M - IPTV\",\"FUTRE - IPTV\",\"PTVG - IPTV\",\"NFLHD - IPTV\",\"VU5 - DTH\",\"SM16 - FoNSE\",\"SM18 - IPTV\",\"AMC - IPTV\",\"TVCI - IPTV\",\"VNS11 - DTH\",\"DW-TV - DTH\",\"ICIQH - DTH\",\"AJE - FoNSE\",\"PBSHW - IPTV\",\"CMDYH - DTH\",\"EN1EH - FoNSE\",\"CH-V - IPTV\",\"VNUS4 - DTH\",\"AMIa - IPTV\",\"ICIMH - FoNSE\",\"ZESTE - IPTV\",\"FEVA - IPTV\",\"VCTV2 - IPTV\",\"CCTV - IPTV\",\"CTVMH - IPTV\",\"WEA-O - IPTV\",\"Vu34 - DTH\",\"SM18 - FoNSE\",\"CBSSH - FoNSE\",\"ATNGU - IPTV\",\"TMN2W - DTH\",\"MM-NO - FoNSE\",\"CTV2T - FoNSE\",\"R-MOU - IPTV\",\"HS80 - DTH\",\"HLT - FoNSE\",\"LTMHD - DTH\",\"ICIOH - DTH\",\"APTN - DTH\",\"RDS2H - FoNSE\",\"YES - IPTV\",\"TSN1 - IPTV\",\"ABC-B - IPTV\",\"GLB-K (culled Feb 2017) - DTH\",\"VuF0 - DTH\",\"TVAML - IPTV\",\"COLOR - FoNSE\",\"DSNYF - IPTV\",\"JOY-V - DTH\",\"ABUDA - FoNSE\",\"CBCWH - DTH\",\"CRTV - FoNSE\",\"VSGNH - IPTV\",\"TELMG - IPTV\",\"SCVLT - IPTV\",\"KNOW - DTH\",\"CINEB - IPTV\",\"ICIRH - IPTV\",\"SAB - FoNSE\",\"OMN-C - DTH\",\"MEZZO - FoNSE\",\"TVA-O - FoNSE\",\"GLB-C - DTH\",\"HPI-I - DTH\",\"SM44 - FoNSE\",\"SM39 - IPTV\",\"FILMY - FoNSE\",\"V-VD - DTH\",\"SCHDG - DTH\",\"GPUNJ - IPTV\",\"CLAT - FoNSE\",\"SM37 - IPTV\",\"Vu12 - DTH\",\"MP - IPTV\",\"CH9 - FoNSE\",\"CLRSB - IPTV\",\"R-CIN - IPTV\",\"TELEF - swapped to HD - IPTV\",\"NBCHE - DTH\",\"FIREH - IPTV\",\"GEO - IPTV\",\"CISM - IPTV\",\"CTVHV - IPTV\",\"SM24 - IPTV\",\"APTN - IPTV\",\"R-DRM - FoNSE\",\"KTLAH - FoNSE\",\"TCMHD - IPTV\",\"SM38 - IPTV\",\"TELIL - DTH\",\"TSN1 - DTH\",\"RAIN - FoNSE\",\"S+ - DTH\",\"1+1 - IPTV\",\"CTV2O - DTH\",\"SNDCH - FoNSE\",\"FOXNC - IPTV\",\"2CTVW - FoNSE\",\"TECH - IPTV\",\"CTV-E - DTH\",\"HPI-1 - DTH\",\"CTVKH - FoNSE\",\"HDVu4 (PPVHD) - DTH\",\"VNUS5 - DTH\",\"PBS-D - IPTV\",\"TLN+ - IPTV\",\"GSNHD - DTH\",\"DDBHA - FoNSE\",\"D-HD - DTH\",\"RTL-I - DTH\",\"CJPX - DTH\",\"SM5 - FoNSE\",\"CBSHW - FoNSE\",\"RCVu7 - DTH\",\"Vu21 - DTH\",\"OLNHD - FoNSE\",\"RDPI - IPTV\",\"TVASa - IPTV\",\"YES-C - DTH\",\"SAB - IPTV\",\"SPACE - IPTV\",\"ATNM - IPTV\",\"PROSB - FoNSE\",\"CTV-H - IPTV\",\"HUNTV - FoNSE\",\"NUETV - IPTV\",\"MTV2 - DTH\",\"SM5 - IPTV\",\"ARTVH - IPTV\",\"HBOH2 - DTH\",\"NPR* / NPR - IPTV\",\"TVA-O - IPTV\",\"DRGTV - FoNSE\",\"LTMHD - IPTV\",\"DIYHD - FoNSE\",\"BENTV - IPTV\",\"CFJC - DTH\",\"V-G - IPTV\",\"SMIX - IPTV\",\"WGNHD - IPTV\",\"MTIME - IPTV\",\"CTVMC - DTH\",\"F-NTL - IPTV\",\"SNETP - IPTV\",\"ARY-M - FoNSE\",\"SM16 - IPTV\",\"SM19 - IPTV\",\"ICI-A - IPTV\",\"TELAT - FoNSE\",\"DOCHD - DTH\",\"BNNHD - IPTV\",\"GSNHD - FoNSE\",\"MSNHD - IPTV\",\"COTT - IPTV\",\"TREE - IPTV\",\"SM30 - IPTV\",\"DTRHD - FoNSE\",\"TVASH - FoNSE\",\"SCHD2 - DTH\",\"MUCHH - IPTV\",\"PAPR - IPTV\",\"ATNPM - IPTV\",\"CBCVH - FoNSE\",\"V-SBR - DTH\",\"COSMO - DTH\",\"OWNHD - IPTV\",\"DISCH - DTH\",\"MAXHD - FoNSE\",\"WEANH - IPTV\",\"CTVKH - IPTV\",\"VuF15 - DTH\",\"FAIR2 - IPTV\",\"CPJC - DTH\",\"AMC - DTH\",\"CPOPH - IPTV\",\"LVNTR - FoNSE\",\"FOXLF - FoNSE\",\"TVE - FoNSE\",\"ALL-K - IPTV\",\"SM40 - IPTV\",\"4E - IPTV\",\"NOCTV - IPTV\",\"ICIRL - IPTV\",\"ABCSH - FoNSE\",\"AAJTK - IPTV\",\"SM26 - IPTV\",\"YHALA - IPTV\",\"SM45 - IPTV\",\"CNHD - FoNSE\",\"RTPI - IPTV\",\"SE2HD - FoNSE\",\"PRMNT - IPTV\",\"HDV23 (HPPV3) - DTH\",\"SNH-P - FoNSE\",\"FIREH - DTH\",\"SM22 - IPTV\",\"EUROG - FoNSE\",\"ICITH - FoNSE\",\"HBOH2 - IPTV\",\"ICISh - IPTV\",\"Vu23 - DTH\",\"PBSHE - DTH\",\"ATNZM - IPTV\",\"TELAT - IPTV\",\"GMAL - IPTV\",\"BBC-K - FoNSE\",\"ATNSK - IPTV\",\"ISRAE - IPTV\",\"CTYML - DTH\",\"D - DTH\",\"2CTVL - IPTV\",\"TVARH - IPTV\",\"PATV - FoNSE\",\"FAIRW - IPTV\",\"CBC-O - IPTV\",\"MEZZO - IPTV\",\"NBAHD - DTH\",\"ARY-Z - IPTV\",\"RIKST - FoNSE\",\"HALLA - FoNSE\",\"FOXHW - FoNSE\",\"CMT - DTH\",\"CFJCH - DTH\",\"SUPR1 - IPTV\",\"RTNC - FoNSE\",\"SNWL - IPTV\",\"Closed Caption Encoder : SD\",\"MSNHD - DTH\",\"ABCHW - IPTV\",\"CW11H - IPTV\",\"CCTV1 - FoNSE\",\"ERT - DTH\",\"HISHD - DTH\",\"NINOS - FoNSE\",\"DIY - DTH\",\"FOXHB - FoNSE\",\"Global Lloydminster (CKSA) - DTH\",\"SM43 - FoNSE\",\"ARY-Q - FoNSE\",\"ADDIK - DTH\",\"COTTG - IPTV\",\"CJDC - DTH\",\"SHICI / ICIHS - DTH\",\"VIBE - culled - IPTV\",\"ALNHR - IPTV\",\"SM24 - FoNSE\",\"MAXHD - IPTV\",\"ATN-B - FoNSE\",\"NDTVG - FoNSE\",\"PCHHD - FoNSE\",\"HGTVH - IPTV\",\"FMLYH - FoNSE\",\"ZESHD - IPTV\",\"HS90 - DTH\",\"ID - IPTV\",\"TVP - FoNSE\",\"RTS-S - FoNSE\",\"INVHD - FoNSE\",\"CIHC - DTH\",\"TRVHD - FoNSE\",\"CBC-H - DTH\",\"AFRCS - IPTV\",\"GMA - FoNSE\",\"VuF17 - DTH\",\"SNETO - DTH\",\"CSUR - FoNSE\",\"MPHD - FoNSE\",\"PPV3 - IPTV\",\"PRMTH - IPTV\",\"TSP2H - DTH\",\"TV5HD - FoNSE\",\"ANT3 - IPTV\",\"SNDNC - IPTV\",\"METEO - FoNSE\",\"CITYE - DTH\",\"GUSTO - DTH\",\"KINO - IPTV\",\"SM21 - FoNSE\",\"WINTV - IPTV\",\"TOONF - DTH\",\"VRTTV - FoNSE\",\"C+IHD - IPTV\",\"GLB-W - DTH\",\"MSNHD - FoNSE\",\"CBCML (DTH) - IPTV\",\"ALLTV - FoNSE\",\"KTV - IPTV\",\"SM28 - IPTV\",\"FRA24 - IPTV\",\"ATNSB - IPTV\",\"BBCWN - DTH\",\"KUTT - IPTV\",\"ABCSP - IPTV\",\"AMCHD - DTH\",\"YES-E - DTH\",\"VuF2 - DTH\",\"AZMDO - FoNSE\",\"SM27 - IPTV\",\"CKWSH - IPTV\",\"SM13 - IPTV\",\"FAIR2 - FoNSE\",\"SNH-W - FoNSE\",\"TV5HD - DTH\",\"PCHHD - DTH\",\"E!HD - IPTV\",\"SHOP - DTH\",\"ARTVH - DTH\",\"VALE - DTH\",\"GLFHD - IPTV\",\"BIGM - IPTV\",\"DTOUR - DTH\",\"NNTLA - DTH\",\"Vu19 - DTH\",\"ASVBC - IPTV\",\"CN - IPTV\",\"BluVu - DTH\",\"TMN2E - IPTV\",\"WSBKH - FoNSE\",\"SNETW - DTH\",\"SN1 - DTH\",\"TFO - IPTV\",\"CTVSJ - DTH\",\"BBC-K - IPTV\",\"MEGA - FoNSE\",\"YTV-E - IPTV\",\"OWN - DTH\",\"FYI - FoNSE\",\"HS80 - IPTV\",\"NICKH - FoNSE\",\"ATN - DTH\",\"MAGIH - FoNSE\",\"CBCHH - DTH\",\"CBC-R - DTH\",\"CHEXH - FoNSE\",\"CBN - DTH\",\"ANIML - IPTV\",\"SEHD - FoNSE\",\"ICIAH - DTH\",\"CTC - IPTV\",\"SUPR2 - DTH\",\"ALLTV - IPTV\",\"FOOD - IPTV\",\"HBOH2 - FoNSE\",\"RDS2H - DTH\",\"CMDY - IPTV\",\"TVASa - DTH\",\"FTV - DTH\",\"UNIVS - DTH\",\"CP24 - DTH\",\"SM8 - FoNSE\",\"YTV-W - DTH\",\"TVATH - IPTV\",\"HDV22 (HPPV8) - DTH\",\"CHRHD - IPTV\",\"RITMS - FoNSE\",\"SM8 - IPTV\",\"MSITA - DTH\",\"WGNHD - DTH\",\"A\u0026EHD - IPTV\",\"SM42 - IPTV\",\"GLBOK - DTH\",\"ACTNH - IPTV\",\"CPOPH - FoNSE\",\"NOV-A - IPTV\",\"TELHD - FoNSE\",\"TCM - IPTV\",\"SLVSC - FoNSE\",\"PBSHD - IPTV\",\"CBCML (DTH) - DTH\",\"GLB-V - DTH\",\"HDVu0 (HPPV) - DTH\",\"LSTTV - IPTV\",\"WMOV - IPTV\",\"WNYOH - IPTV\",\"CKUT - IPTV\",\"KIDS - DTH\",\"OUITV - IPTV\",\"METNH - FoNSE\",\"TVO - IPTV\",\"CTV-S - DTH\",\"ICIML - IPTV\",\"CTYVH - FoNSE\",\"CITYV/CTYVr - IPTV\",\"TETHD - IPTV\",\"CMDY - DTH\",\"AMitv - DTH\",\"WLDTV - DTH\",\"SNDCH - IPTV\",\"CTVNB - DTH\",\"CNHD - IPTV\",\"CTV2V - DTH\",\"HBO2 - DTH\",\"GEOHD - DTH\",\"RDIHD - IPTV\",\"GLFHD - FoNSE\",\"CBCVR - IPTV\",\"ICITH - IPTV\",\"ATNPN - FoNSE\",\"SM38 - FoNSE\",\"SLICE - DTH\",\"YTV-W - IPTV\",\"CBCFN - DTH\",\"CNPOP - DTH\",\"Closed Caption Encoder : HD\",\"VNS10 - DTH\",\"INVES - IPTV\",\"CHEK - IPTV\",\"PTVG - FoNSE\",\"ICIAH - IPTV\",\"TSN2H - IPTV\",\"MTIME - DTH\",\"TSNH4 - FoNSE\",\"NOVAW - IPTV\",\"SMITH - FoNSE\",\"ARY-N - IPTV\",\"NETVT - IPTV\",\"ICI-R - DTH\",\"HPI-W - IPTV\",\"TSN3 - DTH\",\"F-NTL - FoNSE\",\"ICIVH - DTH\",\"VuF12 - DTH\",\"CTV-W - DTH\",\"M1WHD - DTH\",\"ATNS - IPTV\",\"Vu30 - DTH\",\"Vu16 - DTH\",\"TLCHD - FoNSE\",\"CHOC - IPTV\",\"CTV2E - DTH\",\"CMTHD - IPTV\",\"GLB-M - DTH\",\"YATTV - IPTV\",\"HPI-1 - FoNSE\",\"ICI-S - DTH\",\"V-RLH - IPTV\",\"PBSMH - IPTV\",\"TALNT - DTH\",\"ABPN - IPTV\",\"HSTHD - FoNSE\",\"VNS12 - DTH\",\"PBSHV - FoNSE\",\"CBCWH - IPTV\",\"PASR - IPTV\",\"NBCTV - IPTV\",\"SE4HD - FoNSE\",\"FYI - DTH\",\"HLNHD - FoNSE\",\"NGW - IPTV\",\"TRVXP - IPTV\",\"CHRGD - DTH\",\"C+I - IPTV\",\"HALLA - IPTV\",\"FUTRE - FoNSE\",\"MOI - IPTV\",\"NUETV - FoNSE\",\"CASA - IPTV\",\"ATNSK - FoNSE\",\"AFRO - IPTV\",\"PBSMH - FoNSE\",\"SE - DTH\",\"OUITV - FoNSE\",\"ODYS1 - FoNSE\",\"CTVTI - DTH\",\"ANMHD - IPTV\",\"ABCHD - FoNSE\",\"CITYC - DTH\",\"W - IPTV\",\"CNPOP - IPTV\",\"Vu28 - DTH\",\"SM21 - IPTV\",\"ICI - IPTV\",\"AHC - IPTV\",\"PTC - IPTV\",\"RTS-S - IPTV\",\"YOPHD - DTH\",\"VISON - FoNSE\",\"CBC-T - IPTV\",\"CNBC - IPTV\",\"LCNHD - DTH\",\"CMDYH - FoNSE\",\"ATNZM - FoNSE\",\"CTVNO - DTH\",\"FOX-B - IPTV\",\"TVOHD - IPTV\",\"HERZ - DTH\",\"WSBKH - IPTV\",\"VIE - DTH\",\"CINQ - IPTV\",\"COLOR - DTH\",\"FAMJR - IPTV\",\"PCHHD - IPTV\",\"ICIRL - DTH\",\"SHOP - FoNSE\",\"TSNRM - DTH\",\"CAR-I - IPTV\",\"ODYS1 - DTH\",\"ICIHD - IPTV\",\"HUNTV - IPTV\",\"NBCHW - DTH\",\"DDIND - IPTV\",\"CMDYG - DTH\",\"AATHS - IPTV\",\"WEASW - IPTV\",\"CTYHT - IPTV\",\"ATN - IPTV\",\"AFROM - FoNSE\",\"TMN Encore West (ENC1W) - DTH\",\"Audio Encoder\",\"FGHTH - FoNSE\",\"SNSEN - N/A - IPTV\",\"ALSAT - FoNSE\",\"DVELO - FoNSE\",\"FAM-W - IPTV\",\"MTHD - FoNSE\",\"GLBPJ - IPTV\",\"CW11 - DTH\",\"WRN - DTH\",\"TMN1E - DTH\",\"Vu26 - DTH\",\"ANQHD - IPTV\",\"CMTHD - FoNSE\",\"2STV - IPTV\",\"SCHDG - IPTV\",\"TVAQH - IPTV\",\"GSNHD - IPTV\",\"Vu33 - DTH\",\"CPWA - IPTV\",\"BBCNH - IPTV\",\"CHRHD - FoNSE\",\"CBCOH - FoNSE\",\"OMNVH - IPTV\",\"CTVLH - DTH\",\"ICI-Q - IPTV\",\"ALPHA - FoNSE\",\"MASAL - IPTV\",\"HIFI - IPTV\",\"M3EHD - DTH\",\"TVASB / TVASh - DTH\",\"ENC1E - DTH\",\"PBS-W - DTH\",\"HBOH1 - FoNSE\",\"BNN - DTH\",\"FOX-D - IPTV\",\"LVNTR - IPTV\",\"DSNYH - FoNSE\",\"CYRT - IPTV\",\"BET - IPTV\",\"GLFHD - DTH\",\"H2 - IPTV\",\"UNISH - IPTV\",\"TMN3W - DTH\",\"DDBHA - IPTV\",\"CBC-O - DTH\",\"CBS-D - IPTV\",\"GOLF - IPTV\",\"METMH - IPTV\",\"RTRP - IPTV\",\"Vu39 - DTH\",\"2CTVO - IPTV\",\"ALPHA - IPTV\",\"ALPHA - DTH\",\"GOLF - DTH\",\"CKPR - DTH\",\"TTFHD - IPTV\",\"BBCNH - FoNSE\",\"S+HD - DTH\",\"ATNSB - FoNSE\",\"PRS2H - IPTV\",\"UNIS - IPTV\",\"Z - DTH\",\"HS00 - IPTV\",\"E! - DTH\",\"TVAML - DTH\",\"TELEF - swapped to HD - FoNSE\",\"MOMO - IPTV\",\"CBSHB - FoNSE\",\"APTNH - FoNSE\",\"V-RL - IPTV\",\"RDSHD - IPTV\",\"FNTSH - FoNSE\",\"WOWHD - IPTV\",\"SM32 - FoNSE\",\"CTVTI - IPTV\",\"TVE - IPTV\",\"ICIHT - FoNSE\",\"KTLA - DTH\",\"FOXHV - FoNSE\",\"CP24H - DTH\",\"VNUS9 - DTH\",\"SNH-O - IPTV\",\"TSN4H - IPTV\",\"CTV-H - DTH\",\"PRISE - DTH\",\"TSN5H - DTH\",\"SUPR2 - IPTV\",\"ALRSL - IPTV\",\"CSUR - IPTV\",\"A\u0026EHD - FoNSE\",\"OLN - DTH\",\"AFR24 - FoNSE\",\"ERT - IPTV\",\"HLN - IPTV\",\"VRTTV - IPTV\",\"SCHD1 - DTH\",\"APTNH - DTH\",\"ARY-Z - FoNSE\",\"BBC-A - FoNSE\",\"NBAHD - IPTV\",\"SCGNX - IPTV\",\"TTHD - FoNSE\",\"WGN - DTH\",\"CMDYW - DTH\",\"ATNTP - FoNSE\",\"CAR-I - FoNSE\",\"GLBHT - DTH\",\"W - DTH\",\"CBCNA - DTH\",\"EVASI - IPTV\",\"CIN1G - IPTV\",\"NFLHD - DTH\",\"FXXCH - IPTV\",\"CBCEH - DTH\",\"ATNTP - IPTV\",\"CCTV - FoNSE\",\"SBTN - FoNSE\",\"HAITI - FoNSE\",\"SM6 - IPTV\",\"CBCNN - DTH\",\"BIMBI - IPTV\",\"COLOR - IPTV\",\"PEACH - IPTV\",\"MSITA - IPTV\",\"B4U - FoNSE\",\"HDV25 (VuHD5) - DTH\",\"CBCVR - DTH\",\"EUROG - IPTV\",\"SNH-W - IPTV\",\"FIBE1 - IPTV\",\"CTVPA - DTH\",\"SAISN - IPTV\",\"TAC5 - IPTV\",\"RTVI - DTH\",\"Vu9 - DTH\",\"ADDIK - IPTV\",\"AMitv - IPTV\",\"ZEEBD - IPTV\",\"AFROH - IPTV\",\"EN1EH - IPTV\",\"HDV12 (VuHD4) - DTH\",\"GLBVH - DTH\",\"CCTV4 - FoNSE\",\"VuF16 - DTH\",\"H2HD - FoNSE\",\"KAPTV - IPTV\",\"V-HD - FoNSE\",\"SM4 - IPTV\",\"OMNBC - DTH\",\"EVAHD - FoNSE\",\"Vu32 - DTH\",\"CBSHB - IPTV\",\"DIYHD - IPTV\",\"SLCHD - FoNSE\",\"NDTV - DTH\",\"SNWLH - FoNSE\",\"RAI - DTH\",\"CBCVH - DTH\",\"Vu25 - DTH\",\"APTNH - IPTV\",\"DRAMA - IPTV\",\"ATNBA - culled Oct 13 - IPTV\",\"CPACF - FoNSE\",\"PATV - IPTV\",\"FILMY - IPTV\",\"CTV-O - IPTV\",\"VuF13 - DTH\",\"SNSNH - IPTV\",\"OUTTV - IPTV\",\"RDHOT - IPTV\",\"CHX2H - FoNSE\",\"RTDY - FoNSE\",\"FLTV - FoNSE\",\"SUN - IPTV\",\"SLVSC - IPTV\",\"VuF3 - DTH\",\"2STV - FoNSE\",\"OMNVH - FoNSE\",\"RCVu3 - DTH\",\"WFN - DTH\",\"TRVHD - IPTV\",\"CBCNN - IPTV\",\"GUSTH - DTH\",\"HDV26 (VuHD7) - DTH\",\"SNETP - DTH\",\"KTLA - IPTV\",\"MANGO - culled october 2016 - IPTV\",\"HDVu7 (PPVH2) - DTH\",\"TELMH - IPTV\",\"HITS - IPTV\",\"BIMBI - FoNSE\",\"PBSWD - IPTV\",\"CTC - FoNSE\",\"MUCHH - FoNSE\",\"TVATH - FoNSE\",\"KAPTV - FoNSE\",\"CTVEH - DTH\",\"NOV-A - FoNSE\",\"COSMO - IPTV\",\"CTYCH - DTH\",\"ABCHB - FoNSE\",\"PEACH - DTH\",\"TSNR - DTH\",\"SCHDV - IPTV\",\"OM2HD - FoNSE\",\"CBC-C - IPTV\",\"BNNHD - DTH\",\"TVP - IPTV\",\"CTVSS - IPTV\",\"RBTi - FoNSE\",\"ATNTN - IPTV\",\"TVNAI - FoNSE\",\"S+ - IPTV\",\"Splicer\",\"RAI-N - IPTV\",\"POLR1 - DTH\",\"HS70 - FoNSE\",\"OM1HD - IPTV\",\"SE2HD - IPTV\",\"FAIR2 - DTH\",\"ENC2E - IPTV\",\"24TAS - IPTV\",\"VuF19 - DTH\",\"M3EHD - FoNSE\",\"DW-TV - IPTV\",\"PPV4 - IPTV\",\"FOXHW - DTH\",\"CANSH - FoNSE\",\"TVA-Q - IPTV\",\"IDHD - IPTV\",\"FOX-W - DTH\",\"WGN - IPTV\",\"GSN - DTH\",\"NGWHD - DTH\",\"TREEH - DTH\",\"NICK - IPTV\",\"HRT - IPTV\",\"CHEX2 - IPTV\",\"KHL - FoNSE\",\"PHNIX - IPTV\",\"ICIQH - FoNSE\",\"GLB-E - DTH\",\"TVASP - DTH\",\"V-G - DTH\",\"MTV - IPTV\",\"VGHD - IPTV\",\"MAGIO - IPTV\",\"TSN5H - FoNSE\",\"AFR24 - IPTV\",\"CEEN - FoNSE\",\"CBS-B - IPTV\",\"CRK+ - IPTV\",\"DXDHD - FoNSE\",\"SM15 - IPTV\",\"MAX - DTH\",\"CHAKD - IPTV\",\"ICI-V - DTH\",\"CBC-A - DTH\",\"PRS2H - DTH\",\"SM7 - IPTV\",\"CNN - DTH\",\"TSN4A - IPTV\",\"ICIRN - DTH\",\"HPI-2 (Canadian Odds Channel) - channel culled - IPTV\",\"HGTVH - DTH\",\"ABC-D - IPTV\",\"OLAHD - FoNSE\",\"PENTH - IPTV\",\"VKMHD - FoNSE\",\"SBR-V - FoNSE\",\"RTPI - FoNSE\",\"CMDWH - FoNSE\",\"TFOHD - FoNSE\",\"ADDHD - DTH\",\"SM35 - FoNSE\",\"ATN - FoNSE\",\"ARTV - IPTV\",\"TV5 - IPTV\",\"TSN2H - DTH\",\"CTVHC - DTH\",\"HS70 - DTH\",\"STARM - IPTV\",\"TVARK - DTH\",\"TVAQH - FoNSE\",\"ETGLB (Channel culled march 1st) - FoNSE\",\"MTHD - IPTV\",\"DDURD - IPTV\",\"VRKHD - DTH\",\"TVCHL - IPTV\",\"HDV20 (HPPV6) - DTH\",\"FOODH - DTH\",\"CTVHV - FoNSE\",\"CTV-K - DTH\",\"EVASI - DTH\",\"SEHD - DTH\",\"SM7 - FoNSE\",\"CFTV - DTH\",\"CBC-E - DTH\",\"DISC - IPTV\",\"RDIHD - FoNSE\",\"CP24H - FoNSE\",\"TFO - DTH\",\"SSCTV - IPTV\",\"ICISh - DTH\",\"CHET - DTH\",\"OMN-E - DTH\",\"GLB-S - DTH\",\"FOXHD - IPTV\",\"CBC-T - DTH\",\"RIZN - IPTV\",\"R-CLP - IPTV\",\"SPRT+ - IPTV\",\"GLB-H - DTH\",\"AFLAM - FoNSE\",\"SM11 - IPTV\",\"CINEB - FoNSE\",\"CPUNJ - FoNSE\",\"CTVHT - IPTV\",\"RDIHD - DTH\",\"VuF18 - DTH\",\"CBSHV - FoNSE\",\"ATNS - FoNSE\",\"TG24 - FoNSE\",\"TVA-Q - DTH\",\"OWN - IPTV\",\"CBCNH - FoNSE\",\"R-AFM - IPTV\",\"LFSHD - IPTV\",\"ARYDG - FoNSE\",\"FMLYH - DTH\",\"TAMIL - IPTV\",\"GLBMH - DTH\",\"HPI-C - DTH\",\"SM26 - FoNSE\",\"TMN4E - IPTV\",\"Sony - DTH\",\"V-TRH - FoNSE\",\"FXXCH - FoNSE\",\"PAHR - IPTV\",\"FAIRM - IPTV\",\"TG24 - IPTV\",\"WSBK - DTH\",\"A\u0026E - DTH\",\"BRBTV - IPTV\",\"M4EHD - FoNSE\",\"ANT3 - FoNSE\",\"FMLY - DTH\",\"R-DRM - IPTV\",\"RTS - IPTV\",\"EWTN - IPTV\",\"MAGIH - IPTV\",\"TVASP - IPTV\",\"RISHT - IPTV\",\"PROSB - IPTV\",\"VIEHD - DTH\",\"TREEH - FoNSE\",\"RTNC - IPTV\",\"VIEHD - FoNSE\",\"CMDYH - IPTV\",\"TSN2 - IPTV\",\"MEGA - IPTV\",\"TTFHD - FoNSE\",\"CANSH - IPTV\",\"CBCCH / CBCHC - FoNSE\",\"CSMOH - IPTV\",\"KINO - FoNSE\",\"MM-NO - IPTV\",\"CBCEH - IPTV\",\"SM10 - IPTV\",\"RTL - FoNSE\",\"V-SGN - DTH\",\"SE3 - IPTV\",\"HBOH1 - DTH\",\"M2EHD - DTH\",\"ASIDH - FoNSE\",\"FIGHT - DTH\",\"SN1HD - FoNSE\",\"DSNFH - FoNSE\",\"MAKFL(duplicate) - IPTV\",\"CHAKD - FoNSE\",\"AFRMU - FoNSE\",\"WEA-M - IPTV\",\"TOONE - IPTV\",\"FAIR - IPTV\",\"NICKH - IPTV\",\"DXDHD - DTH\",\"CPUNJ - IPTV\",\"CTYMH - FoNSE\",\"NDTVG - IPTV\",\"CMDYG - FoNSE\",\"M1EHD - DTH\",\"B4U-M - FoNSE\",\"NWS18 - IPTV\",\"ZING - IPTV\",\"SHWHD - FoNSE\",\"CFRB - DTH\",\"CNNHD - DTH\",\"CITYT - DTH\",\"DIY - FoNSE\",\"MASAL - FoNSE\",\"MTVHD - IPTV\",\"ANQ - DTH\",\"CKWSH - FoNSE\",\"FAMJR - DTH\",\"TVO - DTH\",\"TSP2H - FoNSE\",\"YOOPA - IPTV\",\"HDVu5 (PPVH0) - DTH\",\"AASTH - IPTV\",\"DTRHD - IPTV\",\"CBCVH - IPTV\",\"V-TR - IPTV\",\"HPI-I - FoNSE\",\"STARC - FoNSE\",\"KTLAH - DTH\",\"HDV16 (PPVH4) - DTH\",\"TAC4 - IPTV\",\"CNNI - FoNSE\",\"TSN5 - DTH\",\"OMNBC - IPTV\",\"NPR* / NPR - DTH\",\"CARVN - IPTV\",\"CNNHD - FoNSE\",\"CNBC - FoNSE\",\"ABC-V - IPTV\",\"WSBKH - DTH\",\"ABCHD - IPTV\",\"CP24H - IPTV\",\"CIUT - IPTV\",\"TVNAI - IPTV\",\"SM13 - FoNSE\",\"SM33 - IPTV\",\"Vu29 - DTH\",\"AMIa - FoNSE\",\"MET-Q - FoNSE\",\"PHNIX - DTH\",\"HDVu/HPPV0 - DTH\",\"AJE - IPTV\",\"CBSHW - DTH\",\"TSNRW - DTH\",\"TVREC - FoNSE\",\"RDS2 - IPTV\",\"CTYML - IPTV\",\"SM3 - FoNSE\",\"CIBL - IPTV\",\"RTL-I - FoNSE\",\"D - IPTV\",\"MPHD - IPTV\",\"CBCWD - IPTV\",\"FNTSY - IPTV\",\"ALNRD - IPTV\",\"SM33 - FoNSE\",\"DTSKY - IPTV\",\"TVREC - IPTV\",\"SLCHD - IPTV\",\"NBCHB - IPTV\",\"CGTND - IPTV\",\"CAN-S - IPTV\",\"DOCHD - FoNSE\",\"NBC-E - DTH\",\"CTV-V - IPTV\",\"BRAVO - IPTV\",\"CAN-2 - IPTV\",\"SNWLH - DTH\",\"SPACE - DTH\",\"CHEXH - IPTV\",\"CTVHT - FoNSE\",\"FOXHV - IPTV\",\"VRAK - DTH\",\"BET - DTH\",\"SCIHD - DTH\",\"YTVHD - IPTV\",\"Vu17 - DTH\",\"SPRT+ - FoNSE\",\"CRK+ - FoNSE\",\"CPACF - IPTV\",\"SM25 - IPTV\",\"Vu31 - DTH\",\"GLBHX / GLB-H - IPTV\",\"CBCHH - IPTV\",\"OUTHD - IPTV\",\"SE4 - IPTV\",\"OLNHD - DTH\",\"CTV-R - DTH\",\"VIEHD - IPTV\",\"Vu24 - DTH\",\"CTV2O - IPTV\",\"CEEN - IPTV\",\"V-MTL - DTH\",\"MOI - DTH\",\"SUPR1 - DTH\",\"SM1 - FoNSE\",\"GLBMH - IPTV\",\"CTV2L - DTH\",\"YOPHD - IPTV\",\"AFROM - IPTV\",\"CSMOH - FoNSE\",\"HAITI - IPTV\",\"ATN-F - FoNSE\",\"H2HD - IPTV\",\"SE3HD - IPTV\",\"UTV-M - IPTV\",\"TSN3A - IPTV\",\"GUSTH - IPTV\",\"SBTVA - FoNSE\",\"FRA24 - FoNSE\",\"GLBHX / GLB-H - FoNSE\",\"CBCOH - DTH\",\"RITMO - IPTV\",\"VIE - IPTV\",\"SM9 - IPTV\",\"HPI-C - IPTV\",\"CTVHH - IPTV\",\"GLBTB - DTH\",\"M1EHD - IPTV\",\"CTV-K - IPTV\",\"TOONF - IPTV\",\"TFCPH - IPTV\",\"OUTTV - DTH\",\"CTVRH - DTH\",\"SNWLH - IPTV\",\"V-SGN - IPTV\",\"RDS - IPTV\",\"RTVI - FoNSE\",\"R-CLP - FoNSE\",\"ICITR - DTH\",\"SM14 - FoNSE\",\"OM2HD - IPTV\",\"ABCSP - DTH\",\"GEOTV - FoNSE\",\"Vu3 (PPV2) - DTH\",\"TREEH - IPTV\",\"EUROR - IPTV\",\"VICE - DTH\",\"BBC-E - IPTV\",\"ATNGU - FoNSE\",\"STARC - IPTV\",\"FJHD - IPTV\",\"ICIRK - DTH\",\"CHEX - IPTV\",\"SNH-E - DTH\",\"C1R - IPTV\",\"PPV1 - DTH\",\"TOONE - DTH\",\"NBC-V - IPTV\",\"ERT - FoNSE\",\"BEJTV - IPTV\",\"ICITR - IPTV\",\"CMDWH - IPTV\",\"B4U - DTH\",\"SM42 - FoNSE\",\"FLTV - IPTV\",\"TVI-P - FoNSE\",\"CW11H - FoNSE\",\"TFOHD - DTH\",\"COTT - DTH\",\"OMNI2 - IPTV\",\"TETHD - FoNSE\",\"CTV2A - DTH\",\"CPOPH - DTH\",\"YESHD - IPTV\",\"DTOUR - IPTV\",\"TVA-G - IPTV\",\"ZEETK - IPTV\",\"ABCHB - IPTV\",\"NFL-N - DTH\",\"Vu15 - DTH\",\"CHRHD - DTH\",\"RCVu5 - DTH\",\"FLTV - DTH\",\"LSTYL - FoNSE\",\"SM2 - FoNSE\",\"GLBMH - FoNSE\",\"BBC-A - IPTV\",\"RDS2H - IPTV\",\"NBCHV - FoNSE\",\"CNTV - FoNSE\",\"SM1 - IPTV\",\"ALSAT - IPTV\",\"VNUS3 - DTH\",\"Vu18 - DTH\",\"OMNI1 - DTH\",\"NBC-B - IPTV\",\"ARTVH - FoNSE\",\"ACTN - DTH\",\"MUCH - DTH\",\"DSNYH - DTH\",\"SLCHD - DTH\",\"GEO - DTH\",\"CAR-R - IPTV\",\"SNH-P - IPTV\",\"SSTV - IPTV\",\"Z-HD - IPTV\",\"FTV - FoNSE\",\"APTNn - DTH\",\"RCVu0 - DTH\",\"PBSHW - FoNSE\",\"SM2 - IPTV\",\"BEINH - IPTV\",\"TVATR - DTH\",\"W-HD - IPTV\",\"AMI-F - IPTV\",\"BRVOH - DTH\",\"TTHD - DTH\",\"TCMHD - DTH\",\"TLN+ - FoNSE\",\"CTYHT - FoNSE\",\"RAWAL - IPTV\",\"TELHD - IPTV\",\"NTN24 - FoNSE\",\"TVACM - DTH\",\"R-CIN - FoNSE\",\"PLBOY - DTH\",\"CPAC - DTH\",\"CHAA - IPTV\",\"EVNTS - DTH\",\"M2WHD - DTH\",\"PUNJ5 - IPTV\",\"DESJA - DTH\",\"BRVOH - IPTV\",\"ALRSL - FoNSE\",\"DSNYH - IPTV\",\"FJHD - FoNSE\",\"CBCMH - FoNSE\",\"CBCMH - DTH\",\"DISCH - IPTV\",\"Sony - FoNSE\",\"RTRP - FoNSE\",\"SE - IPTV\",\"PLN+H - IPTV\",\"CHANI - FoNSE\",\"ICITo - IPTV\",\"LEAFS - DTH\",\"CBSHD - IPTV\",\"ABCHV - FoNSE\",\"HIST - IPTV\",\"TCM - DTH\",\"VNUS0 - DTH\",\"CBCHW - FoNSE\",\"ATN-F - IPTV\",\"DVELO - IPTV\",\"TSN4H - FoNSE\",\"TTHD - IPTV\",\"RTDY - DTH\",\"HPI-I - IPTV\",\"WMOVH - IPTV\",\"VCTV2 - DTH\",\"DRGTV - IPTV\",\"ABCSH - IPTV\",\"HBO1 - DTH\",\"ALNHR - FoNSE\",\"GLBHT - FoNSE\",\"VNUS7 - DTH\",\"EXPLH - IPTV\",\"360HD - DTH\",\"SCI - DTH\",\"FOXLF - IPTV\",\"AAJTK - FoNSE\",\"BENTV - FoNSE\",\"TSNH3 - FoNSE\",\"ATNU - FoNSE\",\"MOIHD - IPTV\",\"V-QBC - IPTV\",\"TSN3H - DTH\",\"CKPRH - DTH\",\"FAM-W - DTH\",\"CLRSB - FoNSE\",\"OWNHD - FoNSE\",\"A\u0026E - IPTV\",\"MBC - IPTV\",\"CBCCH / CBCHC - IPTV\",\"CTVNB - IPTV\",\"ALGER - IPTV\",\"PACR - IPTV\",\"ICI-A - DTH\",\"OLA - IPTV\",\"RDSIN - IPTV\",\"PBS-B - IPTV\",\"Rede Globo (GLOBO) - Brazil - IPTV\",\"HRT - FoNSE\",\"PPV5 - IPTV\",\"SMIX - FoNSE\",\"V-RL - DTH\",\"EUROF - FoNSE\",\"SM40 - FoNSE\",\"TVPOL - DTH\",\"DTRHD - DTH\",\"ABC-W / ABCSe - DTH\",\"BEINS - IPTV\",\"TSN5 - IPTV\",\"UNIVS - FoNSE\",\"CAN-2 - FoNSE\",\"2MM - FoNSE\",\"CBC-W - DTH\",\"SM27 - FoNSE\",\"ENC2E - DTH\",\"DTSKY - FoNSE\",\"CTYVH - IPTV\",\"CTV-Y - DTH\",\"ATN-B - IPTV\",\"MPHD - DTH\",\"RCVu2 - DTH\",\"CMT - IPTV\",\"VGHD - DTH\",\"HDVu (HPPV0) - DTH\",\"ARYDG - IPTV\",\"TALNT - FoNSE\",\"HUMTV - IPTV\",\"STARM - FoNSE\",\"SE2 - DTH\",\"VuF14 - DTH\",\"CMDYW - IPTV\",\"RIZN - FoNSE\",\"MAKFL(duplicate) - DTH\",\"SM39 - FoNSE\",\"SUN - FoNSE\",\"SMITH - IPTV\",\"BBC-C - FoNSE\",\"JLTV - IPTV\",\"MTV2 - IPTV\",\"91.9FM - DTH\",\"WN-NO - IPTV\",\"TSN5A - IPTV\",\"KTLAH - IPTV\",\"HISTO - IPTV\",\"WWEHD - IPTV\",\"CBC-W - IPTV\",\"FTV - IPTV\",\"PPVF1 (No longer in use) - IPTV\",\"Vu14 (PPV3) - DTH\",\"DAWN - culled April 30 - IPTV\",\"CBSHD - FoNSE\",\"Vu2 - DTH\",\"HDV18 (HPPV9) - DTH\",\"ICI-O - IPTV\",\"LCN - IPTV\",\"TELEQ - IPTV\",\"AASTH - FoNSE\",\"NBCSE - IPTV\",\"BOOK - IPTV\",\"GUANG - IPTV\",\"AFRMU - IPTV\",\"SE4 - DTH\",\"HDVu6 (PPVH1) - DTH\",\"NTV-B - FoNSE\",\"MTHD - DTH\",\"CTV-T - IPTV\",\"GMA-N - IPTV\",\"TVAGH - FoNSE\",\"S+L - FoNSE\",\"RDSHD - DTH\",\"AHC - FoNSE\",\"YES - DTH\",\"DRAMA - FoNSE\",\"SHWHD - IPTV\",\"SNH-O - DTH\",\"CBCWD - DTH\",\"ZTAM - IPTV\",\"Vu38 - DTH\",\"CTV2E - IPTV\",\"PPVE1  (No longer in use) - IPTV\",\"C1R - FoNSE\",\"BBC-K - DTH\",\"AFROH - FoNSE\",\"METNH - IPTV\",\"SM11 - FoNSE\",\"NBCHD - FoNSE\",\"RDSHD - FoNSE\",\"CASAH - FoNSE\",\"VU6 - DTH\",\"CBCHW - IPTV\",\"PTC - DTH\",\"ZEE-B - IPTV\",\"CHCH - DTH\",\"TOONW - FoNSE\",\"CTYMH - IPTV\",\"SM44 - IPTV\",\"RTS - FoNSE\",\"VNUS1 - DTH\",\"TVOHD - FoNSE\",\"HUMTV - FoNSE\",\"CMDYG - IPTV\",\"CHCHH - DTH\",\"TVAS2 - IPTV\",\"SE3HD - DTH\",\"TMN1W - DTH\",\"LCN - DTH\",\"SM10 - FoNSE\",\"OMNI2 - DTH\",\"TVASH - IPTV\",\"ASIDH - IPTV\",\"SICN - FoNSE\",\"CBCEH - FoNSE\",\"OLNHD - IPTV\",\"ESPNC - FoNSE\",\"FPTV - FoNSE\",\"CBCWH - FoNSE\",\"NDTV - FoNSE\",\"CPAC - FoNSE\",\"FAM-W - FoNSE\",\"A\u0026EHD - DTH\",\"TVATR - IPTV\",\"CJAD - DTH\",\"HISTO - DTH\",\"TAML1 - IPTV\",\"Vu10 - DTH\",\"AFLAM - IPTV\",\"HIFI - DTH\",\"HSTHD - IPTV\",\"24TAS - FoNSE\",\"TVJPN - IPTV\",\"ETGLB (Channel culled march 1st) - IPTV\",\"BEINH - FoNSE\",\"ALL-K - FoNSE\",\"SM6 - FoNSE\",\"GEOHD - IPTV\",\"SM31 - FoNSE\",\"DEJA - DTH\",\"ABCHE - DTH\",\"CBC2V - DTH\",\"FEVA - FoNSE\",\"FPTV - IPTV\",\"HPI-2 (Canadian Odds Channel) - channel culled - DTH\",\"FAIRM - FoNSE\",\"PHNIX - FoNSE\",\"INVHD - DTH\",\"ICIMH - DTH\",\"ALARB - IPTV\",\"CHANI - IPTV\",\"CTVHH - DTH\",\"MOMO - FoNSE\",\"EWTN - FoNSE\",\"PBS-V - IPTV\",\"TLC - DTH\",\"CTV2L - IPTV\",\"FOX-V - IPTV\",\"CBS-E - DTH\",\"RCVu4 - DTH\",\"MUCH - IPTV\",\"FAIR - FoNSE\",\"DOCHD - IPTV\",\"CHAI - IPTV\",\"WLDTV - IPTV\",\"ASIDE - IPTV\",\"SM34 - IPTV\",\"TICTV - IPTV\",\"CBS-W / CBSSe - IPTV\",\"AJE - DTH\",\"PUNTV - IPTV\",\"EN1WH - DTH\",\"R-AFM - FoNSE\",\"ZSAL - IPTV\",\"RDS2 - DTH\",\"HDV10 (VuHD2) - DTH\",\"TVAGH - DTH\",\"ALGER - FoNSE\",\"CITYV/CTYVr - DTH\",\"CASAH - DTH\",\"SETM - FoNSE\",\"SM31 - IPTV\",\"PBSHB - IPTV\",\"ANQHD - FoNSE\",\"MTVIN - IPTV\",\"GMA - IPTV\",\"SCHD2 - IPTV\",\"SE3HD - FoNSE\",\"RTDY - IPTV\",\"ZESTE - DTH\",\"NOVAW - FoNSE\",\"FNTSH - IPTV\",\"VGHD - FoNSE\",\"BET - FoNSE\",\"E!HD - FoNSE\",\"CITYS - DTH\",\"SBR-V - IPTV\",\"LCNHD - FoNSE\",\"TVARL - IPTV\",\"SNH-E - IPTV\",\"RCVu6 - DTH\",\"TAMIL - FoNSE\",\"ITN - IPTV\",\"CBUFF - DTH\",\"TVCHL - FoNSE\",\"CGTN - FoNSE\",\"WEAOG - IPTV\",\"HDVu9 (VuHD1) - DTH\",\"TAMIL - DTH\",\"SCHDV - DTH\",\"2CTVO - FoNSE\",\"RDS - DTH\",\"CHCO - DTH\",\"FOXHE - DTH\",\"SBTVA - IPTV\",\"FOXNC - DTH\",\"YOOPA - DTH\",\"AHC - DTH\",\"CBN - FoNSE\",\"ICIMH - IPTV\",\"BEINS - FoNSE\",\"5KANL - IPTV\",\"ATNPN - IPTV\",\"ACTNH - FoNSE\",\"HERZ - IPTV\",\"HOPE - DTH\",\"OWNHD - DTH\",\"IFC - FoNSE\",\"YTV-E - DTH\",\"NBCHV - IPTV\",\"CTYMH - DTH\",\"AZMDO - IPTV\",\"TSN4 - IPTV\",\"LTIME - IPTV\",\"PRISE - IPTV\",\"CTVOH - FoNSE\",\"ONE - IPTV\",\"BRBTV - FoNSE\",\"FYIHD - IPTV\",\"CTVHV - DTH\",\"STR-G - IPTV\",\"NTDTV - IPTV\",\"LSTTV - FoNSE\",\"2MM - IPTV\",\"E!HD - DTH\",\"TV84 - IPTV\",\"PBSHD - FoNSE\",\"ARY-Q - IPTV\",\"TSN4H - DTH\",\"KTV - FoNSE\",\"UNISH - FoNSE\",\"CNTV - IPTV\",\"E! - IPTV\",\"HIST - DTH\",\"ISRAE - FoNSE\",\"SM35 - IPTV\",\"DISCH - FoNSE\",\"CKPGH - DTH\",\"TVA-G - DTH\",\"TOONW - IPTV\",\"MET-O - IPTV\",\"ADDHD - FoNSE\",\"HDVu3 (VuHD0) - DTH\",\"SM36 - IPTV\",\"4E - FoNSE\",\"WSBK - IPTV\",\"Global Lloydminster HD (CKSAH) - DTH\",\"MAKFL(duplicate) - FoNSE\",\"ENC1E - IPTV\"],\"serviceGroupsToExclude\":[],\"openLabels\":true,\"hideClearItems\":true,\"hideMaintItems\":false,\"hideAlarmedItems\":false,\"largeIcons\":false,\"entries\":[],\"initiallyExpanded\":true}","x":0,"widget":"groupsWidget","w":12}],"uuid":"048f59b4-1e17-428e-a1d4-fa16262b3be6"}}
{"CurrentServiceRefIds":{"uuid":"078abae5-7412-3a94-9918-838705a13137","currentRefIds":["02f790c8-26e4-4ad5-8b67-bc59f5cdb7a2","84ef0241-2bd6-4919-a8df-9e09bb645d88","6d49d480-5300-499f-96a1-ba9b94d3b318","a0e0d338-2287-40e0-9128-13a66bc7aced","b93561f1-2c5c-4ae1-9aec-5a193ba25d59","b54dcc93-3158-4bd0-ba2d-9878ebb7f87d","6375cba3-0469-4465-8eb0-5eddbb7629a1","27af3c25-edf3-4943-b9fb-3e68587825fd","0dda7d36-792f-453f-9afb-d231058ea1c9","8c4f6cd0-f450-449c-829d-6d48c18f38ad","c339a5ab-cd1e-4747-87d6-c5e8c23c68e7","82de0965-c09f-4c8b-ab33-60f852e73cfa","92d4aa60-7b85-4047-969e-ae96ab000085","b9d7175f-12f0-4642-bb95-9e7925594139"],"backupRefIds":[],"ownerUUID":"cf1ba792-8cb2-42f8-86a7-494338b18cb2"}}
{"DashboardSettings":{"uuid":"64f01475-66c1-3b4f-91b4-9562ec79c20e","ownerUUID":"86a46590-6f0e-3dc8-8865-924cf8d38bec","currentDashboard":{"uuid":"a5c3f37a-e9a0-45ae-92d6-1f43ba2a3301"},"openDashboards":[{"uuid":"ebe96b66-c4db-4c82-8c43-157ef5428e48"},{"uuid":"c5888a73-6c88-490b-b9d1-f11265b3cebf"},{"uuid":"8f3ab456-3fdf-41e1-a0de-8a873b23df85"},{"uuid":"324689ce-4c08-4790-8f88-d727d7098400"},{"uuid":"8f3ab456-3fdf-41e1-a0de-8a873b23df85"},{"uuid":"e1000b1e-bc45-4b01-ae39-8f3af5dafbf1"},{"uuid":"324689ce-4c08-4790-8f88-d727d7098400"},{"uuid":"ebe96b66-c4db-4c82-8c43-157ef5428e48"},{"uuid":"c5888a73-6c88-490b-b9d1-f11265b3cebf"},{"uuid":"a5c3f37a-e9a0-45ae-92d6-1f43ba2a3301"},{"uuid":"a79abdad-5cc4-4909-87ee-2a3feed11b4d"},{"uuid":"8d7c39db-40ee-48d0-8eca-4dc68c642bfd"},{"uuid":"51b8e4e4-4376-4c87-a4d7-312b4c063e9f"},{"uuid":"590ecb61-7de5-4161-bf6f-a60e4b8ac4c5"},{"uuid":"2b215eae-b83a-4881-9a2c-78cd7c00c873"},{"uuid":"6d6df49a-d9e4-4f1c-86cb-c833809ea5d7"},{"uuid":"fe71ead2-cc9f-4b8a-9224-45c692205afb"},{"uuid":"f9d75231-687c-4b04-9c39-79f69fae8024"},{"uuid":"4e4c3426-7538-496c-8d99-935e31179118"},{"uuid":"c2bcdfdc-8c70-437f-82ea-871c3a30c2a4"},{"uuid":"f29044df-e38a-4c9d-aed7-9aedc57edce5"},{"uuid":"06f5878b-23b5-4b3a-ad69-c617d29ab50a"},{"uuid":"9bd5e3e2-a902-48e5-bd76-bc8ea95582a4"},{"uuid":"109f2509-bd48-4809-bae6-a929060f0b3a"},{"uuid":"961fae8d-c3da-4a39-a94f-546c193a4794"},{"uuid":"9c44a04e-b8b6-4a17-87dd-aab4a10a1241"},{"uuid":"dfb7fc76-f439-49e9-9a09-73b1e6c1b7bb"}]}}
{"SolverSourceFile":{"filename":"TicketPieChart.drl","ownerUUID":"b929dd04-331b-3b93-88ae-5d4a4b21fe96","fileContents":"package TicketWidget;\r\n\r\nimport com.codemettle.sherpa.datamodel.impl.workflow.Task;\r\nimport com.codemettle.sherpa.datamodel.impl.workflow.TaskList;\r\nimport com.codemettle.sherpa.datamodel.impl.workflow.SubmittedTaskForm;\r\nimport com.codemettle.sherpa.datamodel.impl.gui.SharingSettings;\r\nimport com.codemettle.sherpa.workflow.RuleUtils;\r\nimport com.google.gson.JsonObject;\r\nimport com.google.gson.JsonElement;\r\nimport org.kie.api.runtime.rule.RuleContext;\r\nimport org.kie.api.runtime.rule.QueryResults;\r\nimport org.kie.api.runtime.rule.QueryResultsRow;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.UUID;\r\n\r\n// function String getSimpleLayer(RuleUtils Utils) {\r\n//\r\n//     // Barebones default html\r\n//     String contents \u003d \"\"+\r\n//     \"\u003cform id\u003d\\\"placeholder\\\"\u003e\u003cdatalist id\u003d\\\"languages\\\"\u003e\u003coption value\u003d\\\"HTML\\\"\u003e\u003coption value\u003d\\\"CSS\\\"\u003e\u003coption value\u003d\\\"JavaScript\\\"\u003e\u003coption value\u003d\\\"Java\\\"\u003e\u003coption value\u003d\\\"Ruby\\\"\u003e\u003coption value\u003d\\\"PHP\\\"\u003e\u003coption value\u003d\\\"Go\\\"\u003e\u003coption value\u003d\\\"Erlang\\\"\u003e\u003coption value\u003d\\\"Python\\\"\u003e\u003coption value\u003d\\\"C\\\"\u003e\u003coption value\u003d\\\"C#\\\"\u003e\u003coption value\u003d\\\"C++\\\"\u003e\u003c/datalist\u003e\u003cinput type\u003d\\\"text\\\" list\u003d\\\"languages\\\"\u003e\u003c/form\u003e\";\r\n//\r\n//     Utils.logger(\"TicketPieChart\").info(\"Setting initial html state\");\r\n// \treturn contents;\r\n// }\r\n\r\n\r\nfunction List getSessions(RuleContext kcontext, RuleUtils Utils) {\r\n    ArrayList allSessions \u003d new ArrayList();\r\n    QueryResults res \u003d kcontext.getKieRuntime().getQueryResults(\"getSessionsQuery\");\r\n    for (QueryResultsRow row : res) {\r\n        SessionState session \u003d (SessionState)row.get(\"session\");\r\n        Utils.logger(\"TicketPieChart\").info(\"sessionstate uuid: \" + session.getUserId().toString());\r\n        allSessions.add(session);\r\n    }\r\n    //Utils.logger(\"getSessions\").info(\"sessions: \" + allSessions.toString());\r\n    return allSessions;\r\n}\r\n\r\nfunction List getSessionsForUser(RuleContext kcontext, RuleUtils Utils, String userUuidString) {\r\n    ArrayList sessions \u003d new ArrayList();\r\n    UUID userUuid \u003d UUID.fromString(userUuidString);\r\n    QueryResults res \u003d kcontext.getKieRuntime().getQueryResults(\"getSessionForUsedId\", userUuid);\r\n    for (QueryResultsRow row : res) {\r\n        SessionState session \u003d (SessionState)row.get(\"session\");\r\n        Utils.logger(\"TicketPieChart\").info(\"sessionstate uuid: \" + session.getUserId().toString());\r\n        sessions.add(session);\r\n    }\r\n    //Utils.logger(\"getSessions\").info(\"sessions: \" + sessions.toString());\r\n    return sessions;\r\n}\r\n\r\n\r\nrule \"Update Ticket Viewer\"\r\n    when\r\n        $json : JsonObject(has(\"newHTML\"))\r\n    then\r\n        Utils.logger(\"TicketPieChart\").info(\"Received JSON Object, updating html.\");\r\n        String newcode \u003d $json.get(\"newHTML\").getAsString();\r\n        String userUuid \u003d $json.get(\"userUuid\").getAsString();\r\n\r\n        // Updates the html of the current sessions, if there are any\r\n        List userSessions \u003d getSessionsForUser(kcontext, Utils, userUuid);\r\n        for (Object item : userSessions) {\r\n            SessionState session \u003d (SessionState)item;\r\n            Utils.logger(\"TicketPieChart - Update Form\").info(\"updating form for \" + session.getUserId());\r\n            TaskList tl \u003d new TaskList();\r\n            tl.add(Task.create(\"\", SharingSettings.forEverybody(), newcode, null, true));\r\n            Utils.sendJsonToSubscribers(session.getUserId().toString(), Utils.gson().toJson(tl));\r\n        }\r\nend\r\n\r\n\r\nrule \"Initialize Html for Session\"\r\n    when\r\n        $ss: SessionState(state \u003d\u003d \"loggedIn\")\r\n        $sr: GlobalSubscriptionsReady(state \u003d\u003d \"true\")\r\n    then\r\n        Utils.logger(\"Initial Form\").info(\"sharing initial form with \" + $ss.getUserId());\r\n        TaskList tl \u003d new TaskList();\r\n        tl.add(Task.create(\"\", SharingSettings.forEverybody(), \"\", null, true));\r\n        Utils.sendJsonToSubscribers($ss.getUserId().toString(), Utils.gson().toJson(tl));\r\n        modify($ss) { setState(\"initialFormPushed\"); }\r\n\r\n        //SEND A REQUEST FOR UPDATE TO TRANSLATOR\r\n        String userUuid \u003d $ss.getUserId().toString();\r\n        String jsonToSend \u003d \"{\\\"pageRequest\\\": \\\"pieChartView\\\",\" +\r\n                            \"\\\"userUuid\\\":\\\"\" + userUuid + \"\\\"}\";\r\n        Utils.sendJsonToQueue(\"ticketPieChartOutput.queue\", jsonToSend);\r\nend\r\n\r\nrule \"Button Press - Initial Ticket View\"\r\n    when\r\n        $tf: SubmittedTaskForm(getValue(\"pageRequest\") \u003d\u003d null)\r\n    then\r\n        Utils.logger(\"Button - View Tickets\").info(\"Button pressed, requesting html.\");\r\n        String userUuid \u003d $tf.getSubmittedBy().toString();\r\n        String newJson \u003d \"{\\\"pageRequest\\\": \\\"pieChartView\\\",\" +\r\n                            \"\\\"contents\\\":\" + Utils.gson().toJson($tf) + \",\" +\r\n                            \"\\\"userUuid\\\":\\\"\" + userUuid + \"\\\"}\";\r\n        Utils.sendJsonToQueue(\"ticketPieChartOutput.queue\", newJson);\r\nend\r\n\r\nrule \"Button Press - Page Requested\"\r\n    when\r\n        $tf: SubmittedTaskForm(getValue(\"pageRequest\") !\u003d null)\r\n    then\r\n        Utils.logger(\"Button - Add Ticket\").info(\"Button pressed, requesting html.\");\r\n        String userUuid \u003d $tf.getSubmittedBy().toString();\r\n        String newJson \u003d \"{\\\"pageRequest\\\": \\\"\" + $tf.getValue(\"pageRequest\") + \"\\\",\" +\r\n                            \"\\\"contents\\\":\" + Utils.gson().toJson($tf) + \",\" +\r\n                            \"\\\"userUuid\\\":\\\"\" + userUuid + \"\\\"}\";\r\n        Utils.sendJsonToQueue(\"ticketPieChartOutput.queue\", newJson);\r\nend\r\n\r\nquery \"getSessionsQuery\"\r\n    session: SessionState()\r\nend\r\n\r\nquery \"getSessionForUsedId\" (UUID aUserId)\r\n    session: SessionState(userId \u003d\u003d aUserId)\r\nend\r\n\r\n\r\n//query \"LineGraphHtmlKnowledgeObject\"\r\n//    so: SolverKnowledgeObject(key \u003d\u003d \"lineHtml\")\r\n//end\r\n\r\n//function saveLineHtmlCode(JsonObject json, RuleUtils Utils) {\r\n//    Utils.logger(\"Line Graph\").info(\"Saving Ticket HTML to database.\");\r\n//    Utils.saveKnowledgeObject(\"lineHtml\", json);\r\n//}end\r\n\r\n\r\n//function SolverKnowledgeObject getLineHtmlCode(org.kie.api.runtime.rule.RuleContext kcontext, RuleUtils utils) {\r\n//    SolverKnowledgeObject code \u003d getSoFromQuery(\"LineGraphHtmlKnowledgeObject\", kcontext, utils);\r\n//    return code;\r\n//}\r\n\r\n//function SolverKnowledgeObject getSoFromQuery(String query, org.kie.api.runtime.rule.RuleContext kcontext, RuleUtils utils) {\r\n//    org.kie.api.runtime.rule.QueryResults res \u003d kcontext.getKieRuntime().getQueryResults(query);\r\n//    SolverKnowledgeObject ko \u003d null;\r\n//    for (org.kie.api.runtime.rule.QueryResultsRow row : rexs) {\r\n//        ko \u003d ((SolverKnowledgeObject) row.get(\"so\"));\r\n//    }\r\n//\r\n//   return ko;\r\n//}","uuid":"70713d04-6636-3fc2-819d-a3775440f436"}}
